ARM GAS  /tmp/ccwg8byt.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FWLIB/src/stm32f10x_rtc.c"
  18              		.section	.text.RTC_ITConfig,"ax",%progbits
  19              		.align	1
  20              		.global	RTC_ITConfig
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	RTC_ITConfig:
  26              	.LVL0:
  27              	.LFB29:
   1:./FWLIB/src/stm32f10x_rtc.c **** /**
   2:./FWLIB/src/stm32f10x_rtc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f10x_rtc.c ****   * @file    stm32f10x_rtc.c
   4:./FWLIB/src/stm32f10x_rtc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f10x_rtc.c ****   * @version V3.5.0
   6:./FWLIB/src/stm32f10x_rtc.c ****   * @date    11-March-2011
   7:./FWLIB/src/stm32f10x_rtc.c ****   * @brief   This file provides all the RTC firmware functions.
   8:./FWLIB/src/stm32f10x_rtc.c ****   ******************************************************************************
   9:./FWLIB/src/stm32f10x_rtc.c ****   * @attention
  10:./FWLIB/src/stm32f10x_rtc.c ****   *
  11:./FWLIB/src/stm32f10x_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:./FWLIB/src/stm32f10x_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:./FWLIB/src/stm32f10x_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:./FWLIB/src/stm32f10x_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:./FWLIB/src/stm32f10x_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:./FWLIB/src/stm32f10x_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:./FWLIB/src/stm32f10x_rtc.c ****   *
  18:./FWLIB/src/stm32f10x_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:./FWLIB/src/stm32f10x_rtc.c ****   ******************************************************************************
  20:./FWLIB/src/stm32f10x_rtc.c ****   */
  21:./FWLIB/src/stm32f10x_rtc.c **** 
  22:./FWLIB/src/stm32f10x_rtc.c **** /* Includes ------------------------------------------------------------------*/
  23:./FWLIB/src/stm32f10x_rtc.c **** #include "stm32f10x_rtc.h"
  24:./FWLIB/src/stm32f10x_rtc.c **** 
  25:./FWLIB/src/stm32f10x_rtc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  27:./FWLIB/src/stm32f10x_rtc.c ****   */
  28:./FWLIB/src/stm32f10x_rtc.c **** 
  29:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC 
  30:./FWLIB/src/stm32f10x_rtc.c ****   * @brief RTC driver modules
  31:./FWLIB/src/stm32f10x_rtc.c ****   * @{
ARM GAS  /tmp/ccwg8byt.s 			page 2


  32:./FWLIB/src/stm32f10x_rtc.c ****   */
  33:./FWLIB/src/stm32f10x_rtc.c **** 
  34:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_TypesDefinitions
  35:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  36:./FWLIB/src/stm32f10x_rtc.c ****   */ 
  37:./FWLIB/src/stm32f10x_rtc.c **** /**
  38:./FWLIB/src/stm32f10x_rtc.c ****   * @}
  39:./FWLIB/src/stm32f10x_rtc.c ****   */
  40:./FWLIB/src/stm32f10x_rtc.c **** 
  41:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Defines
  42:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  43:./FWLIB/src/stm32f10x_rtc.c ****   */
  44:./FWLIB/src/stm32f10x_rtc.c **** #define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
  45:./FWLIB/src/stm32f10x_rtc.c **** #define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
  46:./FWLIB/src/stm32f10x_rtc.c **** 
  47:./FWLIB/src/stm32f10x_rtc.c **** /**
  48:./FWLIB/src/stm32f10x_rtc.c ****   * @}
  49:./FWLIB/src/stm32f10x_rtc.c ****   */
  50:./FWLIB/src/stm32f10x_rtc.c **** 
  51:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Macros
  52:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  53:./FWLIB/src/stm32f10x_rtc.c ****   */
  54:./FWLIB/src/stm32f10x_rtc.c **** 
  55:./FWLIB/src/stm32f10x_rtc.c **** /**
  56:./FWLIB/src/stm32f10x_rtc.c ****   * @}
  57:./FWLIB/src/stm32f10x_rtc.c ****   */
  58:./FWLIB/src/stm32f10x_rtc.c **** 
  59:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Variables
  60:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  61:./FWLIB/src/stm32f10x_rtc.c ****   */
  62:./FWLIB/src/stm32f10x_rtc.c **** 
  63:./FWLIB/src/stm32f10x_rtc.c **** /**
  64:./FWLIB/src/stm32f10x_rtc.c ****   * @}
  65:./FWLIB/src/stm32f10x_rtc.c ****   */
  66:./FWLIB/src/stm32f10x_rtc.c **** 
  67:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_FunctionPrototypes
  68:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  69:./FWLIB/src/stm32f10x_rtc.c ****   */
  70:./FWLIB/src/stm32f10x_rtc.c **** 
  71:./FWLIB/src/stm32f10x_rtc.c **** /**
  72:./FWLIB/src/stm32f10x_rtc.c ****   * @}
  73:./FWLIB/src/stm32f10x_rtc.c ****   */
  74:./FWLIB/src/stm32f10x_rtc.c **** 
  75:./FWLIB/src/stm32f10x_rtc.c **** /** @defgroup RTC_Private_Functions
  76:./FWLIB/src/stm32f10x_rtc.c ****   * @{
  77:./FWLIB/src/stm32f10x_rtc.c ****   */
  78:./FWLIB/src/stm32f10x_rtc.c **** 
  79:./FWLIB/src/stm32f10x_rtc.c **** /**
  80:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
  81:./FWLIB/src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupts sources to be enabled or disabled.
  82:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
  83:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
  84:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
  85:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
  86:./FWLIB/src/stm32f10x_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
  87:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.
  88:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
ARM GAS  /tmp/ccwg8byt.s 			page 3


  89:./FWLIB/src/stm32f10x_rtc.c ****   */
  90:./FWLIB/src/stm32f10x_rtc.c **** void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
  91:./FWLIB/src/stm32f10x_rtc.c **** {
  28              		.loc 1 91 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  92:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
  93:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_IT(RTC_IT));  
  33              		.loc 1 93 3 view .LVU1
  94:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  34              		.loc 1 94 3 view .LVU2
  95:./FWLIB/src/stm32f10x_rtc.c ****   
  96:./FWLIB/src/stm32f10x_rtc.c ****   if (NewState != DISABLE)
  35              		.loc 1 96 3 view .LVU3
  36              		.loc 1 96 6 is_stmt 0 view .LVU4
  37 0000 29B1     		cbz	r1, .L2
  97:./FWLIB/src/stm32f10x_rtc.c ****   {
  98:./FWLIB/src/stm32f10x_rtc.c ****     RTC->CRH |= RTC_IT;
  38              		.loc 1 98 5 is_stmt 1 view .LVU5
  39              		.loc 1 98 8 is_stmt 0 view .LVU6
  40 0002 064A     		ldr	r2, .L4
  41 0004 1388     		ldrh	r3, [r2]
  42 0006 9BB2     		uxth	r3, r3
  43              		.loc 1 98 14 view .LVU7
  44 0008 0343     		orrs	r3, r3, r0
  45 000a 1380     		strh	r3, [r2]	@ movhi
  46 000c 7047     		bx	lr
  47              	.L2:
  99:./FWLIB/src/stm32f10x_rtc.c ****   }
 100:./FWLIB/src/stm32f10x_rtc.c ****   else
 101:./FWLIB/src/stm32f10x_rtc.c ****   {
 102:./FWLIB/src/stm32f10x_rtc.c ****     RTC->CRH &= (uint16_t)~RTC_IT;
  48              		.loc 1 102 5 is_stmt 1 view .LVU8
  49              		.loc 1 102 8 is_stmt 0 view .LVU9
  50 000e 034B     		ldr	r3, .L4
  51 0010 1A88     		ldrh	r2, [r3]
  52              		.loc 1 102 17 view .LVU10
  53 0012 C043     		mvns	r0, r0
  54              	.LVL1:
  55              		.loc 1 102 17 view .LVU11
  56 0014 80B2     		uxth	r0, r0
  57              		.loc 1 102 14 view .LVU12
  58 0016 1040     		ands	r0, r0, r2
  59 0018 1880     		strh	r0, [r3]	@ movhi
 103:./FWLIB/src/stm32f10x_rtc.c ****   }
 104:./FWLIB/src/stm32f10x_rtc.c **** }
  60              		.loc 1 104 1 view .LVU13
  61 001a 7047     		bx	lr
  62              	.L5:
  63              		.align	2
  64              	.L4:
  65 001c 00280040 		.word	1073752064
  66              		.cfi_endproc
  67              	.LFE29:
  69              		.section	.text.RTC_EnterConfigMode,"ax",%progbits
ARM GAS  /tmp/ccwg8byt.s 			page 4


  70              		.align	1
  71              		.global	RTC_EnterConfigMode
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  76              	RTC_EnterConfigMode:
  77              	.LFB30:
 105:./FWLIB/src/stm32f10x_rtc.c **** 
 106:./FWLIB/src/stm32f10x_rtc.c **** /**
 107:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Enters the RTC configuration mode.
 108:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 109:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 110:./FWLIB/src/stm32f10x_rtc.c ****   */
 111:./FWLIB/src/stm32f10x_rtc.c **** void RTC_EnterConfigMode(void)
 112:./FWLIB/src/stm32f10x_rtc.c **** {
  78              		.loc 1 112 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
 113:./FWLIB/src/stm32f10x_rtc.c ****   /* Set the CNF flag to enter in the Configuration Mode */
 114:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CRL |= RTC_CRL_CNF;
  83              		.loc 1 114 3 view .LVU15
  84              		.loc 1 114 6 is_stmt 0 view .LVU16
  85 0000 034A     		ldr	r2, .L7
  86 0002 9388     		ldrh	r3, [r2, #4]
  87 0004 9BB2     		uxth	r3, r3
  88              		.loc 1 114 12 view .LVU17
  89 0006 43F01003 		orr	r3, r3, #16
  90 000a 9380     		strh	r3, [r2, #4]	@ movhi
 115:./FWLIB/src/stm32f10x_rtc.c **** }
  91              		.loc 1 115 1 view .LVU18
  92 000c 7047     		bx	lr
  93              	.L8:
  94 000e 00BF     		.align	2
  95              	.L7:
  96 0010 00280040 		.word	1073752064
  97              		.cfi_endproc
  98              	.LFE30:
 100              		.section	.text.RTC_ExitConfigMode,"ax",%progbits
 101              		.align	1
 102              		.global	RTC_ExitConfigMode
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 107              	RTC_ExitConfigMode:
 108              	.LFB31:
 116:./FWLIB/src/stm32f10x_rtc.c **** 
 117:./FWLIB/src/stm32f10x_rtc.c **** /**
 118:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Exits from the RTC configuration mode.
 119:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 120:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 121:./FWLIB/src/stm32f10x_rtc.c ****   */
 122:./FWLIB/src/stm32f10x_rtc.c **** void RTC_ExitConfigMode(void)
 123:./FWLIB/src/stm32f10x_rtc.c **** {
 109              		.loc 1 123 1 is_stmt 1 view -0
 110              		.cfi_startproc
ARM GAS  /tmp/ccwg8byt.s 			page 5


 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 124:./FWLIB/src/stm32f10x_rtc.c ****   /* Reset the CNF flag to exit from the Configuration Mode */
 125:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 114              		.loc 1 125 3 view .LVU20
 115              		.loc 1 125 6 is_stmt 0 view .LVU21
 116 0000 034A     		ldr	r2, .L10
 117 0002 9388     		ldrh	r3, [r2, #4]
 118 0004 9BB2     		uxth	r3, r3
 119              		.loc 1 125 12 view .LVU22
 120 0006 23F01003 		bic	r3, r3, #16
 121 000a 9BB2     		uxth	r3, r3
 122 000c 9380     		strh	r3, [r2, #4]	@ movhi
 126:./FWLIB/src/stm32f10x_rtc.c **** }
 123              		.loc 1 126 1 view .LVU23
 124 000e 7047     		bx	lr
 125              	.L11:
 126              		.align	2
 127              	.L10:
 128 0010 00280040 		.word	1073752064
 129              		.cfi_endproc
 130              	.LFE31:
 132              		.section	.text.RTC_GetCounter,"ax",%progbits
 133              		.align	1
 134              		.global	RTC_GetCounter
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 139              	RTC_GetCounter:
 140              	.LFB32:
 127:./FWLIB/src/stm32f10x_rtc.c **** 
 128:./FWLIB/src/stm32f10x_rtc.c **** /**
 129:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Gets the RTC counter value.
 130:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 131:./FWLIB/src/stm32f10x_rtc.c ****   * @retval RTC counter value.
 132:./FWLIB/src/stm32f10x_rtc.c ****   */
 133:./FWLIB/src/stm32f10x_rtc.c **** uint32_t RTC_GetCounter(void)
 134:./FWLIB/src/stm32f10x_rtc.c **** {
 141              		.loc 1 134 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 135:./FWLIB/src/stm32f10x_rtc.c ****   uint16_t tmp = 0;
 146              		.loc 1 135 3 view .LVU25
 147              	.LVL2:
 136:./FWLIB/src/stm32f10x_rtc.c ****   tmp = RTC->CNTL;
 148              		.loc 1 136 3 view .LVU26
 149              		.loc 1 136 7 is_stmt 0 view .LVU27
 150 0000 034A     		ldr	r2, .L13
 151 0002 938B     		ldrh	r3, [r2, #28]
 152 0004 9BB2     		uxth	r3, r3
 153              	.LVL3:
 137:./FWLIB/src/stm32f10x_rtc.c ****   return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
 154              		.loc 1 137 3 is_stmt 1 view .LVU28
 155              		.loc 1 137 25 is_stmt 0 view .LVU29
ARM GAS  /tmp/ccwg8byt.s 			page 6


 156 0006 108B     		ldrh	r0, [r2, #24]
 138:./FWLIB/src/stm32f10x_rtc.c **** }
 157              		.loc 1 138 1 view .LVU30
 158 0008 43EA0040 		orr	r0, r3, r0, lsl #16
 159 000c 7047     		bx	lr
 160              	.L14:
 161 000e 00BF     		.align	2
 162              	.L13:
 163 0010 00280040 		.word	1073752064
 164              		.cfi_endproc
 165              	.LFE32:
 167              		.section	.text.RTC_SetCounter,"ax",%progbits
 168              		.align	1
 169              		.global	RTC_SetCounter
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	RTC_SetCounter:
 175              	.LVL4:
 176              	.LFB33:
 139:./FWLIB/src/stm32f10x_rtc.c **** 
 140:./FWLIB/src/stm32f10x_rtc.c **** /**
 141:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Sets the RTC counter value.
 142:./FWLIB/src/stm32f10x_rtc.c ****   * @param  CounterValue: RTC counter new value.
 143:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 144:./FWLIB/src/stm32f10x_rtc.c ****   */
 145:./FWLIB/src/stm32f10x_rtc.c **** void RTC_SetCounter(uint32_t CounterValue)
 146:./FWLIB/src/stm32f10x_rtc.c **** { 
 177              		.loc 1 146 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		.loc 1 146 1 is_stmt 0 view .LVU32
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI0:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 14, -4
 187 0002 0446     		mov	r4, r0
 147:./FWLIB/src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 188              		.loc 1 147 3 is_stmt 1 view .LVU33
 189 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 190              	.LVL5:
 148:./FWLIB/src/stm32f10x_rtc.c ****   /* Set RTC COUNTER MSB word */
 149:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CNTH = CounterValue >> 16;
 191              		.loc 1 149 3 view .LVU34
 192              		.loc 1 149 13 is_stmt 0 view .LVU35
 193 0008 220C     		lsrs	r2, r4, #16
 194 000a 034B     		ldr	r3, .L17
 195 000c 1A83     		strh	r2, [r3, #24]	@ movhi
 150:./FWLIB/src/stm32f10x_rtc.c ****   /* Set RTC COUNTER LSB word */
 151:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 196              		.loc 1 151 3 is_stmt 1 view .LVU36
 197              		.loc 1 151 13 is_stmt 0 view .LVU37
 198 000e A4B2     		uxth	r4, r4
 199              	.LVL6:
 200              		.loc 1 151 13 view .LVU38
ARM GAS  /tmp/ccwg8byt.s 			page 7


 201 0010 9C83     		strh	r4, [r3, #28]	@ movhi
 152:./FWLIB/src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 202              		.loc 1 152 3 is_stmt 1 view .LVU39
 203 0012 FFF7FEFF 		bl	RTC_ExitConfigMode
 204              	.LVL7:
 153:./FWLIB/src/stm32f10x_rtc.c **** }
 205              		.loc 1 153 1 is_stmt 0 view .LVU40
 206 0016 10BD     		pop	{r4, pc}
 207              	.L18:
 208              		.align	2
 209              	.L17:
 210 0018 00280040 		.word	1073752064
 211              		.cfi_endproc
 212              	.LFE33:
 214              		.section	.text.RTC_SetPrescaler,"ax",%progbits
 215              		.align	1
 216              		.global	RTC_SetPrescaler
 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 221              	RTC_SetPrescaler:
 222              	.LVL8:
 223              	.LFB34:
 154:./FWLIB/src/stm32f10x_rtc.c **** 
 155:./FWLIB/src/stm32f10x_rtc.c **** /**
 156:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Sets the RTC prescaler value.
 157:./FWLIB/src/stm32f10x_rtc.c ****   * @param  PrescalerValue: RTC prescaler new value.
 158:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 159:./FWLIB/src/stm32f10x_rtc.c ****   */
 160:./FWLIB/src/stm32f10x_rtc.c **** void RTC_SetPrescaler(uint32_t PrescalerValue)
 161:./FWLIB/src/stm32f10x_rtc.c **** {
 224              		.loc 1 161 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		.loc 1 161 1 is_stmt 0 view .LVU42
 229 0000 10B5     		push	{r4, lr}
 230              	.LCFI1:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 4, -8
 233              		.cfi_offset 14, -4
 234 0002 0446     		mov	r4, r0
 162:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
 163:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_PRESCALER(PrescalerValue));
 235              		.loc 1 163 3 is_stmt 1 view .LVU43
 164:./FWLIB/src/stm32f10x_rtc.c ****   
 165:./FWLIB/src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 236              		.loc 1 165 3 view .LVU44
 237 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 238              	.LVL9:
 166:./FWLIB/src/stm32f10x_rtc.c ****   /* Set RTC PRESCALER MSB word */
 167:./FWLIB/src/stm32f10x_rtc.c ****   RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 239              		.loc 1 167 3 view .LVU45
 240              		.loc 1 167 48 is_stmt 0 view .LVU46
 241 0008 C4F30342 		ubfx	r2, r4, #16, #4
 242              		.loc 1 167 13 view .LVU47
 243 000c 034B     		ldr	r3, .L21
ARM GAS  /tmp/ccwg8byt.s 			page 8


 244 000e 1A81     		strh	r2, [r3, #8]	@ movhi
 168:./FWLIB/src/stm32f10x_rtc.c ****   /* Set RTC PRESCALER LSB word */
 169:./FWLIB/src/stm32f10x_rtc.c ****   RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 245              		.loc 1 169 3 is_stmt 1 view .LVU48
 246              		.loc 1 169 13 is_stmt 0 view .LVU49
 247 0010 A4B2     		uxth	r4, r4
 248              	.LVL10:
 249              		.loc 1 169 13 view .LVU50
 250 0012 9C81     		strh	r4, [r3, #12]	@ movhi
 170:./FWLIB/src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 251              		.loc 1 170 3 is_stmt 1 view .LVU51
 252 0014 FFF7FEFF 		bl	RTC_ExitConfigMode
 253              	.LVL11:
 171:./FWLIB/src/stm32f10x_rtc.c **** }
 254              		.loc 1 171 1 is_stmt 0 view .LVU52
 255 0018 10BD     		pop	{r4, pc}
 256              	.L22:
 257 001a 00BF     		.align	2
 258              	.L21:
 259 001c 00280040 		.word	1073752064
 260              		.cfi_endproc
 261              	.LFE34:
 263              		.section	.text.RTC_SetAlarm,"ax",%progbits
 264              		.align	1
 265              		.global	RTC_SetAlarm
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	RTC_SetAlarm:
 271              	.LVL12:
 272              	.LFB35:
 172:./FWLIB/src/stm32f10x_rtc.c **** 
 173:./FWLIB/src/stm32f10x_rtc.c **** /**
 174:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Sets the RTC alarm value.
 175:./FWLIB/src/stm32f10x_rtc.c ****   * @param  AlarmValue: RTC alarm new value.
 176:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 177:./FWLIB/src/stm32f10x_rtc.c ****   */
 178:./FWLIB/src/stm32f10x_rtc.c **** void RTC_SetAlarm(uint32_t AlarmValue)
 179:./FWLIB/src/stm32f10x_rtc.c **** {  
 273              		.loc 1 179 1 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		.loc 1 179 1 is_stmt 0 view .LVU54
 278 0000 10B5     		push	{r4, lr}
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 4, -8
 282              		.cfi_offset 14, -4
 283 0002 0446     		mov	r4, r0
 180:./FWLIB/src/stm32f10x_rtc.c ****   RTC_EnterConfigMode();
 284              		.loc 1 180 3 is_stmt 1 view .LVU55
 285 0004 FFF7FEFF 		bl	RTC_EnterConfigMode
 286              	.LVL13:
 181:./FWLIB/src/stm32f10x_rtc.c ****   /* Set the ALARM MSB word */
 182:./FWLIB/src/stm32f10x_rtc.c ****   RTC->ALRH = AlarmValue >> 16;
 287              		.loc 1 182 3 view .LVU56
ARM GAS  /tmp/ccwg8byt.s 			page 9


 288              		.loc 1 182 13 is_stmt 0 view .LVU57
 289 0008 220C     		lsrs	r2, r4, #16
 290 000a 034B     		ldr	r3, .L25
 291 000c 1A84     		strh	r2, [r3, #32]	@ movhi
 183:./FWLIB/src/stm32f10x_rtc.c ****   /* Set the ALARM LSB word */
 184:./FWLIB/src/stm32f10x_rtc.c ****   RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
 292              		.loc 1 184 3 is_stmt 1 view .LVU58
 293              		.loc 1 184 13 is_stmt 0 view .LVU59
 294 000e A4B2     		uxth	r4, r4
 295              	.LVL14:
 296              		.loc 1 184 13 view .LVU60
 297 0010 9C84     		strh	r4, [r3, #36]	@ movhi
 185:./FWLIB/src/stm32f10x_rtc.c ****   RTC_ExitConfigMode();
 298              		.loc 1 185 3 is_stmt 1 view .LVU61
 299 0012 FFF7FEFF 		bl	RTC_ExitConfigMode
 300              	.LVL15:
 186:./FWLIB/src/stm32f10x_rtc.c **** }
 301              		.loc 1 186 1 is_stmt 0 view .LVU62
 302 0016 10BD     		pop	{r4, pc}
 303              	.L26:
 304              		.align	2
 305              	.L25:
 306 0018 00280040 		.word	1073752064
 307              		.cfi_endproc
 308              	.LFE35:
 310              		.section	.text.RTC_GetDivider,"ax",%progbits
 311              		.align	1
 312              		.global	RTC_GetDivider
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 317              	RTC_GetDivider:
 318              	.LFB36:
 187:./FWLIB/src/stm32f10x_rtc.c **** 
 188:./FWLIB/src/stm32f10x_rtc.c **** /**
 189:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Gets the RTC divider value.
 190:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 191:./FWLIB/src/stm32f10x_rtc.c ****   * @retval RTC Divider value.
 192:./FWLIB/src/stm32f10x_rtc.c ****   */
 193:./FWLIB/src/stm32f10x_rtc.c **** uint32_t RTC_GetDivider(void)
 194:./FWLIB/src/stm32f10x_rtc.c **** {
 319              		.loc 1 194 1 is_stmt 1 view -0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 195:./FWLIB/src/stm32f10x_rtc.c ****   uint32_t tmp = 0x00;
 324              		.loc 1 195 3 view .LVU64
 325              	.LVL16:
 196:./FWLIB/src/stm32f10x_rtc.c ****   tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
 326              		.loc 1 196 3 view .LVU65
 327              		.loc 1 196 23 is_stmt 0 view .LVU66
 328 0000 044A     		ldr	r2, .L28
 329 0002 138A     		ldrh	r3, [r2, #16]
 330              		.loc 1 196 50 view .LVU67
 331 0004 1B04     		lsls	r3, r3, #16
 332              		.loc 1 196 7 view .LVU68
ARM GAS  /tmp/ccwg8byt.s 			page 10


 333 0006 03F47023 		and	r3, r3, #983040
 334              	.LVL17:
 197:./FWLIB/src/stm32f10x_rtc.c ****   tmp |= RTC->DIVL;
 335              		.loc 1 197 3 is_stmt 1 view .LVU69
 336              		.loc 1 197 13 is_stmt 0 view .LVU70
 337 000a 908A     		ldrh	r0, [r2, #20]
 338 000c 80B2     		uxth	r0, r0
 339              	.LVL18:
 198:./FWLIB/src/stm32f10x_rtc.c ****   return tmp;
 340              		.loc 1 198 3 is_stmt 1 view .LVU71
 199:./FWLIB/src/stm32f10x_rtc.c **** }
 341              		.loc 1 199 1 is_stmt 0 view .LVU72
 342 000e 1843     		orrs	r0, r0, r3
 343              	.LVL19:
 344              		.loc 1 199 1 view .LVU73
 345 0010 7047     		bx	lr
 346              	.L29:
 347 0012 00BF     		.align	2
 348              	.L28:
 349 0014 00280040 		.word	1073752064
 350              		.cfi_endproc
 351              	.LFE36:
 353              		.section	.text.RTC_WaitForLastTask,"ax",%progbits
 354              		.align	1
 355              		.global	RTC_WaitForLastTask
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 360              	RTC_WaitForLastTask:
 361              	.LFB37:
 200:./FWLIB/src/stm32f10x_rtc.c **** 
 201:./FWLIB/src/stm32f10x_rtc.c **** /**
 202:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Waits until last write operation on RTC registers has finished.
 203:./FWLIB/src/stm32f10x_rtc.c ****   * @note   This function must be called before any write to RTC registers.
 204:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 205:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 206:./FWLIB/src/stm32f10x_rtc.c ****   */
 207:./FWLIB/src/stm32f10x_rtc.c **** void RTC_WaitForLastTask(void)
 208:./FWLIB/src/stm32f10x_rtc.c **** {
 362              		.loc 1 208 1 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 367              	.L31:
 209:./FWLIB/src/stm32f10x_rtc.c ****   /* Loop until RTOFF flag is set */
 210:./FWLIB/src/stm32f10x_rtc.c ****   while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 211:./FWLIB/src/stm32f10x_rtc.c ****   {
 212:./FWLIB/src/stm32f10x_rtc.c ****   }
 368              		.loc 1 212 3 view .LVU75
 210:./FWLIB/src/stm32f10x_rtc.c ****   {
 369              		.loc 1 210 38 discriminator 1 view .LVU76
 210:./FWLIB/src/stm32f10x_rtc.c ****   {
 370              		.loc 1 210 14 is_stmt 0 discriminator 1 view .LVU77
 371 0000 024B     		ldr	r3, .L32
 372 0002 9B88     		ldrh	r3, [r3, #4]
 210:./FWLIB/src/stm32f10x_rtc.c ****   {
ARM GAS  /tmp/ccwg8byt.s 			page 11


 373              		.loc 1 210 38 discriminator 1 view .LVU78
 374 0004 13F0200F 		tst	r3, #32
 375 0008 FAD0     		beq	.L31
 213:./FWLIB/src/stm32f10x_rtc.c **** }
 376              		.loc 1 213 1 view .LVU79
 377 000a 7047     		bx	lr
 378              	.L33:
 379              		.align	2
 380              	.L32:
 381 000c 00280040 		.word	1073752064
 382              		.cfi_endproc
 383              	.LFE37:
 385              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 386              		.align	1
 387              		.global	RTC_WaitForSynchro
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 392              	RTC_WaitForSynchro:
 393              	.LFB38:
 214:./FWLIB/src/stm32f10x_rtc.c **** 
 215:./FWLIB/src/stm32f10x_rtc.c **** /**
 216:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
 217:./FWLIB/src/stm32f10x_rtc.c ****   *   are synchronized with RTC APB clock.
 218:./FWLIB/src/stm32f10x_rtc.c ****   * @note   This function must be called before any read operation after an APB reset
 219:./FWLIB/src/stm32f10x_rtc.c ****   *   or an APB clock stop.
 220:./FWLIB/src/stm32f10x_rtc.c ****   * @param  None
 221:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 222:./FWLIB/src/stm32f10x_rtc.c ****   */
 223:./FWLIB/src/stm32f10x_rtc.c **** void RTC_WaitForSynchro(void)
 224:./FWLIB/src/stm32f10x_rtc.c **** {
 394              		.loc 1 224 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 225:./FWLIB/src/stm32f10x_rtc.c ****   /* Clear RSF flag */
 226:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 399              		.loc 1 226 3 view .LVU81
 400              		.loc 1 226 6 is_stmt 0 view .LVU82
 401 0000 064A     		ldr	r2, .L36
 402 0002 9388     		ldrh	r3, [r2, #4]
 403 0004 9BB2     		uxth	r3, r3
 404              		.loc 1 226 12 view .LVU83
 405 0006 23F00803 		bic	r3, r3, #8
 406 000a 9BB2     		uxth	r3, r3
 407 000c 9380     		strh	r3, [r2, #4]	@ movhi
 227:./FWLIB/src/stm32f10x_rtc.c ****   /* Loop until RSF flag is set */
 228:./FWLIB/src/stm32f10x_rtc.c ****   while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 408              		.loc 1 228 3 is_stmt 1 view .LVU84
 409              	.L35:
 229:./FWLIB/src/stm32f10x_rtc.c ****   {
 230:./FWLIB/src/stm32f10x_rtc.c ****   }
 410              		.loc 1 230 3 view .LVU85
 228:./FWLIB/src/stm32f10x_rtc.c ****   {
 411              		.loc 1 228 36 discriminator 1 view .LVU86
 228:./FWLIB/src/stm32f10x_rtc.c ****   {
ARM GAS  /tmp/ccwg8byt.s 			page 12


 412              		.loc 1 228 14 is_stmt 0 discriminator 1 view .LVU87
 413 000e 034B     		ldr	r3, .L36
 414 0010 9B88     		ldrh	r3, [r3, #4]
 228:./FWLIB/src/stm32f10x_rtc.c ****   {
 415              		.loc 1 228 36 discriminator 1 view .LVU88
 416 0012 13F0080F 		tst	r3, #8
 417 0016 FAD0     		beq	.L35
 231:./FWLIB/src/stm32f10x_rtc.c **** }
 418              		.loc 1 231 1 view .LVU89
 419 0018 7047     		bx	lr
 420              	.L37:
 421 001a 00BF     		.align	2
 422              	.L36:
 423 001c 00280040 		.word	1073752064
 424              		.cfi_endproc
 425              	.LFE38:
 427              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 428              		.align	1
 429              		.global	RTC_GetFlagStatus
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	RTC_GetFlagStatus:
 435              	.LVL20:
 436              	.LFB39:
 232:./FWLIB/src/stm32f10x_rtc.c **** 
 233:./FWLIB/src/stm32f10x_rtc.c **** /**
 234:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
 235:./FWLIB/src/stm32f10x_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
 236:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be one the following values:
 237:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RTOFF: RTC Operation OFF flag
 238:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RSF: Registers Synchronized flag
 239:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_OW: Overflow flag
 240:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_ALR: Alarm flag
 241:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_SEC: Second flag
 242:./FWLIB/src/stm32f10x_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
 243:./FWLIB/src/stm32f10x_rtc.c ****   */
 244:./FWLIB/src/stm32f10x_rtc.c **** FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
 245:./FWLIB/src/stm32f10x_rtc.c **** {
 437              		.loc 1 245 1 is_stmt 1 view -0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 246:./FWLIB/src/stm32f10x_rtc.c ****   FlagStatus bitstatus = RESET;
 442              		.loc 1 246 3 view .LVU91
 247:./FWLIB/src/stm32f10x_rtc.c ****   
 248:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
 249:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
 443              		.loc 1 249 3 view .LVU92
 250:./FWLIB/src/stm32f10x_rtc.c ****   
 251:./FWLIB/src/stm32f10x_rtc.c ****   if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
 444              		.loc 1 251 3 view .LVU93
 445              		.loc 1 251 11 is_stmt 0 view .LVU94
 446 0000 034B     		ldr	r3, .L41
 447 0002 9B88     		ldrh	r3, [r3, #4]
 448              		.loc 1 251 6 view .LVU95
ARM GAS  /tmp/ccwg8byt.s 			page 13


 449 0004 1842     		tst	r0, r3
 450 0006 01D0     		beq	.L40
 252:./FWLIB/src/stm32f10x_rtc.c ****   {
 253:./FWLIB/src/stm32f10x_rtc.c ****     bitstatus = SET;
 451              		.loc 1 253 15 view .LVU96
 452 0008 0120     		movs	r0, #1
 453              	.LVL21:
 454              		.loc 1 253 15 view .LVU97
 455 000a 7047     		bx	lr
 456              	.LVL22:
 457              	.L40:
 254:./FWLIB/src/stm32f10x_rtc.c ****   }
 255:./FWLIB/src/stm32f10x_rtc.c ****   else
 256:./FWLIB/src/stm32f10x_rtc.c ****   {
 257:./FWLIB/src/stm32f10x_rtc.c ****     bitstatus = RESET;
 458              		.loc 1 257 15 view .LVU98
 459 000c 0020     		movs	r0, #0
 460              	.LVL23:
 258:./FWLIB/src/stm32f10x_rtc.c ****   }
 259:./FWLIB/src/stm32f10x_rtc.c ****   return bitstatus;
 461              		.loc 1 259 3 is_stmt 1 view .LVU99
 260:./FWLIB/src/stm32f10x_rtc.c **** }
 462              		.loc 1 260 1 is_stmt 0 view .LVU100
 463 000e 7047     		bx	lr
 464              	.L42:
 465              		.align	2
 466              	.L41:
 467 0010 00280040 		.word	1073752064
 468              		.cfi_endproc
 469              	.LFE39:
 471              		.section	.text.RTC_ClearFlag,"ax",%progbits
 472              		.align	1
 473              		.global	RTC_ClearFlag
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 478              	RTC_ClearFlag:
 479              	.LVL24:
 480              	.LFB40:
 261:./FWLIB/src/stm32f10x_rtc.c **** 
 262:./FWLIB/src/stm32f10x_rtc.c **** /**
 263:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Clears the RTC's pending flags.
 264:./FWLIB/src/stm32f10x_rtc.c ****   * @param  RTC_FLAG: specifies the flag to clear.
 265:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
 266:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after
 267:./FWLIB/src/stm32f10x_rtc.c ****   *                        an APB reset or an APB Clock stop.
 268:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_OW: Overflow flag
 269:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_ALR: Alarm flag
 270:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_FLAG_SEC: Second flag
 271:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 272:./FWLIB/src/stm32f10x_rtc.c ****   */
 273:./FWLIB/src/stm32f10x_rtc.c **** void RTC_ClearFlag(uint16_t RTC_FLAG)
 274:./FWLIB/src/stm32f10x_rtc.c **** {
 481              		.loc 1 274 1 is_stmt 1 view -0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwg8byt.s 			page 14


 485              		@ link register save eliminated.
 275:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
 276:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
 486              		.loc 1 276 3 view .LVU102
 277:./FWLIB/src/stm32f10x_rtc.c ****     
 278:./FWLIB/src/stm32f10x_rtc.c ****   /* Clear the corresponding RTC flag */
 279:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_FLAG;
 487              		.loc 1 279 3 view .LVU103
 488              		.loc 1 279 6 is_stmt 0 view .LVU104
 489 0000 034B     		ldr	r3, .L44
 490 0002 9A88     		ldrh	r2, [r3, #4]
 491              		.loc 1 279 15 view .LVU105
 492 0004 C043     		mvns	r0, r0
 493              	.LVL25:
 494              		.loc 1 279 15 view .LVU106
 495 0006 80B2     		uxth	r0, r0
 496              	.LVL26:
 497              		.loc 1 279 12 view .LVU107
 498 0008 1040     		ands	r0, r0, r2
 499 000a 9880     		strh	r0, [r3, #4]	@ movhi
 280:./FWLIB/src/stm32f10x_rtc.c **** }
 500              		.loc 1 280 1 view .LVU108
 501 000c 7047     		bx	lr
 502              	.L45:
 503 000e 00BF     		.align	2
 504              	.L44:
 505 0010 00280040 		.word	1073752064
 506              		.cfi_endproc
 507              	.LFE40:
 509              		.section	.text.RTC_GetITStatus,"ax",%progbits
 510              		.align	1
 511              		.global	RTC_GetITStatus
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 516              	RTC_GetITStatus:
 517              	.LVL27:
 518              	.LFB41:
 281:./FWLIB/src/stm32f10x_rtc.c **** 
 282:./FWLIB/src/stm32f10x_rtc.c **** /**
 283:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
 284:./FWLIB/src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupts sources to check.
 285:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be one of the following values:
 286:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
 287:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
 288:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
 289:./FWLIB/src/stm32f10x_rtc.c ****   * @retval The new state of the RTC_IT (SET or RESET).
 290:./FWLIB/src/stm32f10x_rtc.c ****   */
 291:./FWLIB/src/stm32f10x_rtc.c **** ITStatus RTC_GetITStatus(uint16_t RTC_IT)
 292:./FWLIB/src/stm32f10x_rtc.c **** {
 519              		.loc 1 292 1 is_stmt 1 view -0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 293:./FWLIB/src/stm32f10x_rtc.c ****   ITStatus bitstatus = RESET;
 524              		.loc 1 293 3 view .LVU110
ARM GAS  /tmp/ccwg8byt.s 			page 15


 294:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
 295:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT)); 
 525              		.loc 1 295 3 view .LVU111
 296:./FWLIB/src/stm32f10x_rtc.c ****   
 297:./FWLIB/src/stm32f10x_rtc.c ****   bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
 526              		.loc 1 297 3 view .LVU112
 527              		.loc 1 297 29 is_stmt 0 view .LVU113
 528 0000 064A     		ldr	r2, .L50
 529 0002 9188     		ldrh	r1, [r2, #4]
 530              		.loc 1 297 15 view .LVU114
 531 0004 C3B2     		uxtb	r3, r0
 532              		.loc 1 297 13 view .LVU115
 533 0006 0B40     		ands	r3, r3, r1
 534              	.LVL28:
 298:./FWLIB/src/stm32f10x_rtc.c ****   if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
 535              		.loc 1 298 3 is_stmt 1 view .LVU116
 536              		.loc 1 298 12 is_stmt 0 view .LVU117
 537 0008 1288     		ldrh	r2, [r2]
 538              		.loc 1 298 6 view .LVU118
 539 000a 1042     		tst	r0, r2
 540 000c 02D0     		beq	.L48
 541              		.loc 1 298 48 discriminator 1 view .LVU119
 542 000e 1BB9     		cbnz	r3, .L49
 299:./FWLIB/src/stm32f10x_rtc.c ****   {
 300:./FWLIB/src/stm32f10x_rtc.c ****     bitstatus = SET;
 301:./FWLIB/src/stm32f10x_rtc.c ****   }
 302:./FWLIB/src/stm32f10x_rtc.c ****   else
 303:./FWLIB/src/stm32f10x_rtc.c ****   {
 304:./FWLIB/src/stm32f10x_rtc.c ****     bitstatus = RESET;
 543              		.loc 1 304 15 view .LVU120
 544 0010 0020     		movs	r0, #0
 545              	.LVL29:
 546              		.loc 1 304 15 view .LVU121
 547 0012 7047     		bx	lr
 548              	.LVL30:
 549              	.L48:
 550              		.loc 1 304 15 view .LVU122
 551 0014 0020     		movs	r0, #0
 552              	.LVL31:
 553              		.loc 1 304 15 view .LVU123
 554 0016 7047     		bx	lr
 555              	.LVL32:
 556              	.L49:
 300:./FWLIB/src/stm32f10x_rtc.c ****   }
 557              		.loc 1 300 15 view .LVU124
 558 0018 0120     		movs	r0, #1
 559              	.LVL33:
 305:./FWLIB/src/stm32f10x_rtc.c ****   }
 306:./FWLIB/src/stm32f10x_rtc.c ****   return bitstatus;
 560              		.loc 1 306 3 is_stmt 1 view .LVU125
 307:./FWLIB/src/stm32f10x_rtc.c **** }
 561              		.loc 1 307 1 is_stmt 0 view .LVU126
 562 001a 7047     		bx	lr
 563              	.L51:
 564              		.align	2
 565              	.L50:
 566 001c 00280040 		.word	1073752064
ARM GAS  /tmp/ccwg8byt.s 			page 16


 567              		.cfi_endproc
 568              	.LFE41:
 570              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 571              		.align	1
 572              		.global	RTC_ClearITPendingBit
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 577              	RTC_ClearITPendingBit:
 578              	.LVL34:
 579              	.LFB42:
 308:./FWLIB/src/stm32f10x_rtc.c **** 
 309:./FWLIB/src/stm32f10x_rtc.c **** /**
 310:./FWLIB/src/stm32f10x_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
 311:./FWLIB/src/stm32f10x_rtc.c ****   * @param  RTC_IT: specifies the interrupt pending bit to clear.
 312:./FWLIB/src/stm32f10x_rtc.c ****   *   This parameter can be any combination of the following values:
 313:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_OW: Overflow interrupt
 314:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_ALR: Alarm interrupt
 315:./FWLIB/src/stm32f10x_rtc.c ****   *     @arg RTC_IT_SEC: Second interrupt
 316:./FWLIB/src/stm32f10x_rtc.c ****   * @retval None
 317:./FWLIB/src/stm32f10x_rtc.c ****   */
 318:./FWLIB/src/stm32f10x_rtc.c **** void RTC_ClearITPendingBit(uint16_t RTC_IT)
 319:./FWLIB/src/stm32f10x_rtc.c **** {
 580              		.loc 1 319 1 is_stmt 1 view -0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 320:./FWLIB/src/stm32f10x_rtc.c ****   /* Check the parameters */
 321:./FWLIB/src/stm32f10x_rtc.c ****   assert_param(IS_RTC_IT(RTC_IT));  
 585              		.loc 1 321 3 view .LVU128
 322:./FWLIB/src/stm32f10x_rtc.c ****   
 323:./FWLIB/src/stm32f10x_rtc.c ****   /* Clear the corresponding RTC pending bit */
 324:./FWLIB/src/stm32f10x_rtc.c ****   RTC->CRL &= (uint16_t)~RTC_IT;
 586              		.loc 1 324 3 view .LVU129
 587              		.loc 1 324 6 is_stmt 0 view .LVU130
 588 0000 034B     		ldr	r3, .L53
 589 0002 9A88     		ldrh	r2, [r3, #4]
 590              		.loc 1 324 15 view .LVU131
 591 0004 C043     		mvns	r0, r0
 592              	.LVL35:
 593              		.loc 1 324 15 view .LVU132
 594 0006 80B2     		uxth	r0, r0
 595              	.LVL36:
 596              		.loc 1 324 12 view .LVU133
 597 0008 1040     		ands	r0, r0, r2
 598 000a 9880     		strh	r0, [r3, #4]	@ movhi
 325:./FWLIB/src/stm32f10x_rtc.c **** }
 599              		.loc 1 325 1 view .LVU134
 600 000c 7047     		bx	lr
 601              	.L54:
 602 000e 00BF     		.align	2
 603              	.L53:
 604 0010 00280040 		.word	1073752064
 605              		.cfi_endproc
 606              	.LFE42:
 608              		.text
ARM GAS  /tmp/ccwg8byt.s 			page 17


 609              	.Letext0:
 610              		.file 2 "/usr/lib/gcc/arm-none-eabi/14.1.0/include/stdint-gcc.h"
 611              		.file 3 "USER/stm32f10x.h"
ARM GAS  /tmp/ccwg8byt.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rtc.c
     /tmp/ccwg8byt.s:19     .text.RTC_ITConfig:00000000 $t
     /tmp/ccwg8byt.s:25     .text.RTC_ITConfig:00000000 RTC_ITConfig
     /tmp/ccwg8byt.s:65     .text.RTC_ITConfig:0000001c $d
     /tmp/ccwg8byt.s:70     .text.RTC_EnterConfigMode:00000000 $t
     /tmp/ccwg8byt.s:76     .text.RTC_EnterConfigMode:00000000 RTC_EnterConfigMode
     /tmp/ccwg8byt.s:96     .text.RTC_EnterConfigMode:00000010 $d
     /tmp/ccwg8byt.s:101    .text.RTC_ExitConfigMode:00000000 $t
     /tmp/ccwg8byt.s:107    .text.RTC_ExitConfigMode:00000000 RTC_ExitConfigMode
     /tmp/ccwg8byt.s:128    .text.RTC_ExitConfigMode:00000010 $d
     /tmp/ccwg8byt.s:133    .text.RTC_GetCounter:00000000 $t
     /tmp/ccwg8byt.s:139    .text.RTC_GetCounter:00000000 RTC_GetCounter
     /tmp/ccwg8byt.s:163    .text.RTC_GetCounter:00000010 $d
     /tmp/ccwg8byt.s:168    .text.RTC_SetCounter:00000000 $t
     /tmp/ccwg8byt.s:174    .text.RTC_SetCounter:00000000 RTC_SetCounter
     /tmp/ccwg8byt.s:210    .text.RTC_SetCounter:00000018 $d
     /tmp/ccwg8byt.s:215    .text.RTC_SetPrescaler:00000000 $t
     /tmp/ccwg8byt.s:221    .text.RTC_SetPrescaler:00000000 RTC_SetPrescaler
     /tmp/ccwg8byt.s:259    .text.RTC_SetPrescaler:0000001c $d
     /tmp/ccwg8byt.s:264    .text.RTC_SetAlarm:00000000 $t
     /tmp/ccwg8byt.s:270    .text.RTC_SetAlarm:00000000 RTC_SetAlarm
     /tmp/ccwg8byt.s:306    .text.RTC_SetAlarm:00000018 $d
     /tmp/ccwg8byt.s:311    .text.RTC_GetDivider:00000000 $t
     /tmp/ccwg8byt.s:317    .text.RTC_GetDivider:00000000 RTC_GetDivider
     /tmp/ccwg8byt.s:349    .text.RTC_GetDivider:00000014 $d
     /tmp/ccwg8byt.s:354    .text.RTC_WaitForLastTask:00000000 $t
     /tmp/ccwg8byt.s:360    .text.RTC_WaitForLastTask:00000000 RTC_WaitForLastTask
     /tmp/ccwg8byt.s:381    .text.RTC_WaitForLastTask:0000000c $d
     /tmp/ccwg8byt.s:386    .text.RTC_WaitForSynchro:00000000 $t
     /tmp/ccwg8byt.s:392    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
     /tmp/ccwg8byt.s:423    .text.RTC_WaitForSynchro:0000001c $d
     /tmp/ccwg8byt.s:428    .text.RTC_GetFlagStatus:00000000 $t
     /tmp/ccwg8byt.s:434    .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
     /tmp/ccwg8byt.s:467    .text.RTC_GetFlagStatus:00000010 $d
     /tmp/ccwg8byt.s:472    .text.RTC_ClearFlag:00000000 $t
     /tmp/ccwg8byt.s:478    .text.RTC_ClearFlag:00000000 RTC_ClearFlag
     /tmp/ccwg8byt.s:505    .text.RTC_ClearFlag:00000010 $d
     /tmp/ccwg8byt.s:510    .text.RTC_GetITStatus:00000000 $t
     /tmp/ccwg8byt.s:516    .text.RTC_GetITStatus:00000000 RTC_GetITStatus
     /tmp/ccwg8byt.s:566    .text.RTC_GetITStatus:0000001c $d
     /tmp/ccwg8byt.s:571    .text.RTC_ClearITPendingBit:00000000 $t
     /tmp/ccwg8byt.s:577    .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
     /tmp/ccwg8byt.s:604    .text.RTC_ClearITPendingBit:00000010 $d

NO UNDEFINED SYMBOLS

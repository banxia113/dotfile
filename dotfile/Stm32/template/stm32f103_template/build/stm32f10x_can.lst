ARM GAS  /tmp/ccKET9pn.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FWLIB/src/stm32f10x_can.c"
  18              		.section	.text.CheckITStatus,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	CheckITStatus:
  25              	.LVL0:
  26              	.LFB53:
   1:./FWLIB/src/stm32f10x_can.c **** /**
   2:./FWLIB/src/stm32f10x_can.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f10x_can.c ****   * @file    stm32f10x_can.c
   4:./FWLIB/src/stm32f10x_can.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f10x_can.c ****   * @version V3.5.0
   6:./FWLIB/src/stm32f10x_can.c ****   * @date    11-March-2011
   7:./FWLIB/src/stm32f10x_can.c ****   * @brief   This file provides all the CAN firmware functions.
   8:./FWLIB/src/stm32f10x_can.c ****   ******************************************************************************
   9:./FWLIB/src/stm32f10x_can.c ****   * @attention
  10:./FWLIB/src/stm32f10x_can.c ****   *
  11:./FWLIB/src/stm32f10x_can.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:./FWLIB/src/stm32f10x_can.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:./FWLIB/src/stm32f10x_can.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:./FWLIB/src/stm32f10x_can.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:./FWLIB/src/stm32f10x_can.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:./FWLIB/src/stm32f10x_can.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:./FWLIB/src/stm32f10x_can.c ****   *
  18:./FWLIB/src/stm32f10x_can.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:./FWLIB/src/stm32f10x_can.c ****   ******************************************************************************
  20:./FWLIB/src/stm32f10x_can.c ****   */
  21:./FWLIB/src/stm32f10x_can.c **** 
  22:./FWLIB/src/stm32f10x_can.c **** /* Includes ------------------------------------------------------------------*/
  23:./FWLIB/src/stm32f10x_can.c **** #include "stm32f10x_can.h"
  24:./FWLIB/src/stm32f10x_can.c **** #include "stm32f10x_rcc.h"
  25:./FWLIB/src/stm32f10x_can.c **** 
  26:./FWLIB/src/stm32f10x_can.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:./FWLIB/src/stm32f10x_can.c ****   * @{
  28:./FWLIB/src/stm32f10x_can.c ****   */
  29:./FWLIB/src/stm32f10x_can.c **** 
  30:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN 
  31:./FWLIB/src/stm32f10x_can.c ****   * @brief CAN driver modules
  32:./FWLIB/src/stm32f10x_can.c ****   * @{
ARM GAS  /tmp/ccKET9pn.s 			page 2


  33:./FWLIB/src/stm32f10x_can.c ****   */ 
  34:./FWLIB/src/stm32f10x_can.c **** 
  35:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_TypesDefinitions
  36:./FWLIB/src/stm32f10x_can.c ****   * @{
  37:./FWLIB/src/stm32f10x_can.c ****   */
  38:./FWLIB/src/stm32f10x_can.c **** 
  39:./FWLIB/src/stm32f10x_can.c **** /**
  40:./FWLIB/src/stm32f10x_can.c ****   * @}
  41:./FWLIB/src/stm32f10x_can.c ****   */
  42:./FWLIB/src/stm32f10x_can.c **** 
  43:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Defines
  44:./FWLIB/src/stm32f10x_can.c ****   * @{
  45:./FWLIB/src/stm32f10x_can.c ****   */
  46:./FWLIB/src/stm32f10x_can.c **** 
  47:./FWLIB/src/stm32f10x_can.c **** /* CAN Master Control Register bits */
  48:./FWLIB/src/stm32f10x_can.c **** 
  49:./FWLIB/src/stm32f10x_can.c **** #define MCR_DBF      ((uint32_t)0x00010000) /* software master reset */
  50:./FWLIB/src/stm32f10x_can.c **** 
  51:./FWLIB/src/stm32f10x_can.c **** /* CAN Mailbox Transmit Request */
  52:./FWLIB/src/stm32f10x_can.c **** #define TMIDxR_TXRQ  ((uint32_t)0x00000001) /* Transmit mailbox request */
  53:./FWLIB/src/stm32f10x_can.c **** 
  54:./FWLIB/src/stm32f10x_can.c **** /* CAN Filter Master Register bits */
  55:./FWLIB/src/stm32f10x_can.c **** #define FMR_FINIT    ((uint32_t)0x00000001) /* Filter init mode */
  56:./FWLIB/src/stm32f10x_can.c **** 
  57:./FWLIB/src/stm32f10x_can.c **** /* Time out for INAK bit */
  58:./FWLIB/src/stm32f10x_can.c **** #define INAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  59:./FWLIB/src/stm32f10x_can.c **** /* Time out for SLAK bit */
  60:./FWLIB/src/stm32f10x_can.c **** #define SLAK_TIMEOUT        ((uint32_t)0x0000FFFF)
  61:./FWLIB/src/stm32f10x_can.c **** 
  62:./FWLIB/src/stm32f10x_can.c **** 
  63:./FWLIB/src/stm32f10x_can.c **** 
  64:./FWLIB/src/stm32f10x_can.c **** /* Flags in TSR register */
  65:./FWLIB/src/stm32f10x_can.c **** #define CAN_FLAGS_TSR              ((uint32_t)0x08000000) 
  66:./FWLIB/src/stm32f10x_can.c **** /* Flags in RF1R register */
  67:./FWLIB/src/stm32f10x_can.c **** #define CAN_FLAGS_RF1R             ((uint32_t)0x04000000) 
  68:./FWLIB/src/stm32f10x_can.c **** /* Flags in RF0R register */
  69:./FWLIB/src/stm32f10x_can.c **** #define CAN_FLAGS_RF0R             ((uint32_t)0x02000000) 
  70:./FWLIB/src/stm32f10x_can.c **** /* Flags in MSR register */
  71:./FWLIB/src/stm32f10x_can.c **** #define CAN_FLAGS_MSR              ((uint32_t)0x01000000) 
  72:./FWLIB/src/stm32f10x_can.c **** /* Flags in ESR register */
  73:./FWLIB/src/stm32f10x_can.c **** #define CAN_FLAGS_ESR              ((uint32_t)0x00F00000) 
  74:./FWLIB/src/stm32f10x_can.c **** 
  75:./FWLIB/src/stm32f10x_can.c **** /* Mailboxes definition */
  76:./FWLIB/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_0                   ((uint8_t)0x00)
  77:./FWLIB/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_1                   ((uint8_t)0x01)
  78:./FWLIB/src/stm32f10x_can.c **** #define CAN_TXMAILBOX_2                   ((uint8_t)0x02) 
  79:./FWLIB/src/stm32f10x_can.c **** 
  80:./FWLIB/src/stm32f10x_can.c **** 
  81:./FWLIB/src/stm32f10x_can.c **** 
  82:./FWLIB/src/stm32f10x_can.c **** #define CAN_MODE_MASK              ((uint32_t) 0x00000003)
  83:./FWLIB/src/stm32f10x_can.c **** /**
  84:./FWLIB/src/stm32f10x_can.c ****   * @}
  85:./FWLIB/src/stm32f10x_can.c ****   */
  86:./FWLIB/src/stm32f10x_can.c **** 
  87:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Macros
  88:./FWLIB/src/stm32f10x_can.c ****   * @{
  89:./FWLIB/src/stm32f10x_can.c ****   */
ARM GAS  /tmp/ccKET9pn.s 			page 3


  90:./FWLIB/src/stm32f10x_can.c **** 
  91:./FWLIB/src/stm32f10x_can.c **** /**
  92:./FWLIB/src/stm32f10x_can.c ****   * @}
  93:./FWLIB/src/stm32f10x_can.c ****   */
  94:./FWLIB/src/stm32f10x_can.c **** 
  95:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Variables
  96:./FWLIB/src/stm32f10x_can.c ****   * @{
  97:./FWLIB/src/stm32f10x_can.c ****   */
  98:./FWLIB/src/stm32f10x_can.c **** 
  99:./FWLIB/src/stm32f10x_can.c **** /**
 100:./FWLIB/src/stm32f10x_can.c ****   * @}
 101:./FWLIB/src/stm32f10x_can.c ****   */
 102:./FWLIB/src/stm32f10x_can.c **** 
 103:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_FunctionPrototypes
 104:./FWLIB/src/stm32f10x_can.c ****   * @{
 105:./FWLIB/src/stm32f10x_can.c ****   */
 106:./FWLIB/src/stm32f10x_can.c **** 
 107:./FWLIB/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 108:./FWLIB/src/stm32f10x_can.c **** 
 109:./FWLIB/src/stm32f10x_can.c **** /**
 110:./FWLIB/src/stm32f10x_can.c ****   * @}
 111:./FWLIB/src/stm32f10x_can.c ****   */
 112:./FWLIB/src/stm32f10x_can.c **** 
 113:./FWLIB/src/stm32f10x_can.c **** /** @defgroup CAN_Private_Functions
 114:./FWLIB/src/stm32f10x_can.c ****   * @{
 115:./FWLIB/src/stm32f10x_can.c ****   */
 116:./FWLIB/src/stm32f10x_can.c **** 
 117:./FWLIB/src/stm32f10x_can.c **** /**
 118:./FWLIB/src/stm32f10x_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 119:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
 120:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 121:./FWLIB/src/stm32f10x_can.c ****   */
 122:./FWLIB/src/stm32f10x_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 123:./FWLIB/src/stm32f10x_can.c **** {
 124:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 125:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 126:./FWLIB/src/stm32f10x_can.c ****  
 127:./FWLIB/src/stm32f10x_can.c ****   if (CANx == CAN1)
 128:./FWLIB/src/stm32f10x_can.c ****   {
 129:./FWLIB/src/stm32f10x_can.c ****     /* Enable CAN1 reset state */
 130:./FWLIB/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 131:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
 132:./FWLIB/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 133:./FWLIB/src/stm32f10x_can.c ****   }
 134:./FWLIB/src/stm32f10x_can.c ****   else
 135:./FWLIB/src/stm32f10x_can.c ****   {  
 136:./FWLIB/src/stm32f10x_can.c ****     /* Enable CAN2 reset state */
 137:./FWLIB/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 138:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
 139:./FWLIB/src/stm32f10x_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 140:./FWLIB/src/stm32f10x_can.c ****   }
 141:./FWLIB/src/stm32f10x_can.c **** }
 142:./FWLIB/src/stm32f10x_can.c **** 
 143:./FWLIB/src/stm32f10x_can.c **** /**
 144:./FWLIB/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 145:./FWLIB/src/stm32f10x_can.c ****   *         parameters in the CAN_InitStruct.
 146:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:           where x can be 1 or 2 to to select the CAN 
ARM GAS  /tmp/ccKET9pn.s 			page 4


 147:./FWLIB/src/stm32f10x_can.c ****   *                         peripheral.
 148:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that
 149:./FWLIB/src/stm32f10x_can.c ****   *                         contains the configuration information for the 
 150:./FWLIB/src/stm32f10x_can.c ****   *                         CAN peripheral.
 151:./FWLIB/src/stm32f10x_can.c ****   * @retval Constant indicates initialization succeed which will be 
 152:./FWLIB/src/stm32f10x_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 153:./FWLIB/src/stm32f10x_can.c ****   */
 154:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 155:./FWLIB/src/stm32f10x_can.c **** {
 156:./FWLIB/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 157:./FWLIB/src/stm32f10x_can.c ****   uint32_t wait_ack = 0x00000000;
 158:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 159:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 160:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 161:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 162:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 163:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 164:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 165:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 166:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 167:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 168:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 169:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 170:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 171:./FWLIB/src/stm32f10x_can.c **** 
 172:./FWLIB/src/stm32f10x_can.c ****   /* Exit from sleep mode */
 173:./FWLIB/src/stm32f10x_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 174:./FWLIB/src/stm32f10x_can.c **** 
 175:./FWLIB/src/stm32f10x_can.c ****   /* Request initialisation */
 176:./FWLIB/src/stm32f10x_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 177:./FWLIB/src/stm32f10x_can.c **** 
 178:./FWLIB/src/stm32f10x_can.c ****   /* Wait the acknowledge */
 179:./FWLIB/src/stm32f10x_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 180:./FWLIB/src/stm32f10x_can.c ****   {
 181:./FWLIB/src/stm32f10x_can.c ****     wait_ack++;
 182:./FWLIB/src/stm32f10x_can.c ****   }
 183:./FWLIB/src/stm32f10x_can.c **** 
 184:./FWLIB/src/stm32f10x_can.c ****   /* Check acknowledge */
 185:./FWLIB/src/stm32f10x_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 186:./FWLIB/src/stm32f10x_can.c ****   {
 187:./FWLIB/src/stm32f10x_can.c ****     InitStatus = CAN_InitStatus_Failed;
 188:./FWLIB/src/stm32f10x_can.c ****   }
 189:./FWLIB/src/stm32f10x_can.c ****   else 
 190:./FWLIB/src/stm32f10x_can.c ****   {
 191:./FWLIB/src/stm32f10x_can.c ****     /* Set the time triggered communication mode */
 192:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 193:./FWLIB/src/stm32f10x_can.c ****     {
 194:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 195:./FWLIB/src/stm32f10x_can.c ****     }
 196:./FWLIB/src/stm32f10x_can.c ****     else
 197:./FWLIB/src/stm32f10x_can.c ****     {
 198:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 199:./FWLIB/src/stm32f10x_can.c ****     }
 200:./FWLIB/src/stm32f10x_can.c **** 
 201:./FWLIB/src/stm32f10x_can.c ****     /* Set the automatic bus-off management */
 202:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 203:./FWLIB/src/stm32f10x_can.c ****     {
ARM GAS  /tmp/ccKET9pn.s 			page 5


 204:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 205:./FWLIB/src/stm32f10x_can.c ****     }
 206:./FWLIB/src/stm32f10x_can.c ****     else
 207:./FWLIB/src/stm32f10x_can.c ****     {
 208:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 209:./FWLIB/src/stm32f10x_can.c ****     }
 210:./FWLIB/src/stm32f10x_can.c **** 
 211:./FWLIB/src/stm32f10x_can.c ****     /* Set the automatic wake-up mode */
 212:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 213:./FWLIB/src/stm32f10x_can.c ****     {
 214:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 215:./FWLIB/src/stm32f10x_can.c ****     }
 216:./FWLIB/src/stm32f10x_can.c ****     else
 217:./FWLIB/src/stm32f10x_can.c ****     {
 218:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 219:./FWLIB/src/stm32f10x_can.c ****     }
 220:./FWLIB/src/stm32f10x_can.c **** 
 221:./FWLIB/src/stm32f10x_can.c ****     /* Set the no automatic retransmission */
 222:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 223:./FWLIB/src/stm32f10x_can.c ****     {
 224:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_NART;
 225:./FWLIB/src/stm32f10x_can.c ****     }
 226:./FWLIB/src/stm32f10x_can.c ****     else
 227:./FWLIB/src/stm32f10x_can.c ****     {
 228:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 229:./FWLIB/src/stm32f10x_can.c ****     }
 230:./FWLIB/src/stm32f10x_can.c **** 
 231:./FWLIB/src/stm32f10x_can.c ****     /* Set the receive FIFO locked mode */
 232:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 233:./FWLIB/src/stm32f10x_can.c ****     {
 234:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 235:./FWLIB/src/stm32f10x_can.c ****     }
 236:./FWLIB/src/stm32f10x_can.c ****     else
 237:./FWLIB/src/stm32f10x_can.c ****     {
 238:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 239:./FWLIB/src/stm32f10x_can.c ****     }
 240:./FWLIB/src/stm32f10x_can.c **** 
 241:./FWLIB/src/stm32f10x_can.c ****     /* Set the transmit FIFO priority */
 242:./FWLIB/src/stm32f10x_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 243:./FWLIB/src/stm32f10x_can.c ****     {
 244:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 245:./FWLIB/src/stm32f10x_can.c ****     }
 246:./FWLIB/src/stm32f10x_can.c ****     else
 247:./FWLIB/src/stm32f10x_can.c ****     {
 248:./FWLIB/src/stm32f10x_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 249:./FWLIB/src/stm32f10x_can.c ****     }
 250:./FWLIB/src/stm32f10x_can.c **** 
 251:./FWLIB/src/stm32f10x_can.c ****     /* Set the bit timing register */
 252:./FWLIB/src/stm32f10x_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 253:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 254:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 255:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 256:./FWLIB/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 257:./FWLIB/src/stm32f10x_can.c **** 
 258:./FWLIB/src/stm32f10x_can.c ****     /* Request leave initialisation */
 259:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 260:./FWLIB/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccKET9pn.s 			page 6


 261:./FWLIB/src/stm32f10x_can.c ****    /* Wait the acknowledge */
 262:./FWLIB/src/stm32f10x_can.c ****    wait_ack = 0;
 263:./FWLIB/src/stm32f10x_can.c **** 
 264:./FWLIB/src/stm32f10x_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 265:./FWLIB/src/stm32f10x_can.c ****    {
 266:./FWLIB/src/stm32f10x_can.c ****      wait_ack++;
 267:./FWLIB/src/stm32f10x_can.c ****    }
 268:./FWLIB/src/stm32f10x_can.c **** 
 269:./FWLIB/src/stm32f10x_can.c ****     /* ...and check acknowledged */
 270:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 271:./FWLIB/src/stm32f10x_can.c ****     {
 272:./FWLIB/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Failed;
 273:./FWLIB/src/stm32f10x_can.c ****     }
 274:./FWLIB/src/stm32f10x_can.c ****     else
 275:./FWLIB/src/stm32f10x_can.c ****     {
 276:./FWLIB/src/stm32f10x_can.c ****       InitStatus = CAN_InitStatus_Success ;
 277:./FWLIB/src/stm32f10x_can.c ****     }
 278:./FWLIB/src/stm32f10x_can.c ****   }
 279:./FWLIB/src/stm32f10x_can.c **** 
 280:./FWLIB/src/stm32f10x_can.c ****   /* At this step, return the status of initialization */
 281:./FWLIB/src/stm32f10x_can.c ****   return InitStatus;
 282:./FWLIB/src/stm32f10x_can.c **** }
 283:./FWLIB/src/stm32f10x_can.c **** 
 284:./FWLIB/src/stm32f10x_can.c **** /**
 285:./FWLIB/src/stm32f10x_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 286:./FWLIB/src/stm32f10x_can.c ****   *         parameters in the CAN_FilterInitStruct.
 287:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef
 288:./FWLIB/src/stm32f10x_can.c ****   *                               structure that contains the configuration 
 289:./FWLIB/src/stm32f10x_can.c ****   *                               information.
 290:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 291:./FWLIB/src/stm32f10x_can.c ****   */
 292:./FWLIB/src/stm32f10x_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 293:./FWLIB/src/stm32f10x_can.c **** {
 294:./FWLIB/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 295:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 296:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 297:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 298:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 299:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 300:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 301:./FWLIB/src/stm32f10x_can.c **** 
 302:./FWLIB/src/stm32f10x_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 303:./FWLIB/src/stm32f10x_can.c **** 
 304:./FWLIB/src/stm32f10x_can.c ****   /* Initialisation mode for the filter */
 305:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 306:./FWLIB/src/stm32f10x_can.c **** 
 307:./FWLIB/src/stm32f10x_can.c ****   /* Filter Deactivation */
 308:./FWLIB/src/stm32f10x_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 309:./FWLIB/src/stm32f10x_can.c **** 
 310:./FWLIB/src/stm32f10x_can.c ****   /* Filter Scale */
 311:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 312:./FWLIB/src/stm32f10x_can.c ****   {
 313:./FWLIB/src/stm32f10x_can.c ****     /* 16-bit scale for the filter */
 314:./FWLIB/src/stm32f10x_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 315:./FWLIB/src/stm32f10x_can.c **** 
 316:./FWLIB/src/stm32f10x_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 317:./FWLIB/src/stm32f10x_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
ARM GAS  /tmp/ccKET9pn.s 			page 7


 318:./FWLIB/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 319:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 320:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 321:./FWLIB/src/stm32f10x_can.c **** 
 322:./FWLIB/src/stm32f10x_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 323:./FWLIB/src/stm32f10x_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 324:./FWLIB/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 325:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 326:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 327:./FWLIB/src/stm32f10x_can.c ****   }
 328:./FWLIB/src/stm32f10x_can.c **** 
 329:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 330:./FWLIB/src/stm32f10x_can.c ****   {
 331:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit scale for the filter */
 332:./FWLIB/src/stm32f10x_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 333:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 334:./FWLIB/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 335:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 336:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 337:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 338:./FWLIB/src/stm32f10x_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 339:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 340:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 341:./FWLIB/src/stm32f10x_can.c ****   }
 342:./FWLIB/src/stm32f10x_can.c **** 
 343:./FWLIB/src/stm32f10x_can.c ****   /* Filter Mode */
 344:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 345:./FWLIB/src/stm32f10x_can.c ****   {
 346:./FWLIB/src/stm32f10x_can.c ****     /*Id/Mask mode for the filter*/
 347:./FWLIB/src/stm32f10x_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 348:./FWLIB/src/stm32f10x_can.c ****   }
 349:./FWLIB/src/stm32f10x_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 350:./FWLIB/src/stm32f10x_can.c ****   {
 351:./FWLIB/src/stm32f10x_can.c ****     /*Identifier list mode for the filter*/
 352:./FWLIB/src/stm32f10x_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 353:./FWLIB/src/stm32f10x_can.c ****   }
 354:./FWLIB/src/stm32f10x_can.c **** 
 355:./FWLIB/src/stm32f10x_can.c ****   /* Filter FIFO assignment */
 356:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 357:./FWLIB/src/stm32f10x_can.c ****   {
 358:./FWLIB/src/stm32f10x_can.c ****     /* FIFO 0 assignation for the filter */
 359:./FWLIB/src/stm32f10x_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 360:./FWLIB/src/stm32f10x_can.c ****   }
 361:./FWLIB/src/stm32f10x_can.c **** 
 362:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 363:./FWLIB/src/stm32f10x_can.c ****   {
 364:./FWLIB/src/stm32f10x_can.c ****     /* FIFO 1 assignation for the filter */
 365:./FWLIB/src/stm32f10x_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 366:./FWLIB/src/stm32f10x_can.c ****   }
 367:./FWLIB/src/stm32f10x_can.c ****   
 368:./FWLIB/src/stm32f10x_can.c ****   /* Filter activation */
 369:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 370:./FWLIB/src/stm32f10x_can.c ****   {
 371:./FWLIB/src/stm32f10x_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 372:./FWLIB/src/stm32f10x_can.c ****   }
 373:./FWLIB/src/stm32f10x_can.c **** 
 374:./FWLIB/src/stm32f10x_can.c ****   /* Leave the initialisation mode for the filter */
ARM GAS  /tmp/ccKET9pn.s 			page 8


 375:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 376:./FWLIB/src/stm32f10x_can.c **** }
 377:./FWLIB/src/stm32f10x_can.c **** 
 378:./FWLIB/src/stm32f10x_can.c **** /**
 379:./FWLIB/src/stm32f10x_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 380:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which
 381:./FWLIB/src/stm32f10x_can.c ****   *                         will be initialized.
 382:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 383:./FWLIB/src/stm32f10x_can.c ****   */
 384:./FWLIB/src/stm32f10x_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 385:./FWLIB/src/stm32f10x_can.c **** {
 386:./FWLIB/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 387:./FWLIB/src/stm32f10x_can.c ****   
 388:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the time triggered communication mode */
 389:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 390:./FWLIB/src/stm32f10x_can.c ****   
 391:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the automatic bus-off management */
 392:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 393:./FWLIB/src/stm32f10x_can.c ****   
 394:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the automatic wake-up mode */
 395:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 396:./FWLIB/src/stm32f10x_can.c ****   
 397:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the no automatic retransmission */
 398:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 399:./FWLIB/src/stm32f10x_can.c ****   
 400:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the receive FIFO locked mode */
 401:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 402:./FWLIB/src/stm32f10x_can.c ****   
 403:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the transmit FIFO priority */
 404:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 405:./FWLIB/src/stm32f10x_can.c ****   
 406:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the CAN_Mode member */
 407:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 408:./FWLIB/src/stm32f10x_can.c ****   
 409:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the CAN_SJW member */
 410:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 411:./FWLIB/src/stm32f10x_can.c ****   
 412:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the CAN_BS1 member */
 413:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 414:./FWLIB/src/stm32f10x_can.c ****   
 415:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the CAN_BS2 member */
 416:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 417:./FWLIB/src/stm32f10x_can.c ****   
 418:./FWLIB/src/stm32f10x_can.c ****   /* Initialize the CAN_Prescaler member */
 419:./FWLIB/src/stm32f10x_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 420:./FWLIB/src/stm32f10x_can.c **** }
 421:./FWLIB/src/stm32f10x_can.c **** 
 422:./FWLIB/src/stm32f10x_can.c **** /**
 423:./FWLIB/src/stm32f10x_can.c ****   * @brief  Select the start bank filter for slave CAN.
 424:./FWLIB/src/stm32f10x_can.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 425:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 426:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 427:./FWLIB/src/stm32f10x_can.c ****   */
 428:./FWLIB/src/stm32f10x_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 429:./FWLIB/src/stm32f10x_can.c **** {
 430:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 431:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
ARM GAS  /tmp/ccKET9pn.s 			page 9


 432:./FWLIB/src/stm32f10x_can.c ****   
 433:./FWLIB/src/stm32f10x_can.c ****   /* Enter Initialisation mode for the filter */
 434:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= FMR_FINIT;
 435:./FWLIB/src/stm32f10x_can.c ****   
 436:./FWLIB/src/stm32f10x_can.c ****   /* Select the start slave bank */
 437:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 438:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 439:./FWLIB/src/stm32f10x_can.c ****   
 440:./FWLIB/src/stm32f10x_can.c ****   /* Leave Initialisation mode for the filter */
 441:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 442:./FWLIB/src/stm32f10x_can.c **** }
 443:./FWLIB/src/stm32f10x_can.c **** 
 444:./FWLIB/src/stm32f10x_can.c **** /**
 445:./FWLIB/src/stm32f10x_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 446:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
 447:./FWLIB/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN peripheral. This parameter can 
 448:./FWLIB/src/stm32f10x_can.c ****   *                   be: ENABLE or DISABLE.
 449:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 450:./FWLIB/src/stm32f10x_can.c ****   */
 451:./FWLIB/src/stm32f10x_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 452:./FWLIB/src/stm32f10x_can.c **** {
 453:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 454:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 455:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 456:./FWLIB/src/stm32f10x_can.c ****   
 457:./FWLIB/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 458:./FWLIB/src/stm32f10x_can.c ****   {
 459:./FWLIB/src/stm32f10x_can.c ****     /* Enable Debug Freeze  */
 460:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR |= MCR_DBF;
 461:./FWLIB/src/stm32f10x_can.c ****   }
 462:./FWLIB/src/stm32f10x_can.c ****   else
 463:./FWLIB/src/stm32f10x_can.c ****   {
 464:./FWLIB/src/stm32f10x_can.c ****     /* Disable Debug Freeze */
 465:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR &= ~MCR_DBF;
 466:./FWLIB/src/stm32f10x_can.c ****   }
 467:./FWLIB/src/stm32f10x_can.c **** }
 468:./FWLIB/src/stm32f10x_can.c **** 
 469:./FWLIB/src/stm32f10x_can.c **** 
 470:./FWLIB/src/stm32f10x_can.c **** /**
 471:./FWLIB/src/stm32f10x_can.c ****   * @brief  Enables or disabes the CAN Time TriggerOperation communication mode.
 472:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 473:./FWLIB/src/stm32f10x_can.c ****   * @param  NewState : Mode new state , can be one of @ref FunctionalState.
 474:./FWLIB/src/stm32f10x_can.c ****   * @note   when enabled, Time stamp (TIME[15:0]) value is sent in the last 
 475:./FWLIB/src/stm32f10x_can.c ****   *         two data bytes of the 8-byte message: TIME[7:0] in data byte 6 
 476:./FWLIB/src/stm32f10x_can.c ****   *         and TIME[15:8] in data byte 7 
 477:./FWLIB/src/stm32f10x_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 478:./FWLIB/src/stm32f10x_can.c ****   *         sent over the CAN bus.  
 479:./FWLIB/src/stm32f10x_can.c ****   * @retval None
 480:./FWLIB/src/stm32f10x_can.c ****   */
 481:./FWLIB/src/stm32f10x_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 482:./FWLIB/src/stm32f10x_can.c **** {
 483:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 484:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 485:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:./FWLIB/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 487:./FWLIB/src/stm32f10x_can.c ****   {
 488:./FWLIB/src/stm32f10x_can.c ****     /* Enable the TTCM mode */
ARM GAS  /tmp/ccKET9pn.s 			page 10


 489:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 490:./FWLIB/src/stm32f10x_can.c **** 
 491:./FWLIB/src/stm32f10x_can.c ****     /* Set TGT bits */
 492:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 493:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 494:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 495:./FWLIB/src/stm32f10x_can.c ****   }
 496:./FWLIB/src/stm32f10x_can.c ****   else
 497:./FWLIB/src/stm32f10x_can.c ****   {
 498:./FWLIB/src/stm32f10x_can.c ****     /* Disable the TTCM mode */
 499:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 500:./FWLIB/src/stm32f10x_can.c **** 
 501:./FWLIB/src/stm32f10x_can.c ****     /* Reset TGT bits */
 502:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 503:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 504:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 505:./FWLIB/src/stm32f10x_can.c ****   }
 506:./FWLIB/src/stm32f10x_can.c **** }
 507:./FWLIB/src/stm32f10x_can.c **** /**
 508:./FWLIB/src/stm32f10x_can.c ****   * @brief  Initiates the transmission of a message.
 509:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:      where x can be 1 or 2 to to select the CAN peripheral.
 510:./FWLIB/src/stm32f10x_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN
 511:./FWLIB/src/stm32f10x_can.c ****   *                    DLC and CAN data.
 512:./FWLIB/src/stm32f10x_can.c ****   * @retval The number of the mailbox that is used for transmission
 513:./FWLIB/src/stm32f10x_can.c ****   *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
 514:./FWLIB/src/stm32f10x_can.c ****   */
 515:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 516:./FWLIB/src/stm32f10x_can.c **** {
 517:./FWLIB/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 518:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 519:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 520:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 521:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 522:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 523:./FWLIB/src/stm32f10x_can.c **** 
 524:./FWLIB/src/stm32f10x_can.c ****   /* Select one empty transmit mailbox */
 525:./FWLIB/src/stm32f10x_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 526:./FWLIB/src/stm32f10x_can.c ****   {
 527:./FWLIB/src/stm32f10x_can.c ****     transmit_mailbox = 0;
 528:./FWLIB/src/stm32f10x_can.c ****   }
 529:./FWLIB/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 530:./FWLIB/src/stm32f10x_can.c ****   {
 531:./FWLIB/src/stm32f10x_can.c ****     transmit_mailbox = 1;
 532:./FWLIB/src/stm32f10x_can.c ****   }
 533:./FWLIB/src/stm32f10x_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 534:./FWLIB/src/stm32f10x_can.c ****   {
 535:./FWLIB/src/stm32f10x_can.c ****     transmit_mailbox = 2;
 536:./FWLIB/src/stm32f10x_can.c ****   }
 537:./FWLIB/src/stm32f10x_can.c ****   else
 538:./FWLIB/src/stm32f10x_can.c ****   {
 539:./FWLIB/src/stm32f10x_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 540:./FWLIB/src/stm32f10x_can.c ****   }
 541:./FWLIB/src/stm32f10x_can.c **** 
 542:./FWLIB/src/stm32f10x_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 543:./FWLIB/src/stm32f10x_can.c ****   {
 544:./FWLIB/src/stm32f10x_can.c ****     /* Set up the Id */
 545:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
ARM GAS  /tmp/ccKET9pn.s 			page 11


 546:./FWLIB/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 547:./FWLIB/src/stm32f10x_can.c ****     {
 548:./FWLIB/src/stm32f10x_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 549:./FWLIB/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 550:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 551:./FWLIB/src/stm32f10x_can.c ****     }
 552:./FWLIB/src/stm32f10x_can.c ****     else
 553:./FWLIB/src/stm32f10x_can.c ****     {
 554:./FWLIB/src/stm32f10x_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 555:./FWLIB/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 556:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 557:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 558:./FWLIB/src/stm32f10x_can.c ****     }
 559:./FWLIB/src/stm32f10x_can.c ****     
 560:./FWLIB/src/stm32f10x_can.c ****     /* Set up the DLC */
 561:./FWLIB/src/stm32f10x_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 562:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 563:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 564:./FWLIB/src/stm32f10x_can.c **** 
 565:./FWLIB/src/stm32f10x_can.c ****     /* Set up the data field */
 566:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 567:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 568:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 569:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 570:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 571:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 572:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 573:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 574:./FWLIB/src/stm32f10x_can.c ****     /* Request transmission */
 575:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 576:./FWLIB/src/stm32f10x_can.c ****   }
 577:./FWLIB/src/stm32f10x_can.c ****   return transmit_mailbox;
 578:./FWLIB/src/stm32f10x_can.c **** }
 579:./FWLIB/src/stm32f10x_can.c **** 
 580:./FWLIB/src/stm32f10x_can.c **** /**
 581:./FWLIB/src/stm32f10x_can.c ****   * @brief  Checks the transmission of a message.
 582:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:            where x can be 1 or 2 to to select the 
 583:./FWLIB/src/stm32f10x_can.c ****   *                          CAN peripheral.
 584:./FWLIB/src/stm32f10x_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for 
 585:./FWLIB/src/stm32f10x_can.c ****   *                          transmission.
 586:./FWLIB/src/stm32f10x_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
 587:./FWLIB/src/stm32f10x_can.c ****   *         in an other case.
 588:./FWLIB/src/stm32f10x_can.c ****   */
 589:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 590:./FWLIB/src/stm32f10x_can.c **** {
 591:./FWLIB/src/stm32f10x_can.c ****   uint32_t state = 0;
 592:./FWLIB/src/stm32f10x_can.c **** 
 593:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 594:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 595:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 596:./FWLIB/src/stm32f10x_can.c ****  
 597:./FWLIB/src/stm32f10x_can.c ****   switch (TransmitMailbox)
 598:./FWLIB/src/stm32f10x_can.c ****   {
 599:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): 
 600:./FWLIB/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 601:./FWLIB/src/stm32f10x_can.c ****       break;
 602:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
ARM GAS  /tmp/ccKET9pn.s 			page 12


 603:./FWLIB/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 604:./FWLIB/src/stm32f10x_can.c ****       break;
 605:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 606:./FWLIB/src/stm32f10x_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 607:./FWLIB/src/stm32f10x_can.c ****       break;
 608:./FWLIB/src/stm32f10x_can.c ****     default:
 609:./FWLIB/src/stm32f10x_can.c ****       state = CAN_TxStatus_Failed;
 610:./FWLIB/src/stm32f10x_can.c ****       break;
 611:./FWLIB/src/stm32f10x_can.c ****   }
 612:./FWLIB/src/stm32f10x_can.c ****   switch (state)
 613:./FWLIB/src/stm32f10x_can.c ****   {
 614:./FWLIB/src/stm32f10x_can.c ****       /* transmit pending  */
 615:./FWLIB/src/stm32f10x_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 616:./FWLIB/src/stm32f10x_can.c ****       break;
 617:./FWLIB/src/stm32f10x_can.c ****       /* transmit failed  */
 618:./FWLIB/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 619:./FWLIB/src/stm32f10x_can.c ****       break;
 620:./FWLIB/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 621:./FWLIB/src/stm32f10x_can.c ****       break;
 622:./FWLIB/src/stm32f10x_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 623:./FWLIB/src/stm32f10x_can.c ****       break;
 624:./FWLIB/src/stm32f10x_can.c ****       /* transmit succeeded  */
 625:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 626:./FWLIB/src/stm32f10x_can.c ****       break;
 627:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 628:./FWLIB/src/stm32f10x_can.c ****       break;
 629:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 630:./FWLIB/src/stm32f10x_can.c ****       break;
 631:./FWLIB/src/stm32f10x_can.c ****     default: state = CAN_TxStatus_Failed;
 632:./FWLIB/src/stm32f10x_can.c ****       break;
 633:./FWLIB/src/stm32f10x_can.c ****   }
 634:./FWLIB/src/stm32f10x_can.c ****   return (uint8_t) state;
 635:./FWLIB/src/stm32f10x_can.c **** }
 636:./FWLIB/src/stm32f10x_can.c **** 
 637:./FWLIB/src/stm32f10x_can.c **** /**
 638:./FWLIB/src/stm32f10x_can.c ****   * @brief  Cancels a transmit request.
 639:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral. 
 640:./FWLIB/src/stm32f10x_can.c ****   * @param  Mailbox:  Mailbox number.
 641:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 642:./FWLIB/src/stm32f10x_can.c ****   */
 643:./FWLIB/src/stm32f10x_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 644:./FWLIB/src/stm32f10x_can.c **** {
 645:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 646:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 647:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 648:./FWLIB/src/stm32f10x_can.c ****   /* abort transmission */
 649:./FWLIB/src/stm32f10x_can.c ****   switch (Mailbox)
 650:./FWLIB/src/stm32f10x_can.c ****   {
 651:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 652:./FWLIB/src/stm32f10x_can.c ****       break;
 653:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 654:./FWLIB/src/stm32f10x_can.c ****       break;
 655:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 656:./FWLIB/src/stm32f10x_can.c ****       break;
 657:./FWLIB/src/stm32f10x_can.c ****     default:
 658:./FWLIB/src/stm32f10x_can.c ****       break;
 659:./FWLIB/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/ccKET9pn.s 			page 13


 660:./FWLIB/src/stm32f10x_can.c **** }
 661:./FWLIB/src/stm32f10x_can.c **** 
 662:./FWLIB/src/stm32f10x_can.c **** 
 663:./FWLIB/src/stm32f10x_can.c **** /**
 664:./FWLIB/src/stm32f10x_can.c ****   * @brief  Receives a message.
 665:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 666:./FWLIB/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 667:./FWLIB/src/stm32f10x_can.c ****   * @param  RxMessage:  pointer to a structure receive message which contains 
 668:./FWLIB/src/stm32f10x_can.c ****   *                     CAN Id, CAN DLC, CAN datas and FMI number.
 669:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 670:./FWLIB/src/stm32f10x_can.c ****   */
 671:./FWLIB/src/stm32f10x_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 672:./FWLIB/src/stm32f10x_can.c **** {
 673:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 674:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 675:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 676:./FWLIB/src/stm32f10x_can.c ****   /* Get the Id */
 677:./FWLIB/src/stm32f10x_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 678:./FWLIB/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 679:./FWLIB/src/stm32f10x_can.c ****   {
 680:./FWLIB/src/stm32f10x_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 681:./FWLIB/src/stm32f10x_can.c ****   }
 682:./FWLIB/src/stm32f10x_can.c ****   else
 683:./FWLIB/src/stm32f10x_can.c ****   {
 684:./FWLIB/src/stm32f10x_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 685:./FWLIB/src/stm32f10x_can.c ****   }
 686:./FWLIB/src/stm32f10x_can.c ****   
 687:./FWLIB/src/stm32f10x_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 688:./FWLIB/src/stm32f10x_can.c ****   /* Get the DLC */
 689:./FWLIB/src/stm32f10x_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 690:./FWLIB/src/stm32f10x_can.c ****   /* Get the FMI */
 691:./FWLIB/src/stm32f10x_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 692:./FWLIB/src/stm32f10x_can.c ****   /* Get the data field */
 693:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 694:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 695:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 696:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 697:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 698:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 699:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 700:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 701:./FWLIB/src/stm32f10x_can.c ****   /* Release the FIFO */
 702:./FWLIB/src/stm32f10x_can.c ****   /* Release FIFO0 */
 703:./FWLIB/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 704:./FWLIB/src/stm32f10x_can.c ****   {
 705:./FWLIB/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 706:./FWLIB/src/stm32f10x_can.c ****   }
 707:./FWLIB/src/stm32f10x_can.c ****   /* Release FIFO1 */
 708:./FWLIB/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 709:./FWLIB/src/stm32f10x_can.c ****   {
 710:./FWLIB/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 711:./FWLIB/src/stm32f10x_can.c ****   }
 712:./FWLIB/src/stm32f10x_can.c **** }
 713:./FWLIB/src/stm32f10x_can.c **** 
 714:./FWLIB/src/stm32f10x_can.c **** /**
 715:./FWLIB/src/stm32f10x_can.c ****   * @brief  Releases the specified FIFO.
 716:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral. 
ARM GAS  /tmp/ccKET9pn.s 			page 14


 717:./FWLIB/src/stm32f10x_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 718:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
 719:./FWLIB/src/stm32f10x_can.c ****   */
 720:./FWLIB/src/stm32f10x_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 721:./FWLIB/src/stm32f10x_can.c **** {
 722:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 723:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 724:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 725:./FWLIB/src/stm32f10x_can.c ****   /* Release FIFO0 */
 726:./FWLIB/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 727:./FWLIB/src/stm32f10x_can.c ****   {
 728:./FWLIB/src/stm32f10x_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 729:./FWLIB/src/stm32f10x_can.c ****   }
 730:./FWLIB/src/stm32f10x_can.c ****   /* Release FIFO1 */
 731:./FWLIB/src/stm32f10x_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 732:./FWLIB/src/stm32f10x_can.c ****   {
 733:./FWLIB/src/stm32f10x_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 734:./FWLIB/src/stm32f10x_can.c ****   }
 735:./FWLIB/src/stm32f10x_can.c **** }
 736:./FWLIB/src/stm32f10x_can.c **** 
 737:./FWLIB/src/stm32f10x_can.c **** /**
 738:./FWLIB/src/stm32f10x_can.c ****   * @brief  Returns the number of pending messages.
 739:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:       where x can be 1 or 2 to to select the CAN peripheral.
 740:./FWLIB/src/stm32f10x_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 741:./FWLIB/src/stm32f10x_can.c ****   * @retval NbMessage : which is the number of pending message.
 742:./FWLIB/src/stm32f10x_can.c ****   */
 743:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 744:./FWLIB/src/stm32f10x_can.c **** {
 745:./FWLIB/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 746:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 747:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 748:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 749:./FWLIB/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 750:./FWLIB/src/stm32f10x_can.c ****   {
 751:./FWLIB/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 752:./FWLIB/src/stm32f10x_can.c ****   }
 753:./FWLIB/src/stm32f10x_can.c ****   else if (FIFONumber == CAN_FIFO1)
 754:./FWLIB/src/stm32f10x_can.c ****   {
 755:./FWLIB/src/stm32f10x_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 756:./FWLIB/src/stm32f10x_can.c ****   }
 757:./FWLIB/src/stm32f10x_can.c ****   else
 758:./FWLIB/src/stm32f10x_can.c ****   {
 759:./FWLIB/src/stm32f10x_can.c ****     message_pending = 0;
 760:./FWLIB/src/stm32f10x_can.c ****   }
 761:./FWLIB/src/stm32f10x_can.c ****   return message_pending;
 762:./FWLIB/src/stm32f10x_can.c **** }
 763:./FWLIB/src/stm32f10x_can.c **** 
 764:./FWLIB/src/stm32f10x_can.c **** 
 765:./FWLIB/src/stm32f10x_can.c **** /**
 766:./FWLIB/src/stm32f10x_can.c ****   * @brief   Select the CAN Operation mode.
 767:./FWLIB/src/stm32f10x_can.c ****   * @param CAN_OperatingMode : CAN Operating Mode. This parameter can be one 
 768:./FWLIB/src/stm32f10x_can.c ****   *                            of @ref CAN_OperatingMode_TypeDef enumeration.
 769:./FWLIB/src/stm32f10x_can.c ****   * @retval status of the requested mode which can be 
 770:./FWLIB/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Failed    CAN failed entering the specific mode 
 771:./FWLIB/src/stm32f10x_can.c ****   *         - CAN_ModeStatus_Success   CAN Succeed entering the specific mode 
 772:./FWLIB/src/stm32f10x_can.c **** 
 773:./FWLIB/src/stm32f10x_can.c ****   */
ARM GAS  /tmp/ccKET9pn.s 			page 15


 774:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 775:./FWLIB/src/stm32f10x_can.c **** {
 776:./FWLIB/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 777:./FWLIB/src/stm32f10x_can.c ****   
 778:./FWLIB/src/stm32f10x_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 779:./FWLIB/src/stm32f10x_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 780:./FWLIB/src/stm32f10x_can.c **** 
 781:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 782:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 783:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 784:./FWLIB/src/stm32f10x_can.c **** 
 785:./FWLIB/src/stm32f10x_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 786:./FWLIB/src/stm32f10x_can.c ****   {
 787:./FWLIB/src/stm32f10x_can.c ****     /* Request initialisation */
 788:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 789:./FWLIB/src/stm32f10x_can.c **** 
 790:./FWLIB/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 791:./FWLIB/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 792:./FWLIB/src/stm32f10x_can.c ****     {
 793:./FWLIB/src/stm32f10x_can.c ****       timeout--;
 794:./FWLIB/src/stm32f10x_can.c ****     }
 795:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 796:./FWLIB/src/stm32f10x_can.c ****     {
 797:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 798:./FWLIB/src/stm32f10x_can.c ****     }
 799:./FWLIB/src/stm32f10x_can.c ****     else
 800:./FWLIB/src/stm32f10x_can.c ****     {
 801:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 802:./FWLIB/src/stm32f10x_can.c ****     }
 803:./FWLIB/src/stm32f10x_can.c ****   }
 804:./FWLIB/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 805:./FWLIB/src/stm32f10x_can.c ****   {
 806:./FWLIB/src/stm32f10x_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 807:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 808:./FWLIB/src/stm32f10x_can.c **** 
 809:./FWLIB/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 810:./FWLIB/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 811:./FWLIB/src/stm32f10x_can.c ****     {
 812:./FWLIB/src/stm32f10x_can.c ****       timeout--;
 813:./FWLIB/src/stm32f10x_can.c ****     }
 814:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 815:./FWLIB/src/stm32f10x_can.c ****     {
 816:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 817:./FWLIB/src/stm32f10x_can.c ****     }
 818:./FWLIB/src/stm32f10x_can.c ****     else
 819:./FWLIB/src/stm32f10x_can.c ****     {
 820:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 821:./FWLIB/src/stm32f10x_can.c ****     }
 822:./FWLIB/src/stm32f10x_can.c ****   }
 823:./FWLIB/src/stm32f10x_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 824:./FWLIB/src/stm32f10x_can.c ****   {
 825:./FWLIB/src/stm32f10x_can.c ****     /* Request Sleep mode */
 826:./FWLIB/src/stm32f10x_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 827:./FWLIB/src/stm32f10x_can.c **** 
 828:./FWLIB/src/stm32f10x_can.c ****     /* Wait the acknowledge */
 829:./FWLIB/src/stm32f10x_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 830:./FWLIB/src/stm32f10x_can.c ****     {
ARM GAS  /tmp/ccKET9pn.s 			page 16


 831:./FWLIB/src/stm32f10x_can.c ****       timeout--;
 832:./FWLIB/src/stm32f10x_can.c ****     }
 833:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 834:./FWLIB/src/stm32f10x_can.c ****     {
 835:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Failed;
 836:./FWLIB/src/stm32f10x_can.c ****     }
 837:./FWLIB/src/stm32f10x_can.c ****     else
 838:./FWLIB/src/stm32f10x_can.c ****     {
 839:./FWLIB/src/stm32f10x_can.c ****       status = CAN_ModeStatus_Success;
 840:./FWLIB/src/stm32f10x_can.c ****     }
 841:./FWLIB/src/stm32f10x_can.c ****   }
 842:./FWLIB/src/stm32f10x_can.c ****   else
 843:./FWLIB/src/stm32f10x_can.c ****   {
 844:./FWLIB/src/stm32f10x_can.c ****     status = CAN_ModeStatus_Failed;
 845:./FWLIB/src/stm32f10x_can.c ****   }
 846:./FWLIB/src/stm32f10x_can.c **** 
 847:./FWLIB/src/stm32f10x_can.c ****   return  (uint8_t) status;
 848:./FWLIB/src/stm32f10x_can.c **** }
 849:./FWLIB/src/stm32f10x_can.c **** 
 850:./FWLIB/src/stm32f10x_can.c **** /**
 851:./FWLIB/src/stm32f10x_can.c ****   * @brief  Enters the low power mode.
 852:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 853:./FWLIB/src/stm32f10x_can.c ****   * @retval status: CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an 
 854:./FWLIB/src/stm32f10x_can.c ****   *                 other case.
 855:./FWLIB/src/stm32f10x_can.c ****   */
 856:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 857:./FWLIB/src/stm32f10x_can.c **** {
 858:./FWLIB/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 859:./FWLIB/src/stm32f10x_can.c ****   
 860:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 861:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 862:./FWLIB/src/stm32f10x_can.c ****     
 863:./FWLIB/src/stm32f10x_can.c ****   /* Request Sleep mode */
 864:./FWLIB/src/stm32f10x_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 865:./FWLIB/src/stm32f10x_can.c ****    
 866:./FWLIB/src/stm32f10x_can.c ****   /* Sleep mode status */
 867:./FWLIB/src/stm32f10x_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 868:./FWLIB/src/stm32f10x_can.c ****   {
 869:./FWLIB/src/stm32f10x_can.c ****     /* Sleep mode not entered */
 870:./FWLIB/src/stm32f10x_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 871:./FWLIB/src/stm32f10x_can.c ****   }
 872:./FWLIB/src/stm32f10x_can.c ****   /* return sleep mode status */
 873:./FWLIB/src/stm32f10x_can.c ****    return (uint8_t)sleepstatus;
 874:./FWLIB/src/stm32f10x_can.c **** }
 875:./FWLIB/src/stm32f10x_can.c **** 
 876:./FWLIB/src/stm32f10x_can.c **** /**
 877:./FWLIB/src/stm32f10x_can.c ****   * @brief  Wakes the CAN up.
 878:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
 879:./FWLIB/src/stm32f10x_can.c ****   * @retval status:  CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an 
 880:./FWLIB/src/stm32f10x_can.c ****   *                  other case.
 881:./FWLIB/src/stm32f10x_can.c ****   */
 882:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 883:./FWLIB/src/stm32f10x_can.c **** {
 884:./FWLIB/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 885:./FWLIB/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 886:./FWLIB/src/stm32f10x_can.c ****   
 887:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccKET9pn.s 			page 17


 888:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 889:./FWLIB/src/stm32f10x_can.c ****     
 890:./FWLIB/src/stm32f10x_can.c ****   /* Wake up request */
 891:./FWLIB/src/stm32f10x_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 892:./FWLIB/src/stm32f10x_can.c ****     
 893:./FWLIB/src/stm32f10x_can.c ****   /* Sleep mode status */
 894:./FWLIB/src/stm32f10x_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 895:./FWLIB/src/stm32f10x_can.c ****   {
 896:./FWLIB/src/stm32f10x_can.c ****    wait_slak--;
 897:./FWLIB/src/stm32f10x_can.c ****   }
 898:./FWLIB/src/stm32f10x_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 899:./FWLIB/src/stm32f10x_can.c ****   {
 900:./FWLIB/src/stm32f10x_can.c ****    /* wake up done : Sleep mode exited */
 901:./FWLIB/src/stm32f10x_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 902:./FWLIB/src/stm32f10x_can.c ****   }
 903:./FWLIB/src/stm32f10x_can.c ****   /* return wakeup status */
 904:./FWLIB/src/stm32f10x_can.c ****   return (uint8_t)wakeupstatus;
 905:./FWLIB/src/stm32f10x_can.c **** }
 906:./FWLIB/src/stm32f10x_can.c **** 
 907:./FWLIB/src/stm32f10x_can.c **** 
 908:./FWLIB/src/stm32f10x_can.c **** /**
 909:./FWLIB/src/stm32f10x_can.c ****   * @brief  Returns the CANx's last error code (LEC).
 910:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:          where x can be 1 or 2 to to select the CAN peripheral.  
 911:./FWLIB/src/stm32f10x_can.c ****   * @retval CAN_ErrorCode: specifies the Error code : 
 912:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_NoErr            No Error  
 913:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_StuffErr         Stuff Error
 914:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_FormErr          Form Error
 915:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
 916:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
 917:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
 918:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_CRCErr           CRC Error
 919:./FWLIB/src/stm32f10x_can.c ****   *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error  
 920:./FWLIB/src/stm32f10x_can.c ****   */
 921:./FWLIB/src/stm32f10x_can.c ****  
 922:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
 923:./FWLIB/src/stm32f10x_can.c **** {
 924:./FWLIB/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 925:./FWLIB/src/stm32f10x_can.c ****   
 926:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 927:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 928:./FWLIB/src/stm32f10x_can.c ****   
 929:./FWLIB/src/stm32f10x_can.c ****   /* Get the error code*/
 930:./FWLIB/src/stm32f10x_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 931:./FWLIB/src/stm32f10x_can.c ****   
 932:./FWLIB/src/stm32f10x_can.c ****   /* Return the error code*/
 933:./FWLIB/src/stm32f10x_can.c ****   return errorcode;
 934:./FWLIB/src/stm32f10x_can.c **** }
 935:./FWLIB/src/stm32f10x_can.c **** /**
 936:./FWLIB/src/stm32f10x_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
 937:./FWLIB/src/stm32f10x_can.c ****   * @note   In case of an error during reception, this counter is incremented 
 938:./FWLIB/src/stm32f10x_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
 939:./FWLIB/src/stm32f10x_can.c ****   *         standard. After every successful reception, the counter is 
 940:./FWLIB/src/stm32f10x_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
 941:./FWLIB/src/stm32f10x_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
 942:./FWLIB/src/stm32f10x_can.c ****   *         error passive state.  
 943:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
 944:./FWLIB/src/stm32f10x_can.c ****   * @retval CAN Receive Error Counter. 
ARM GAS  /tmp/ccKET9pn.s 			page 18


 945:./FWLIB/src/stm32f10x_can.c ****   */
 946:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
 947:./FWLIB/src/stm32f10x_can.c **** {
 948:./FWLIB/src/stm32f10x_can.c ****   uint8_t counter=0;
 949:./FWLIB/src/stm32f10x_can.c ****   
 950:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 951:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 952:./FWLIB/src/stm32f10x_can.c ****   
 953:./FWLIB/src/stm32f10x_can.c ****   /* Get the Receive Error Counter*/
 954:./FWLIB/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 955:./FWLIB/src/stm32f10x_can.c ****   
 956:./FWLIB/src/stm32f10x_can.c ****   /* Return the Receive Error Counter*/
 957:./FWLIB/src/stm32f10x_can.c ****   return counter;
 958:./FWLIB/src/stm32f10x_can.c **** }
 959:./FWLIB/src/stm32f10x_can.c **** 
 960:./FWLIB/src/stm32f10x_can.c **** 
 961:./FWLIB/src/stm32f10x_can.c **** /**
 962:./FWLIB/src/stm32f10x_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 963:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.  
 964:./FWLIB/src/stm32f10x_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
 965:./FWLIB/src/stm32f10x_can.c ****   */
 966:./FWLIB/src/stm32f10x_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
 967:./FWLIB/src/stm32f10x_can.c **** {
 968:./FWLIB/src/stm32f10x_can.c ****   uint8_t counter=0;
 969:./FWLIB/src/stm32f10x_can.c ****   
 970:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 971:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 972:./FWLIB/src/stm32f10x_can.c ****   
 973:./FWLIB/src/stm32f10x_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 974:./FWLIB/src/stm32f10x_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 975:./FWLIB/src/stm32f10x_can.c ****   
 976:./FWLIB/src/stm32f10x_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
 977:./FWLIB/src/stm32f10x_can.c ****   return counter;
 978:./FWLIB/src/stm32f10x_can.c **** }
 979:./FWLIB/src/stm32f10x_can.c **** 
 980:./FWLIB/src/stm32f10x_can.c **** 
 981:./FWLIB/src/stm32f10x_can.c **** /**
 982:./FWLIB/src/stm32f10x_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
 983:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:   where x can be 1 or 2 to to select the CAN peripheral.
 984:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
 985:./FWLIB/src/stm32f10x_can.c ****   *                 This parameter can be: 
 986:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_TME, 
 987:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP0, 
 988:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FF0,
 989:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV0, 
 990:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FMP1, 
 991:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FF1,
 992:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_FOV1, 
 993:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_EWG, 
 994:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_EPV,
 995:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_LEC, 
 996:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_ERR, 
 997:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_WKU or 
 998:./FWLIB/src/stm32f10x_can.c ****   *                 - CAN_IT_SLK.
 999:./FWLIB/src/stm32f10x_can.c ****   * @param  NewState: new state of the CAN interrupts.
1000:./FWLIB/src/stm32f10x_can.c ****   *                   This parameter can be: ENABLE or DISABLE.
1001:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
ARM GAS  /tmp/ccKET9pn.s 			page 19


1002:./FWLIB/src/stm32f10x_can.c ****   */
1003:./FWLIB/src/stm32f10x_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1004:./FWLIB/src/stm32f10x_can.c **** {
1005:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
1006:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1007:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1008:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1009:./FWLIB/src/stm32f10x_can.c **** 
1010:./FWLIB/src/stm32f10x_can.c ****   if (NewState != DISABLE)
1011:./FWLIB/src/stm32f10x_can.c ****   {
1012:./FWLIB/src/stm32f10x_can.c ****     /* Enable the selected CANx interrupt */
1013:./FWLIB/src/stm32f10x_can.c ****     CANx->IER |= CAN_IT;
1014:./FWLIB/src/stm32f10x_can.c ****   }
1015:./FWLIB/src/stm32f10x_can.c ****   else
1016:./FWLIB/src/stm32f10x_can.c ****   {
1017:./FWLIB/src/stm32f10x_can.c ****     /* Disable the selected CANx interrupt */
1018:./FWLIB/src/stm32f10x_can.c ****     CANx->IER &= ~CAN_IT;
1019:./FWLIB/src/stm32f10x_can.c ****   }
1020:./FWLIB/src/stm32f10x_can.c **** }
1021:./FWLIB/src/stm32f10x_can.c **** /**
1022:./FWLIB/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1023:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1024:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1025:./FWLIB/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1026:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EWG
1027:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_EPV 
1028:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_BOF
1029:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP0
1030:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP1
1031:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_RQCP2
1032:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP1   
1033:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF1       
1034:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV1   
1035:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FMP0   
1036:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FF0       
1037:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_FOV0   
1038:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_WKU 
1039:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_SLAK  
1040:./FWLIB/src/stm32f10x_can.c ****   *                  - CAN_FLAG_LEC       
1041:./FWLIB/src/stm32f10x_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1042:./FWLIB/src/stm32f10x_can.c ****   */
1043:./FWLIB/src/stm32f10x_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1044:./FWLIB/src/stm32f10x_can.c **** {
1045:./FWLIB/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
1046:./FWLIB/src/stm32f10x_can.c ****   
1047:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
1048:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1049:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1050:./FWLIB/src/stm32f10x_can.c ****   
1051:./FWLIB/src/stm32f10x_can.c **** 
1052:./FWLIB/src/stm32f10x_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1053:./FWLIB/src/stm32f10x_can.c ****   { 
1054:./FWLIB/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1055:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1056:./FWLIB/src/stm32f10x_can.c ****     { 
1057:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1058:./FWLIB/src/stm32f10x_can.c ****       bitstatus = SET;
ARM GAS  /tmp/ccKET9pn.s 			page 20


1059:./FWLIB/src/stm32f10x_can.c ****     }
1060:./FWLIB/src/stm32f10x_can.c ****     else
1061:./FWLIB/src/stm32f10x_can.c ****     { 
1062:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1063:./FWLIB/src/stm32f10x_can.c ****       bitstatus = RESET;
1064:./FWLIB/src/stm32f10x_can.c ****     }
1065:./FWLIB/src/stm32f10x_can.c ****   }
1066:./FWLIB/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1067:./FWLIB/src/stm32f10x_can.c ****   { 
1068:./FWLIB/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1069:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1070:./FWLIB/src/stm32f10x_can.c ****     { 
1071:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1072:./FWLIB/src/stm32f10x_can.c ****       bitstatus = SET;
1073:./FWLIB/src/stm32f10x_can.c ****     }
1074:./FWLIB/src/stm32f10x_can.c ****     else
1075:./FWLIB/src/stm32f10x_can.c ****     { 
1076:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1077:./FWLIB/src/stm32f10x_can.c ****       bitstatus = RESET;
1078:./FWLIB/src/stm32f10x_can.c ****     }
1079:./FWLIB/src/stm32f10x_can.c ****   }
1080:./FWLIB/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1081:./FWLIB/src/stm32f10x_can.c ****   { 
1082:./FWLIB/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1083:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1084:./FWLIB/src/stm32f10x_can.c ****     { 
1085:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1086:./FWLIB/src/stm32f10x_can.c ****       bitstatus = SET;
1087:./FWLIB/src/stm32f10x_can.c ****     }
1088:./FWLIB/src/stm32f10x_can.c ****     else
1089:./FWLIB/src/stm32f10x_can.c ****     { 
1090:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1091:./FWLIB/src/stm32f10x_can.c ****       bitstatus = RESET;
1092:./FWLIB/src/stm32f10x_can.c ****     }
1093:./FWLIB/src/stm32f10x_can.c ****   }
1094:./FWLIB/src/stm32f10x_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1095:./FWLIB/src/stm32f10x_can.c ****   { 
1096:./FWLIB/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1097:./FWLIB/src/stm32f10x_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1098:./FWLIB/src/stm32f10x_can.c ****     { 
1099:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1100:./FWLIB/src/stm32f10x_can.c ****       bitstatus = SET;
1101:./FWLIB/src/stm32f10x_can.c ****     }
1102:./FWLIB/src/stm32f10x_can.c ****     else
1103:./FWLIB/src/stm32f10x_can.c ****     { 
1104:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1105:./FWLIB/src/stm32f10x_can.c ****       bitstatus = RESET;
1106:./FWLIB/src/stm32f10x_can.c ****     }
1107:./FWLIB/src/stm32f10x_can.c ****   }
1108:./FWLIB/src/stm32f10x_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1109:./FWLIB/src/stm32f10x_can.c ****   { 
1110:./FWLIB/src/stm32f10x_can.c ****     /* Check the status of the specified CAN flag */
1111:./FWLIB/src/stm32f10x_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1112:./FWLIB/src/stm32f10x_can.c ****     { 
1113:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is set */
1114:./FWLIB/src/stm32f10x_can.c ****       bitstatus = SET;
1115:./FWLIB/src/stm32f10x_can.c ****     }
ARM GAS  /tmp/ccKET9pn.s 			page 21


1116:./FWLIB/src/stm32f10x_can.c ****     else
1117:./FWLIB/src/stm32f10x_can.c ****     { 
1118:./FWLIB/src/stm32f10x_can.c ****       /* CAN_FLAG is reset */
1119:./FWLIB/src/stm32f10x_can.c ****       bitstatus = RESET;
1120:./FWLIB/src/stm32f10x_can.c ****     }
1121:./FWLIB/src/stm32f10x_can.c ****   }
1122:./FWLIB/src/stm32f10x_can.c ****   /* Return the CAN_FLAG status */
1123:./FWLIB/src/stm32f10x_can.c ****   return  bitstatus;
1124:./FWLIB/src/stm32f10x_can.c **** }
1125:./FWLIB/src/stm32f10x_can.c **** 
1126:./FWLIB/src/stm32f10x_can.c **** /**
1127:./FWLIB/src/stm32f10x_can.c ****   * @brief  Clears the CAN's pending flags.
1128:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:     where x can be 1 or 2 to to select the CAN peripheral.
1129:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1130:./FWLIB/src/stm32f10x_can.c ****   *                   This parameter can be one of the following flags: 
1131:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP0
1132:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP1
1133:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_RQCP2
1134:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF1       
1135:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV1   
1136:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FF0       
1137:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_FOV0   
1138:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_WKU   
1139:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_SLAK    
1140:./FWLIB/src/stm32f10x_can.c ****   *                    - CAN_FLAG_LEC       
1141:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
1142:./FWLIB/src/stm32f10x_can.c ****   */
1143:./FWLIB/src/stm32f10x_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1144:./FWLIB/src/stm32f10x_can.c **** {
1145:./FWLIB/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
1146:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
1147:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1148:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1149:./FWLIB/src/stm32f10x_can.c ****   
1150:./FWLIB/src/stm32f10x_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1151:./FWLIB/src/stm32f10x_can.c ****   {
1152:./FWLIB/src/stm32f10x_can.c ****     /* Clear the selected CAN flags */
1153:./FWLIB/src/stm32f10x_can.c ****     CANx->ESR = (uint32_t)RESET;
1154:./FWLIB/src/stm32f10x_can.c ****   }
1155:./FWLIB/src/stm32f10x_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1156:./FWLIB/src/stm32f10x_can.c ****   {
1157:./FWLIB/src/stm32f10x_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1158:./FWLIB/src/stm32f10x_can.c **** 
1159:./FWLIB/src/stm32f10x_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1160:./FWLIB/src/stm32f10x_can.c ****     {
1161:./FWLIB/src/stm32f10x_can.c ****       /* Receive Flags */
1162:./FWLIB/src/stm32f10x_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1163:./FWLIB/src/stm32f10x_can.c ****     }
1164:./FWLIB/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1165:./FWLIB/src/stm32f10x_can.c ****     {
1166:./FWLIB/src/stm32f10x_can.c ****       /* Receive Flags */
1167:./FWLIB/src/stm32f10x_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1168:./FWLIB/src/stm32f10x_can.c ****     }
1169:./FWLIB/src/stm32f10x_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1170:./FWLIB/src/stm32f10x_can.c ****     {
1171:./FWLIB/src/stm32f10x_can.c ****       /* Transmit Flags */
1172:./FWLIB/src/stm32f10x_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
ARM GAS  /tmp/ccKET9pn.s 			page 22


1173:./FWLIB/src/stm32f10x_can.c ****     }
1174:./FWLIB/src/stm32f10x_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1175:./FWLIB/src/stm32f10x_can.c ****     {
1176:./FWLIB/src/stm32f10x_can.c ****       /* Operating mode Flags */
1177:./FWLIB/src/stm32f10x_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1178:./FWLIB/src/stm32f10x_can.c ****     }
1179:./FWLIB/src/stm32f10x_can.c ****   }
1180:./FWLIB/src/stm32f10x_can.c **** }
1181:./FWLIB/src/stm32f10x_can.c **** 
1182:./FWLIB/src/stm32f10x_can.c **** /**
1183:./FWLIB/src/stm32f10x_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1184:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1185:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_IT:  specifies the CAN interrupt source to check.
1186:./FWLIB/src/stm32f10x_can.c ****   *                  This parameter can be one of the following flags: 
1187:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_TME               
1188:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP0              
1189:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF0               
1190:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV0              
1191:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FMP1              
1192:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FF1               
1193:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_FOV1              
1194:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_WKU  
1195:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_SLK  
1196:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_EWG    
1197:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_EPV    
1198:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_BOF    
1199:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_LEC    
1200:./FWLIB/src/stm32f10x_can.c ****   *                 -  CAN_IT_ERR 
1201:./FWLIB/src/stm32f10x_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1202:./FWLIB/src/stm32f10x_can.c ****   */
1203:./FWLIB/src/stm32f10x_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1204:./FWLIB/src/stm32f10x_can.c **** {
1205:./FWLIB/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
1206:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
1207:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1208:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1209:./FWLIB/src/stm32f10x_can.c ****   
1210:./FWLIB/src/stm32f10x_can.c ****   /* check the enable interrupt bit */
1211:./FWLIB/src/stm32f10x_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1212:./FWLIB/src/stm32f10x_can.c ****  {
1213:./FWLIB/src/stm32f10x_can.c ****    /* in case the Interrupt is enabled, .... */
1214:./FWLIB/src/stm32f10x_can.c ****     switch (CAN_IT)
1215:./FWLIB/src/stm32f10x_can.c ****     {
1216:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_TME:
1217:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_TSR_RQCPx bits */
1218:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1219:./FWLIB/src/stm32f10x_can.c **** 	      break;
1220:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
1221:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FMP0 bit */
1222:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1223:./FWLIB/src/stm32f10x_can.c **** 	      break;
1224:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1225:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FULL0 bit */
1226:./FWLIB/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1227:./FWLIB/src/stm32f10x_can.c **** 	      break;
1228:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1229:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF0R_FOVR0 bit */
ARM GAS  /tmp/ccKET9pn.s 			page 23


1230:./FWLIB/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1231:./FWLIB/src/stm32f10x_can.c **** 	      break;
1232:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
1233:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FMP1 bit */
1234:./FWLIB/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1235:./FWLIB/src/stm32f10x_can.c **** 	      break;
1236:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1237:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FULL1 bit */
1238:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1239:./FWLIB/src/stm32f10x_can.c **** 	      break;
1240:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1241:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_RF1R_FOVR1 bit */
1242:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1243:./FWLIB/src/stm32f10x_can.c **** 	      break;
1244:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1245:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_MSR_WKUI bit */
1246:./FWLIB/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1247:./FWLIB/src/stm32f10x_can.c **** 	      break;
1248:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1249:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_MSR_SLAKI bit */
1250:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1251:./FWLIB/src/stm32f10x_can.c **** 	      break;
1252:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1253:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_ESR_EWGF bit */
1254:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1255:./FWLIB/src/stm32f10x_can.c **** 	      break;
1256:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1257:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_ESR_EPVF bit */
1258:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1259:./FWLIB/src/stm32f10x_can.c **** 	      break;
1260:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1261:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_ESR_BOFF bit */
1262:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1263:./FWLIB/src/stm32f10x_can.c **** 	      break;
1264:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1265:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_ESR_LEC bit */
1266:./FWLIB/src/stm32f10x_can.c **** 	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1267:./FWLIB/src/stm32f10x_can.c **** 	      break;
1268:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1269:./FWLIB/src/stm32f10x_can.c ****                /* Check CAN_MSR_ERRI bit */ 
1270:./FWLIB/src/stm32f10x_can.c ****                itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1271:./FWLIB/src/stm32f10x_can.c **** 	      break;
1272:./FWLIB/src/stm32f10x_can.c ****       default :
1273:./FWLIB/src/stm32f10x_can.c ****                /* in case of error, return RESET */
1274:./FWLIB/src/stm32f10x_can.c ****               itstatus = RESET;
1275:./FWLIB/src/stm32f10x_can.c ****               break;
1276:./FWLIB/src/stm32f10x_can.c ****     }
1277:./FWLIB/src/stm32f10x_can.c ****   }
1278:./FWLIB/src/stm32f10x_can.c ****   else
1279:./FWLIB/src/stm32f10x_can.c ****   {
1280:./FWLIB/src/stm32f10x_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1281:./FWLIB/src/stm32f10x_can.c ****     itstatus  = RESET;
1282:./FWLIB/src/stm32f10x_can.c ****   }
1283:./FWLIB/src/stm32f10x_can.c ****   
1284:./FWLIB/src/stm32f10x_can.c ****   /* Return the CAN_IT status */
1285:./FWLIB/src/stm32f10x_can.c ****   return  itstatus;
1286:./FWLIB/src/stm32f10x_can.c **** }
ARM GAS  /tmp/ccKET9pn.s 			page 24


1287:./FWLIB/src/stm32f10x_can.c **** 
1288:./FWLIB/src/stm32f10x_can.c **** /**
1289:./FWLIB/src/stm32f10x_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1290:./FWLIB/src/stm32f10x_can.c ****   * @param  CANx:    where x can be 1 or 2 to to select the CAN peripheral.
1291:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1292:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_TME                     
1293:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF0               
1294:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV0                     
1295:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_FF1               
1296:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_FOV1              
1297:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_WKU  
1298:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_SLK  
1299:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_EWG    
1300:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_EPV    
1301:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_BOF    
1302:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_LEC    
1303:./FWLIB/src/stm32f10x_can.c ****   *                  -  CAN_IT_ERR 
1304:./FWLIB/src/stm32f10x_can.c ****   * @retval None.
1305:./FWLIB/src/stm32f10x_can.c ****   */
1306:./FWLIB/src/stm32f10x_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1307:./FWLIB/src/stm32f10x_can.c **** {
1308:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
1309:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1310:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1311:./FWLIB/src/stm32f10x_can.c **** 
1312:./FWLIB/src/stm32f10x_can.c ****   switch (CAN_IT)
1313:./FWLIB/src/stm32f10x_can.c ****   {
1314:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_TME:
1315:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_TSR_RQCPx (rc_w1)*/
1316:./FWLIB/src/stm32f10x_can.c **** 	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1317:./FWLIB/src/stm32f10x_can.c **** 	      break;
1318:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF0:
1319:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1320:./FWLIB/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FULL0; 
1321:./FWLIB/src/stm32f10x_can.c **** 	      break;
1322:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
1323:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1324:./FWLIB/src/stm32f10x_can.c **** 	      CANx->RF0R = CAN_RF0R_FOVR0; 
1325:./FWLIB/src/stm32f10x_can.c **** 	      break;
1326:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF1:
1327:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1328:./FWLIB/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FULL1;  
1329:./FWLIB/src/stm32f10x_can.c **** 	      break;
1330:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
1331:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1332:./FWLIB/src/stm32f10x_can.c **** 	      CANx->RF1R = CAN_RF1R_FOVR1; 
1333:./FWLIB/src/stm32f10x_can.c **** 	      break;
1334:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_WKU:
1335:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_WKUI (rc_w1)*/
1336:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_WKUI;  
1337:./FWLIB/src/stm32f10x_can.c **** 	      break;
1338:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_SLK:
1339:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1340:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_SLAKI;   
1341:./FWLIB/src/stm32f10x_can.c **** 	      break;
1342:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EWG:
1343:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  /tmp/ccKET9pn.s 			page 25


1344:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI;
1345:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1346:./FWLIB/src/stm32f10x_can.c ****                         of the CAN Bus status*/ 
1347:./FWLIB/src/stm32f10x_can.c **** 	      break;
1348:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EPV:
1349:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1350:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1351:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1352:./FWLIB/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1353:./FWLIB/src/stm32f10x_can.c **** 	      break;
1354:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_BOF:
1355:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */ 
1356:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1357:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
1358:./FWLIB/src/stm32f10x_can.c ****                         of the CAN Bus status*/
1359:./FWLIB/src/stm32f10x_can.c **** 	      break;
1360:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_LEC:
1361:./FWLIB/src/stm32f10x_can.c ****               /*  Clear LEC bits */
1362:./FWLIB/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1363:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1364:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1365:./FWLIB/src/stm32f10x_can.c **** 	      break;
1366:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
1367:./FWLIB/src/stm32f10x_can.c ****               /*Clear LEC bits */
1368:./FWLIB/src/stm32f10x_can.c **** 	      CANx->ESR = RESET; 
1369:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
1370:./FWLIB/src/stm32f10x_can.c **** 	      CANx->MSR = CAN_MSR_ERRI; 
1371:./FWLIB/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
1372:./FWLIB/src/stm32f10x_can.c ****                   of the CAN Bus status*/
1373:./FWLIB/src/stm32f10x_can.c **** 	      break;
1374:./FWLIB/src/stm32f10x_can.c ****       default :
1375:./FWLIB/src/stm32f10x_can.c **** 	      break;
1376:./FWLIB/src/stm32f10x_can.c ****    }
1377:./FWLIB/src/stm32f10x_can.c **** }
1378:./FWLIB/src/stm32f10x_can.c **** 
1379:./FWLIB/src/stm32f10x_can.c **** /**
1380:./FWLIB/src/stm32f10x_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1381:./FWLIB/src/stm32f10x_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1382:./FWLIB/src/stm32f10x_can.c ****   * @param  It_Bit:  specifies the interrupt source bit to check.
1383:./FWLIB/src/stm32f10x_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1384:./FWLIB/src/stm32f10x_can.c ****   */
1385:./FWLIB/src/stm32f10x_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1386:./FWLIB/src/stm32f10x_can.c **** {
  27              		.loc 1 1386 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1387:./FWLIB/src/stm32f10x_can.c ****   ITStatus pendingbitstatus = RESET;
  32              		.loc 1 1387 3 view .LVU1
1388:./FWLIB/src/stm32f10x_can.c ****   
1389:./FWLIB/src/stm32f10x_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  33              		.loc 1 1389 3 view .LVU2
  34              		.loc 1 1389 6 is_stmt 0 view .LVU3
  35 0000 0842     		tst	r0, r1
  36 0002 01D0     		beq	.L3
1390:./FWLIB/src/stm32f10x_can.c ****   {
ARM GAS  /tmp/ccKET9pn.s 			page 26


1391:./FWLIB/src/stm32f10x_can.c ****     /* CAN_IT is set */
1392:./FWLIB/src/stm32f10x_can.c ****     pendingbitstatus = SET;
  37              		.loc 1 1392 22 view .LVU4
  38 0004 0120     		movs	r0, #1
  39              	.LVL1:
  40              		.loc 1 1392 22 view .LVU5
  41 0006 7047     		bx	lr
  42              	.LVL2:
  43              	.L3:
1393:./FWLIB/src/stm32f10x_can.c ****   }
1394:./FWLIB/src/stm32f10x_can.c ****   else
1395:./FWLIB/src/stm32f10x_can.c ****   {
1396:./FWLIB/src/stm32f10x_can.c ****     /* CAN_IT is reset */
1397:./FWLIB/src/stm32f10x_can.c ****     pendingbitstatus = RESET;
  44              		.loc 1 1397 22 view .LVU6
  45 0008 0020     		movs	r0, #0
  46              	.LVL3:
1398:./FWLIB/src/stm32f10x_can.c ****   }
1399:./FWLIB/src/stm32f10x_can.c ****   return pendingbitstatus;
  47              		.loc 1 1399 3 is_stmt 1 view .LVU7
1400:./FWLIB/src/stm32f10x_can.c **** }
  48              		.loc 1 1400 1 is_stmt 0 view .LVU8
  49 000a 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE53:
  53              		.section	.text.CAN_DeInit,"ax",%progbits
  54              		.align	1
  55              		.global	CAN_DeInit
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	CAN_DeInit:
  61              	.LVL4:
  62              	.LFB29:
 123:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
  63              		.loc 1 123 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
 123:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
  67              		.loc 1 123 1 is_stmt 0 view .LVU10
  68 0000 08B5     		push	{r3, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 3, -8
  72              		.cfi_offset 14, -4
 125:./FWLIB/src/stm32f10x_can.c ****  
  73              		.loc 1 125 3 is_stmt 1 view .LVU11
 127:./FWLIB/src/stm32f10x_can.c ****   {
  74              		.loc 1 127 3 view .LVU12
 127:./FWLIB/src/stm32f10x_can.c ****   {
  75              		.loc 1 127 6 is_stmt 0 view .LVU13
  76 0002 0C4B     		ldr	r3, .L9
  77 0004 9842     		cmp	r0, r3
  78 0006 0AD0     		beq	.L8
 137:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
  79              		.loc 1 137 5 is_stmt 1 view .LVU14
ARM GAS  /tmp/ccKET9pn.s 			page 27


  80 0008 0121     		movs	r1, #1
  81 000a 4FF08060 		mov	r0, #67108864
  82              	.LVL5:
 137:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN2 from reset state */
  83              		.loc 1 137 5 is_stmt 0 view .LVU15
  84 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  85              	.LVL6:
 139:./FWLIB/src/stm32f10x_can.c ****   }
  86              		.loc 1 139 5 is_stmt 1 view .LVU16
  87 0012 0021     		movs	r1, #0
  88 0014 4FF08060 		mov	r0, #67108864
  89 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              	.LVL7:
  91              	.L4:
 141:./FWLIB/src/stm32f10x_can.c **** 
  92              		.loc 1 141 1 is_stmt 0 view .LVU17
  93 001c 08BD     		pop	{r3, pc}
  94              	.LVL8:
  95              	.L8:
 130:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
  96              		.loc 1 130 5 is_stmt 1 view .LVU18
  97 001e 0121     		movs	r1, #1
  98 0020 4FF00070 		mov	r0, #33554432
  99              	.LVL9:
 130:./FWLIB/src/stm32f10x_can.c ****     /* Release CAN1 from reset state */
 100              		.loc 1 130 5 is_stmt 0 view .LVU19
 101 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 102              	.LVL10:
 132:./FWLIB/src/stm32f10x_can.c ****   }
 103              		.loc 1 132 5 is_stmt 1 view .LVU20
 104 0028 0021     		movs	r1, #0
 105 002a 4FF00070 		mov	r0, #33554432
 106 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 107              	.LVL11:
 108 0032 F3E7     		b	.L4
 109              	.L10:
 110              		.align	2
 111              	.L9:
 112 0034 00640040 		.word	1073767424
 113              		.cfi_endproc
 114              	.LFE29:
 116              		.section	.text.CAN_Init,"ax",%progbits
 117              		.align	1
 118              		.global	CAN_Init
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 123              	CAN_Init:
 124              	.LVL12:
 125              	.LFB30:
 155:./FWLIB/src/stm32f10x_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 126              		.loc 1 155 1 view -0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 156:./FWLIB/src/stm32f10x_can.c ****   uint32_t wait_ack = 0x00000000;
ARM GAS  /tmp/ccKET9pn.s 			page 28


 131              		.loc 1 156 3 view .LVU22
 157:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 132              		.loc 1 157 3 view .LVU23
 159:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 133              		.loc 1 159 3 view .LVU24
 160:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 134              		.loc 1 160 3 view .LVU25
 161:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 135              		.loc 1 161 3 view .LVU26
 162:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 136              		.loc 1 162 3 view .LVU27
 163:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 137              		.loc 1 163 3 view .LVU28
 164:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 138              		.loc 1 164 3 view .LVU29
 165:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 139              		.loc 1 165 3 view .LVU30
 166:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 140              		.loc 1 166 3 view .LVU31
 167:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 141              		.loc 1 167 3 view .LVU32
 168:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 142              		.loc 1 168 3 view .LVU33
 169:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 143              		.loc 1 169 3 view .LVU34
 170:./FWLIB/src/stm32f10x_can.c **** 
 144              		.loc 1 170 3 view .LVU35
 173:./FWLIB/src/stm32f10x_can.c **** 
 145              		.loc 1 173 3 view .LVU36
 173:./FWLIB/src/stm32f10x_can.c **** 
 146              		.loc 1 173 7 is_stmt 0 view .LVU37
 147 0000 0368     		ldr	r3, [r0]
 173:./FWLIB/src/stm32f10x_can.c **** 
 148              		.loc 1 173 13 view .LVU38
 149 0002 23F00203 		bic	r3, r3, #2
 150 0006 0360     		str	r3, [r0]
 176:./FWLIB/src/stm32f10x_can.c **** 
 151              		.loc 1 176 3 is_stmt 1 view .LVU39
 176:./FWLIB/src/stm32f10x_can.c **** 
 152              		.loc 1 176 7 is_stmt 0 view .LVU40
 153 0008 0368     		ldr	r3, [r0]
 176:./FWLIB/src/stm32f10x_can.c **** 
 154              		.loc 1 176 13 view .LVU41
 155 000a 43F00103 		orr	r3, r3, #1
 156 000e 0360     		str	r3, [r0]
 179:./FWLIB/src/stm32f10x_can.c ****   {
 157              		.loc 1 179 3 is_stmt 1 view .LVU42
 157:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 158              		.loc 1 157 12 is_stmt 0 view .LVU43
 159 0010 0023     		movs	r3, #0
 160              	.LVL13:
 161              	.L12:
 179:./FWLIB/src/stm32f10x_can.c ****   {
 162              		.loc 1 179 55 is_stmt 1 view .LVU44
 179:./FWLIB/src/stm32f10x_can.c ****   {
 163              		.loc 1 179 16 is_stmt 0 view .LVU45
 164 0012 4268     		ldr	r2, [r0, #4]
ARM GAS  /tmp/ccKET9pn.s 			page 29


 179:./FWLIB/src/stm32f10x_can.c ****   {
 165              		.loc 1 179 55 view .LVU46
 166 0014 12F0010F 		tst	r2, #1
 167 0018 05D1     		bne	.L13
 179:./FWLIB/src/stm32f10x_can.c ****   {
 168              		.loc 1 179 55 discriminator 1 view .LVU47
 169 001a 4FF6FF72 		movw	r2, #65535
 170 001e 9342     		cmp	r3, r2
 171 0020 01D0     		beq	.L13
 181:./FWLIB/src/stm32f10x_can.c ****   }
 172              		.loc 1 181 5 is_stmt 1 view .LVU48
 181:./FWLIB/src/stm32f10x_can.c ****   }
 173              		.loc 1 181 13 is_stmt 0 view .LVU49
 174 0022 0133     		adds	r3, r3, #1
 175              	.LVL14:
 181:./FWLIB/src/stm32f10x_can.c ****   }
 176              		.loc 1 181 13 view .LVU50
 177 0024 F5E7     		b	.L12
 178              	.LVL15:
 179              	.L13:
 185:./FWLIB/src/stm32f10x_can.c ****   {
 180              		.loc 1 185 3 is_stmt 1 view .LVU51
 185:./FWLIB/src/stm32f10x_can.c ****   {
 181              		.loc 1 185 12 is_stmt 0 view .LVU52
 182 0026 4368     		ldr	r3, [r0, #4]
 183              	.LVL16:
 185:./FWLIB/src/stm32f10x_can.c ****   {
 184              		.loc 1 185 6 view .LVU53
 185 0028 13F0010F 		tst	r3, #1
 186 002c 6BD0     		beq	.L31
 192:./FWLIB/src/stm32f10x_can.c ****     {
 187              		.loc 1 192 5 is_stmt 1 view .LVU54
 192:./FWLIB/src/stm32f10x_can.c ****     {
 188              		.loc 1 192 23 is_stmt 0 view .LVU55
 189 002e 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 192:./FWLIB/src/stm32f10x_can.c ****     {
 190              		.loc 1 192 8 view .LVU56
 191 0030 012B     		cmp	r3, #1
 192 0032 3BD0     		beq	.L33
 198:./FWLIB/src/stm32f10x_can.c ****     }
 193              		.loc 1 198 7 is_stmt 1 view .LVU57
 198:./FWLIB/src/stm32f10x_can.c ****     }
 194              		.loc 1 198 11 is_stmt 0 view .LVU58
 195 0034 0368     		ldr	r3, [r0]
 198:./FWLIB/src/stm32f10x_can.c ****     }
 196              		.loc 1 198 17 view .LVU59
 197 0036 23F08003 		bic	r3, r3, #128
 198 003a 0360     		str	r3, [r0]
 199              	.L17:
 202:./FWLIB/src/stm32f10x_can.c ****     {
 200              		.loc 1 202 5 is_stmt 1 view .LVU60
 202:./FWLIB/src/stm32f10x_can.c ****     {
 201              		.loc 1 202 23 is_stmt 0 view .LVU61
 202 003c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 202:./FWLIB/src/stm32f10x_can.c ****     {
 203              		.loc 1 202 8 view .LVU62
 204 003e 012B     		cmp	r3, #1
ARM GAS  /tmp/ccKET9pn.s 			page 30


 205 0040 39D0     		beq	.L34
 208:./FWLIB/src/stm32f10x_can.c ****     }
 206              		.loc 1 208 7 is_stmt 1 view .LVU63
 208:./FWLIB/src/stm32f10x_can.c ****     }
 207              		.loc 1 208 11 is_stmt 0 view .LVU64
 208 0042 0368     		ldr	r3, [r0]
 208:./FWLIB/src/stm32f10x_can.c ****     }
 209              		.loc 1 208 17 view .LVU65
 210 0044 23F04003 		bic	r3, r3, #64
 211 0048 0360     		str	r3, [r0]
 212              	.L19:
 212:./FWLIB/src/stm32f10x_can.c ****     {
 213              		.loc 1 212 5 is_stmt 1 view .LVU66
 212:./FWLIB/src/stm32f10x_can.c ****     {
 214              		.loc 1 212 23 is_stmt 0 view .LVU67
 215 004a 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 212:./FWLIB/src/stm32f10x_can.c ****     {
 216              		.loc 1 212 8 view .LVU68
 217 004c 012B     		cmp	r3, #1
 218 004e 37D0     		beq	.L35
 218:./FWLIB/src/stm32f10x_can.c ****     }
 219              		.loc 1 218 7 is_stmt 1 view .LVU69
 218:./FWLIB/src/stm32f10x_can.c ****     }
 220              		.loc 1 218 11 is_stmt 0 view .LVU70
 221 0050 0368     		ldr	r3, [r0]
 218:./FWLIB/src/stm32f10x_can.c ****     }
 222              		.loc 1 218 17 view .LVU71
 223 0052 23F02003 		bic	r3, r3, #32
 224 0056 0360     		str	r3, [r0]
 225              	.L21:
 222:./FWLIB/src/stm32f10x_can.c ****     {
 226              		.loc 1 222 5 is_stmt 1 view .LVU72
 222:./FWLIB/src/stm32f10x_can.c ****     {
 227              		.loc 1 222 23 is_stmt 0 view .LVU73
 228 0058 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 222:./FWLIB/src/stm32f10x_can.c ****     {
 229              		.loc 1 222 8 view .LVU74
 230 005a 012B     		cmp	r3, #1
 231 005c 35D0     		beq	.L36
 228:./FWLIB/src/stm32f10x_can.c ****     }
 232              		.loc 1 228 7 is_stmt 1 view .LVU75
 228:./FWLIB/src/stm32f10x_can.c ****     }
 233              		.loc 1 228 11 is_stmt 0 view .LVU76
 234 005e 0368     		ldr	r3, [r0]
 228:./FWLIB/src/stm32f10x_can.c ****     }
 235              		.loc 1 228 17 view .LVU77
 236 0060 23F01003 		bic	r3, r3, #16
 237 0064 0360     		str	r3, [r0]
 238              	.L23:
 232:./FWLIB/src/stm32f10x_can.c ****     {
 239              		.loc 1 232 5 is_stmt 1 view .LVU78
 232:./FWLIB/src/stm32f10x_can.c ****     {
 240              		.loc 1 232 23 is_stmt 0 view .LVU79
 241 0066 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 232:./FWLIB/src/stm32f10x_can.c ****     {
 242              		.loc 1 232 8 view .LVU80
 243 0068 012B     		cmp	r3, #1
ARM GAS  /tmp/ccKET9pn.s 			page 31


 244 006a 33D0     		beq	.L37
 238:./FWLIB/src/stm32f10x_can.c ****     }
 245              		.loc 1 238 7 is_stmt 1 view .LVU81
 238:./FWLIB/src/stm32f10x_can.c ****     }
 246              		.loc 1 238 11 is_stmt 0 view .LVU82
 247 006c 0368     		ldr	r3, [r0]
 238:./FWLIB/src/stm32f10x_can.c ****     }
 248              		.loc 1 238 17 view .LVU83
 249 006e 23F00803 		bic	r3, r3, #8
 250 0072 0360     		str	r3, [r0]
 251              	.L25:
 242:./FWLIB/src/stm32f10x_can.c ****     {
 252              		.loc 1 242 5 is_stmt 1 view .LVU84
 242:./FWLIB/src/stm32f10x_can.c ****     {
 253              		.loc 1 242 23 is_stmt 0 view .LVU85
 254 0074 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 242:./FWLIB/src/stm32f10x_can.c ****     {
 255              		.loc 1 242 8 view .LVU86
 256 0076 012B     		cmp	r3, #1
 257 0078 31D0     		beq	.L38
 248:./FWLIB/src/stm32f10x_can.c ****     }
 258              		.loc 1 248 7 is_stmt 1 view .LVU87
 248:./FWLIB/src/stm32f10x_can.c ****     }
 259              		.loc 1 248 11 is_stmt 0 view .LVU88
 260 007a 0368     		ldr	r3, [r0]
 248:./FWLIB/src/stm32f10x_can.c ****     }
 261              		.loc 1 248 17 view .LVU89
 262 007c 23F00403 		bic	r3, r3, #4
 263 0080 0360     		str	r3, [r0]
 264              	.L27:
 252:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 265              		.loc 1 252 5 is_stmt 1 view .LVU90
 252:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 266              		.loc 1 252 52 is_stmt 0 view .LVU91
 267 0082 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 253:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 268              		.loc 1 253 42 view .LVU92
 269 0084 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 253:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 270              		.loc 1 253 52 view .LVU93
 271 0086 1B06     		lsls	r3, r3, #24
 252:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 272              		.loc 1 252 70 view .LVU94
 273 0088 43EA8273 		orr	r3, r3, r2, lsl #30
 254:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 274              		.loc 1 254 42 view .LVU95
 275 008c 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 253:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 276              		.loc 1 253 59 view .LVU96
 277 008e 43EA0243 		orr	r3, r3, r2, lsl #16
 255:./FWLIB/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 278              		.loc 1 255 42 view .LVU97
 279 0092 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 254:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 280              		.loc 1 254 59 view .LVU98
 281 0094 43EA0253 		orr	r3, r3, r2, lsl #20
 256:./FWLIB/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccKET9pn.s 			page 32


 282              		.loc 1 256 41 view .LVU99
 283 0098 0A88     		ldrh	r2, [r1]
 256:./FWLIB/src/stm32f10x_can.c **** 
 284              		.loc 1 256 57 view .LVU100
 285 009a 013A     		subs	r2, r2, #1
 255:./FWLIB/src/stm32f10x_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 286              		.loc 1 255 59 view .LVU101
 287 009c 1343     		orrs	r3, r3, r2
 252:./FWLIB/src/stm32f10x_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 288              		.loc 1 252 15 view .LVU102
 289 009e C361     		str	r3, [r0, #28]
 259:./FWLIB/src/stm32f10x_can.c **** 
 290              		.loc 1 259 5 is_stmt 1 view .LVU103
 259:./FWLIB/src/stm32f10x_can.c **** 
 291              		.loc 1 259 9 is_stmt 0 view .LVU104
 292 00a0 0368     		ldr	r3, [r0]
 259:./FWLIB/src/stm32f10x_can.c **** 
 293              		.loc 1 259 15 view .LVU105
 294 00a2 23F00103 		bic	r3, r3, #1
 295 00a6 0360     		str	r3, [r0]
 262:./FWLIB/src/stm32f10x_can.c **** 
 296              		.loc 1 262 4 is_stmt 1 view .LVU106
 297              	.LVL17:
 264:./FWLIB/src/stm32f10x_can.c ****    {
 298              		.loc 1 264 4 view .LVU107
 262:./FWLIB/src/stm32f10x_can.c **** 
 299              		.loc 1 262 13 is_stmt 0 view .LVU108
 300 00a8 0023     		movs	r3, #0
 264:./FWLIB/src/stm32f10x_can.c ****    {
 301              		.loc 1 264 10 view .LVU109
 302 00aa 1EE0     		b	.L28
 303              	.LVL18:
 304              	.L33:
 194:./FWLIB/src/stm32f10x_can.c ****     }
 305              		.loc 1 194 7 is_stmt 1 view .LVU110
 194:./FWLIB/src/stm32f10x_can.c ****     }
 306              		.loc 1 194 11 is_stmt 0 view .LVU111
 307 00ac 0368     		ldr	r3, [r0]
 194:./FWLIB/src/stm32f10x_can.c ****     }
 308              		.loc 1 194 17 view .LVU112
 309 00ae 43F08003 		orr	r3, r3, #128
 310 00b2 0360     		str	r3, [r0]
 311 00b4 C2E7     		b	.L17
 312              	.L34:
 204:./FWLIB/src/stm32f10x_can.c ****     }
 313              		.loc 1 204 7 is_stmt 1 view .LVU113
 204:./FWLIB/src/stm32f10x_can.c ****     }
 314              		.loc 1 204 11 is_stmt 0 view .LVU114
 315 00b6 0368     		ldr	r3, [r0]
 204:./FWLIB/src/stm32f10x_can.c ****     }
 316              		.loc 1 204 17 view .LVU115
 317 00b8 43F04003 		orr	r3, r3, #64
 318 00bc 0360     		str	r3, [r0]
 319 00be C4E7     		b	.L19
 320              	.L35:
 214:./FWLIB/src/stm32f10x_can.c ****     }
 321              		.loc 1 214 7 is_stmt 1 view .LVU116
ARM GAS  /tmp/ccKET9pn.s 			page 33


 214:./FWLIB/src/stm32f10x_can.c ****     }
 322              		.loc 1 214 11 is_stmt 0 view .LVU117
 323 00c0 0368     		ldr	r3, [r0]
 214:./FWLIB/src/stm32f10x_can.c ****     }
 324              		.loc 1 214 17 view .LVU118
 325 00c2 43F02003 		orr	r3, r3, #32
 326 00c6 0360     		str	r3, [r0]
 327 00c8 C6E7     		b	.L21
 328              	.L36:
 224:./FWLIB/src/stm32f10x_can.c ****     }
 329              		.loc 1 224 7 is_stmt 1 view .LVU119
 224:./FWLIB/src/stm32f10x_can.c ****     }
 330              		.loc 1 224 11 is_stmt 0 view .LVU120
 331 00ca 0368     		ldr	r3, [r0]
 224:./FWLIB/src/stm32f10x_can.c ****     }
 332              		.loc 1 224 17 view .LVU121
 333 00cc 43F01003 		orr	r3, r3, #16
 334 00d0 0360     		str	r3, [r0]
 335 00d2 C8E7     		b	.L23
 336              	.L37:
 234:./FWLIB/src/stm32f10x_can.c ****     }
 337              		.loc 1 234 7 is_stmt 1 view .LVU122
 234:./FWLIB/src/stm32f10x_can.c ****     }
 338              		.loc 1 234 11 is_stmt 0 view .LVU123
 339 00d4 0368     		ldr	r3, [r0]
 234:./FWLIB/src/stm32f10x_can.c ****     }
 340              		.loc 1 234 17 view .LVU124
 341 00d6 43F00803 		orr	r3, r3, #8
 342 00da 0360     		str	r3, [r0]
 343 00dc CAE7     		b	.L25
 344              	.L38:
 244:./FWLIB/src/stm32f10x_can.c ****     }
 345              		.loc 1 244 7 is_stmt 1 view .LVU125
 244:./FWLIB/src/stm32f10x_can.c ****     }
 346              		.loc 1 244 11 is_stmt 0 view .LVU126
 347 00de 0368     		ldr	r3, [r0]
 244:./FWLIB/src/stm32f10x_can.c ****     }
 348              		.loc 1 244 17 view .LVU127
 349 00e0 43F00403 		orr	r3, r3, #4
 350 00e4 0360     		str	r3, [r0]
 351 00e6 CCE7     		b	.L27
 352              	.LVL19:
 353              	.L30:
 266:./FWLIB/src/stm32f10x_can.c ****    }
 354              		.loc 1 266 6 is_stmt 1 view .LVU128
 266:./FWLIB/src/stm32f10x_can.c ****    }
 355              		.loc 1 266 14 is_stmt 0 view .LVU129
 356 00e8 0133     		adds	r3, r3, #1
 357              	.LVL20:
 358              	.L28:
 264:./FWLIB/src/stm32f10x_can.c ****    {
 359              		.loc 1 264 56 is_stmt 1 view .LVU130
 264:./FWLIB/src/stm32f10x_can.c ****    {
 360              		.loc 1 264 17 is_stmt 0 view .LVU131
 361 00ea 4268     		ldr	r2, [r0, #4]
 264:./FWLIB/src/stm32f10x_can.c ****    {
 362              		.loc 1 264 56 view .LVU132
ARM GAS  /tmp/ccKET9pn.s 			page 34


 363 00ec 12F0010F 		tst	r2, #1
 364 00f0 03D0     		beq	.L29
 264:./FWLIB/src/stm32f10x_can.c ****    {
 365              		.loc 1 264 56 discriminator 1 view .LVU133
 366 00f2 4FF6FF72 		movw	r2, #65535
 367 00f6 9342     		cmp	r3, r2
 368 00f8 F6D1     		bne	.L30
 369              	.L29:
 270:./FWLIB/src/stm32f10x_can.c ****     {
 370              		.loc 1 270 5 is_stmt 1 view .LVU134
 270:./FWLIB/src/stm32f10x_can.c ****     {
 371              		.loc 1 270 14 is_stmt 0 view .LVU135
 372 00fa 4368     		ldr	r3, [r0, #4]
 373              	.LVL21:
 270:./FWLIB/src/stm32f10x_can.c ****     {
 374              		.loc 1 270 8 view .LVU136
 375 00fc 13F0010F 		tst	r3, #1
 376 0100 03D0     		beq	.L32
 272:./FWLIB/src/stm32f10x_can.c ****     }
 377              		.loc 1 272 18 view .LVU137
 378 0102 0020     		movs	r0, #0
 379              	.LVL22:
 272:./FWLIB/src/stm32f10x_can.c ****     }
 380              		.loc 1 272 18 view .LVU138
 381 0104 7047     		bx	lr
 382              	.LVL23:
 383              	.L31:
 187:./FWLIB/src/stm32f10x_can.c ****   }
 384              		.loc 1 187 16 view .LVU139
 385 0106 0020     		movs	r0, #0
 386              	.LVL24:
 187:./FWLIB/src/stm32f10x_can.c ****   }
 387              		.loc 1 187 16 view .LVU140
 388 0108 7047     		bx	lr
 389              	.LVL25:
 390              	.L32:
 276:./FWLIB/src/stm32f10x_can.c ****     }
 391              		.loc 1 276 18 view .LVU141
 392 010a 0120     		movs	r0, #1
 393              	.LVL26:
 281:./FWLIB/src/stm32f10x_can.c **** }
 394              		.loc 1 281 3 is_stmt 1 view .LVU142
 282:./FWLIB/src/stm32f10x_can.c **** 
 395              		.loc 1 282 1 is_stmt 0 view .LVU143
 396 010c 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE30:
 400              		.section	.text.CAN_FilterInit,"ax",%progbits
 401              		.align	1
 402              		.global	CAN_FilterInit
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 407              	CAN_FilterInit:
 408              	.LVL27:
 409              	.LFB31:
 293:./FWLIB/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
ARM GAS  /tmp/ccKET9pn.s 			page 35


 410              		.loc 1 293 1 is_stmt 1 view -0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 293:./FWLIB/src/stm32f10x_can.c ****   uint32_t filter_number_bit_pos = 0;
 414              		.loc 1 293 1 is_stmt 0 view .LVU145
 415 0000 10B5     		push	{r4, lr}
 416              	.LCFI1:
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 4, -8
 419              		.cfi_offset 14, -4
 294:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 420              		.loc 1 294 3 is_stmt 1 view .LVU146
 421              	.LVL28:
 296:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 422              		.loc 1 296 3 view .LVU147
 297:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 423              		.loc 1 297 3 view .LVU148
 298:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 424              		.loc 1 298 3 view .LVU149
 299:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 425              		.loc 1 299 3 view .LVU150
 300:./FWLIB/src/stm32f10x_can.c **** 
 426              		.loc 1 300 3 view .LVU151
 302:./FWLIB/src/stm32f10x_can.c **** 
 427              		.loc 1 302 3 view .LVU152
 302:./FWLIB/src/stm32f10x_can.c **** 
 428              		.loc 1 302 64 is_stmt 0 view .LVU153
 429 0002 827A     		ldrb	r2, [r0, #10]	@ zero_extendqisi2
 302:./FWLIB/src/stm32f10x_can.c **** 
 430              		.loc 1 302 25 view .LVU154
 431 0004 0123     		movs	r3, #1
 432 0006 9340     		lsls	r3, r3, r2
 433              	.LVL29:
 305:./FWLIB/src/stm32f10x_can.c **** 
 434              		.loc 1 305 3 is_stmt 1 view .LVU155
 305:./FWLIB/src/stm32f10x_can.c **** 
 435              		.loc 1 305 7 is_stmt 0 view .LVU156
 436 0008 3F4A     		ldr	r2, .L51
 437 000a D2F80012 		ldr	r1, [r2, #512]
 305:./FWLIB/src/stm32f10x_can.c **** 
 438              		.loc 1 305 13 view .LVU157
 439 000e 41F00101 		orr	r1, r1, #1
 440 0012 C2F80012 		str	r1, [r2, #512]
 308:./FWLIB/src/stm32f10x_can.c **** 
 441              		.loc 1 308 3 is_stmt 1 view .LVU158
 308:./FWLIB/src/stm32f10x_can.c **** 
 442              		.loc 1 308 7 is_stmt 0 view .LVU159
 443 0016 D2F81C12 		ldr	r1, [r2, #540]
 308:./FWLIB/src/stm32f10x_can.c **** 
 444              		.loc 1 308 17 view .LVU160
 445 001a 6FEA030C 		mvn	ip, r3
 308:./FWLIB/src/stm32f10x_can.c **** 
 446              		.loc 1 308 14 view .LVU161
 447 001e 21EA0301 		bic	r1, r1, r3
 448 0022 C2F81C12 		str	r1, [r2, #540]
 311:./FWLIB/src/stm32f10x_can.c ****   {
ARM GAS  /tmp/ccKET9pn.s 			page 36


 449              		.loc 1 311 3 is_stmt 1 view .LVU162
 311:./FWLIB/src/stm32f10x_can.c ****   {
 450              		.loc 1 311 27 is_stmt 0 view .LVU163
 451 0026 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 311:./FWLIB/src/stm32f10x_can.c ****   {
 452              		.loc 1 311 6 view .LVU164
 453 0028 D2B9     		cbnz	r2, .L40
 314:./FWLIB/src/stm32f10x_can.c **** 
 454              		.loc 1 314 5 is_stmt 1 view .LVU165
 314:./FWLIB/src/stm32f10x_can.c **** 
 455              		.loc 1 314 9 is_stmt 0 view .LVU166
 456 002a 374A     		ldr	r2, .L51
 457 002c D2F80C12 		ldr	r1, [r2, #524]
 314:./FWLIB/src/stm32f10x_can.c **** 
 458              		.loc 1 314 16 view .LVU167
 459 0030 0CEA0101 		and	r1, ip, r1
 460 0034 C2F80C12 		str	r1, [r2, #524]
 318:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 461              		.loc 1 318 5 is_stmt 1 view .LVU168
 319:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 462              		.loc 1 319 50 is_stmt 0 view .LVU169
 463 0038 B0F806E0 		ldrh	lr, [r0, #6]
 320:./FWLIB/src/stm32f10x_can.c **** 
 464              		.loc 1 320 53 view .LVU170
 465 003c 4488     		ldrh	r4, [r0, #2]
 318:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 466              		.loc 1 318 47 view .LVU171
 467 003e 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 319:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 468              		.loc 1 319 80 view .LVU172
 469 0040 44EA0E44 		orr	r4, r4, lr, lsl #16
 318:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 470              		.loc 1 318 71 view .LVU173
 471 0044 4831     		adds	r1, r1, #72
 472 0046 42F83140 		str	r4, [r2, r1, lsl #3]
 324:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 473              		.loc 1 324 5 is_stmt 1 view .LVU174
 325:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 474              		.loc 1 325 50 is_stmt 0 view .LVU175
 475 004a 8488     		ldrh	r4, [r0, #4]
 326:./FWLIB/src/stm32f10x_can.c ****   }
 476              		.loc 1 326 53 view .LVU176
 477 004c 0188     		ldrh	r1, [r0]
 324:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 478              		.loc 1 324 47 view .LVU177
 479 004e 90F80AE0 		ldrb	lr, [r0, #10]	@ zero_extendqisi2
 325:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 480              		.loc 1 325 81 view .LVU178
 481 0052 41EA0441 		orr	r1, r1, r4, lsl #16
 324:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 482              		.loc 1 324 71 view .LVU179
 483 0056 0EF1480E 		add	lr, lr, #72
 484 005a 02EBCE02 		add	r2, r2, lr, lsl #3
 485 005e 5160     		str	r1, [r2, #4]
 486              	.L40:
 329:./FWLIB/src/stm32f10x_can.c ****   {
 487              		.loc 1 329 3 is_stmt 1 view .LVU180
ARM GAS  /tmp/ccKET9pn.s 			page 37


 329:./FWLIB/src/stm32f10x_can.c ****   {
 488              		.loc 1 329 27 is_stmt 0 view .LVU181
 489 0060 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 329:./FWLIB/src/stm32f10x_can.c ****   {
 490              		.loc 1 329 6 view .LVU182
 491 0062 012A     		cmp	r2, #1
 492 0064 20D0     		beq	.L48
 493              	.L41:
 344:./FWLIB/src/stm32f10x_can.c ****   {
 494              		.loc 1 344 3 is_stmt 1 view .LVU183
 344:./FWLIB/src/stm32f10x_can.c ****   {
 495              		.loc 1 344 27 is_stmt 0 view .LVU184
 496 0066 C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2
 344:./FWLIB/src/stm32f10x_can.c ****   {
 497              		.loc 1 344 6 view .LVU185
 498 0068 002A     		cmp	r2, #0
 499 006a 37D1     		bne	.L42
 347:./FWLIB/src/stm32f10x_can.c ****   }
 500              		.loc 1 347 5 is_stmt 1 view .LVU186
 347:./FWLIB/src/stm32f10x_can.c ****   }
 501              		.loc 1 347 9 is_stmt 0 view .LVU187
 502 006c 2649     		ldr	r1, .L51
 503 006e D1F80422 		ldr	r2, [r1, #516]
 347:./FWLIB/src/stm32f10x_can.c ****   }
 504              		.loc 1 347 16 view .LVU188
 505 0072 0CEA0202 		and	r2, ip, r2
 506 0076 C1F80422 		str	r2, [r1, #516]
 507              	.L43:
 356:./FWLIB/src/stm32f10x_can.c ****   {
 508              		.loc 1 356 3 is_stmt 1 view .LVU189
 356:./FWLIB/src/stm32f10x_can.c ****   {
 509              		.loc 1 356 27 is_stmt 0 view .LVU190
 510 007a 0289     		ldrh	r2, [r0, #8]
 356:./FWLIB/src/stm32f10x_can.c ****   {
 511              		.loc 1 356 6 view .LVU191
 512 007c 32B9     		cbnz	r2, .L44
 359:./FWLIB/src/stm32f10x_can.c ****   }
 513              		.loc 1 359 5 is_stmt 1 view .LVU192
 359:./FWLIB/src/stm32f10x_can.c ****   }
 514              		.loc 1 359 9 is_stmt 0 view .LVU193
 515 007e 2249     		ldr	r1, .L51
 516 0080 D1F81422 		ldr	r2, [r1, #532]
 359:./FWLIB/src/stm32f10x_can.c ****   }
 517              		.loc 1 359 17 view .LVU194
 518 0084 0CEA0202 		and	r2, ip, r2
 519 0088 C1F81422 		str	r2, [r1, #532]
 520              	.L44:
 362:./FWLIB/src/stm32f10x_can.c ****   {
 521              		.loc 1 362 3 is_stmt 1 view .LVU195
 362:./FWLIB/src/stm32f10x_can.c ****   {
 522              		.loc 1 362 27 is_stmt 0 view .LVU196
 523 008c 0289     		ldrh	r2, [r0, #8]
 362:./FWLIB/src/stm32f10x_can.c ****   {
 524              		.loc 1 362 6 view .LVU197
 525 008e 012A     		cmp	r2, #1
 526 0090 2BD0     		beq	.L49
 527              	.L45:
ARM GAS  /tmp/ccKET9pn.s 			page 38


 369:./FWLIB/src/stm32f10x_can.c ****   {
 528              		.loc 1 369 3 is_stmt 1 view .LVU198
 369:./FWLIB/src/stm32f10x_can.c ****   {
 529              		.loc 1 369 27 is_stmt 0 view .LVU199
 530 0092 427B     		ldrb	r2, [r0, #13]	@ zero_extendqisi2
 369:./FWLIB/src/stm32f10x_can.c ****   {
 531              		.loc 1 369 6 view .LVU200
 532 0094 012A     		cmp	r2, #1
 533 0096 2FD0     		beq	.L50
 534              	.LVL30:
 535              	.L46:
 375:./FWLIB/src/stm32f10x_can.c **** }
 536              		.loc 1 375 3 is_stmt 1 view .LVU201
 375:./FWLIB/src/stm32f10x_can.c **** }
 537              		.loc 1 375 7 is_stmt 0 view .LVU202
 538 0098 1B4A     		ldr	r2, .L51
 539 009a D2F80032 		ldr	r3, [r2, #512]
 375:./FWLIB/src/stm32f10x_can.c **** }
 540              		.loc 1 375 13 view .LVU203
 541 009e 23F00103 		bic	r3, r3, #1
 542 00a2 C2F80032 		str	r3, [r2, #512]
 376:./FWLIB/src/stm32f10x_can.c **** 
 543              		.loc 1 376 1 view .LVU204
 544 00a6 10BD     		pop	{r4, pc}
 545              	.LVL31:
 546              	.L48:
 332:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 547              		.loc 1 332 5 is_stmt 1 view .LVU205
 332:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 548              		.loc 1 332 9 is_stmt 0 view .LVU206
 549 00a8 174A     		ldr	r2, .L51
 550 00aa D2F80C12 		ldr	r1, [r2, #524]
 332:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 551              		.loc 1 332 16 view .LVU207
 552 00ae 1943     		orrs	r1, r1, r3
 553 00b0 C2F80C12 		str	r1, [r2, #524]
 334:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 554              		.loc 1 334 5 is_stmt 1 view .LVU208
 335:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 555              		.loc 1 335 50 is_stmt 0 view .LVU209
 556 00b4 B0F800E0 		ldrh	lr, [r0]
 336:./FWLIB/src/stm32f10x_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 557              		.loc 1 336 53 view .LVU210
 558 00b8 4488     		ldrh	r4, [r0, #2]
 334:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 559              		.loc 1 334 47 view .LVU211
 560 00ba 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 335:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 561              		.loc 1 335 77 view .LVU212
 562 00bc 44EA0E44 		orr	r4, r4, lr, lsl #16
 334:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 563              		.loc 1 334 71 view .LVU213
 564 00c0 4831     		adds	r1, r1, #72
 565 00c2 42F83140 		str	r4, [r2, r1, lsl #3]
 338:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 566              		.loc 1 338 5 is_stmt 1 view .LVU214
 339:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
ARM GAS  /tmp/ccKET9pn.s 			page 39


 567              		.loc 1 339 50 is_stmt 0 view .LVU215
 568 00c6 B0F804E0 		ldrh	lr, [r0, #4]
 340:./FWLIB/src/stm32f10x_can.c ****   }
 569              		.loc 1 340 53 view .LVU216
 570 00ca C188     		ldrh	r1, [r0, #6]
 338:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 571              		.loc 1 338 47 view .LVU217
 572 00cc 847A     		ldrb	r4, [r0, #10]	@ zero_extendqisi2
 339:./FWLIB/src/stm32f10x_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 573              		.loc 1 339 81 view .LVU218
 574 00ce 41EA0E41 		orr	r1, r1, lr, lsl #16
 338:./FWLIB/src/stm32f10x_can.c ****     ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 575              		.loc 1 338 71 view .LVU219
 576 00d2 4834     		adds	r4, r4, #72
 577 00d4 02EBC402 		add	r2, r2, r4, lsl #3
 578 00d8 5160     		str	r1, [r2, #4]
 579 00da C4E7     		b	.L41
 580              	.L42:
 352:./FWLIB/src/stm32f10x_can.c ****   }
 581              		.loc 1 352 5 is_stmt 1 view .LVU220
 352:./FWLIB/src/stm32f10x_can.c ****   }
 582              		.loc 1 352 9 is_stmt 0 view .LVU221
 583 00dc 0A49     		ldr	r1, .L51
 584 00de D1F80422 		ldr	r2, [r1, #516]
 352:./FWLIB/src/stm32f10x_can.c ****   }
 585              		.loc 1 352 16 view .LVU222
 586 00e2 1A43     		orrs	r2, r2, r3
 587 00e4 C1F80422 		str	r2, [r1, #516]
 588 00e8 C7E7     		b	.L43
 589              	.L49:
 365:./FWLIB/src/stm32f10x_can.c ****   }
 590              		.loc 1 365 5 is_stmt 1 view .LVU223
 365:./FWLIB/src/stm32f10x_can.c ****   }
 591              		.loc 1 365 9 is_stmt 0 view .LVU224
 592 00ea 0749     		ldr	r1, .L51
 593 00ec D1F81422 		ldr	r2, [r1, #532]
 365:./FWLIB/src/stm32f10x_can.c ****   }
 594              		.loc 1 365 17 view .LVU225
 595 00f0 1A43     		orrs	r2, r2, r3
 596 00f2 C1F81422 		str	r2, [r1, #532]
 597 00f6 CCE7     		b	.L45
 598              	.L50:
 371:./FWLIB/src/stm32f10x_can.c ****   }
 599              		.loc 1 371 5 is_stmt 1 view .LVU226
 371:./FWLIB/src/stm32f10x_can.c ****   }
 600              		.loc 1 371 9 is_stmt 0 view .LVU227
 601 00f8 0349     		ldr	r1, .L51
 602 00fa D1F81C22 		ldr	r2, [r1, #540]
 371:./FWLIB/src/stm32f10x_can.c ****   }
 603              		.loc 1 371 16 view .LVU228
 604 00fe 1343     		orrs	r3, r3, r2
 605              	.LVL32:
 371:./FWLIB/src/stm32f10x_can.c ****   }
 606              		.loc 1 371 16 view .LVU229
 607 0100 C1F81C32 		str	r3, [r1, #540]
 608 0104 C8E7     		b	.L46
 609              	.L52:
ARM GAS  /tmp/ccKET9pn.s 			page 40


 610 0106 00BF     		.align	2
 611              	.L51:
 612 0108 00640040 		.word	1073767424
 613              		.cfi_endproc
 614              	.LFE31:
 616              		.section	.text.CAN_StructInit,"ax",%progbits
 617              		.align	1
 618              		.global	CAN_StructInit
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 623              	CAN_StructInit:
 624              	.LVL33:
 625              	.LFB32:
 385:./FWLIB/src/stm32f10x_can.c ****   /* Reset CAN init structure parameters values */
 626              		.loc 1 385 1 is_stmt 1 view -0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 389:./FWLIB/src/stm32f10x_can.c ****   
 631              		.loc 1 389 3 view .LVU231
 389:./FWLIB/src/stm32f10x_can.c ****   
 632              		.loc 1 389 28 is_stmt 0 view .LVU232
 633 0000 0023     		movs	r3, #0
 634 0002 8371     		strb	r3, [r0, #6]
 392:./FWLIB/src/stm32f10x_can.c ****   
 635              		.loc 1 392 3 is_stmt 1 view .LVU233
 392:./FWLIB/src/stm32f10x_can.c ****   
 636              		.loc 1 392 28 is_stmt 0 view .LVU234
 637 0004 C371     		strb	r3, [r0, #7]
 395:./FWLIB/src/stm32f10x_can.c ****   
 638              		.loc 1 395 3 is_stmt 1 view .LVU235
 395:./FWLIB/src/stm32f10x_can.c ****   
 639              		.loc 1 395 28 is_stmt 0 view .LVU236
 640 0006 0372     		strb	r3, [r0, #8]
 398:./FWLIB/src/stm32f10x_can.c ****   
 641              		.loc 1 398 3 is_stmt 1 view .LVU237
 398:./FWLIB/src/stm32f10x_can.c ****   
 642              		.loc 1 398 28 is_stmt 0 view .LVU238
 643 0008 4372     		strb	r3, [r0, #9]
 401:./FWLIB/src/stm32f10x_can.c ****   
 644              		.loc 1 401 3 is_stmt 1 view .LVU239
 401:./FWLIB/src/stm32f10x_can.c ****   
 645              		.loc 1 401 28 is_stmt 0 view .LVU240
 646 000a 8372     		strb	r3, [r0, #10]
 404:./FWLIB/src/stm32f10x_can.c ****   
 647              		.loc 1 404 3 is_stmt 1 view .LVU241
 404:./FWLIB/src/stm32f10x_can.c ****   
 648              		.loc 1 404 28 is_stmt 0 view .LVU242
 649 000c C372     		strb	r3, [r0, #11]
 407:./FWLIB/src/stm32f10x_can.c ****   
 650              		.loc 1 407 3 is_stmt 1 view .LVU243
 407:./FWLIB/src/stm32f10x_can.c ****   
 651              		.loc 1 407 28 is_stmt 0 view .LVU244
 652 000e 8370     		strb	r3, [r0, #2]
 410:./FWLIB/src/stm32f10x_can.c ****   
ARM GAS  /tmp/ccKET9pn.s 			page 41


 653              		.loc 1 410 3 is_stmt 1 view .LVU245
 410:./FWLIB/src/stm32f10x_can.c ****   
 654              		.loc 1 410 27 is_stmt 0 view .LVU246
 655 0010 C370     		strb	r3, [r0, #3]
 413:./FWLIB/src/stm32f10x_can.c ****   
 656              		.loc 1 413 3 is_stmt 1 view .LVU247
 413:./FWLIB/src/stm32f10x_can.c ****   
 657              		.loc 1 413 27 is_stmt 0 view .LVU248
 658 0012 0323     		movs	r3, #3
 659 0014 0371     		strb	r3, [r0, #4]
 416:./FWLIB/src/stm32f10x_can.c ****   
 660              		.loc 1 416 3 is_stmt 1 view .LVU249
 416:./FWLIB/src/stm32f10x_can.c ****   
 661              		.loc 1 416 27 is_stmt 0 view .LVU250
 662 0016 0223     		movs	r3, #2
 663 0018 4371     		strb	r3, [r0, #5]
 419:./FWLIB/src/stm32f10x_can.c **** }
 664              		.loc 1 419 3 is_stmt 1 view .LVU251
 419:./FWLIB/src/stm32f10x_can.c **** }
 665              		.loc 1 419 33 is_stmt 0 view .LVU252
 666 001a 0123     		movs	r3, #1
 667 001c 0380     		strh	r3, [r0]	@ movhi
 420:./FWLIB/src/stm32f10x_can.c **** 
 668              		.loc 1 420 1 view .LVU253
 669 001e 7047     		bx	lr
 670              		.cfi_endproc
 671              	.LFE32:
 673              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 674              		.align	1
 675              		.global	CAN_SlaveStartBank
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 680              	CAN_SlaveStartBank:
 681              	.LVL34:
 682              	.LFB33:
 429:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 683              		.loc 1 429 1 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 431:./FWLIB/src/stm32f10x_can.c ****   
 688              		.loc 1 431 3 view .LVU255
 434:./FWLIB/src/stm32f10x_can.c ****   
 689              		.loc 1 434 3 view .LVU256
 434:./FWLIB/src/stm32f10x_can.c ****   
 690              		.loc 1 434 7 is_stmt 0 view .LVU257
 691 0000 0D4B     		ldr	r3, .L55
 692 0002 D3F80022 		ldr	r2, [r3, #512]
 434:./FWLIB/src/stm32f10x_can.c ****   
 693              		.loc 1 434 13 view .LVU258
 694 0006 42F00102 		orr	r2, r2, #1
 695 000a C3F80022 		str	r2, [r3, #512]
 437:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 696              		.loc 1 437 3 is_stmt 1 view .LVU259
 437:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
ARM GAS  /tmp/ccKET9pn.s 			page 42


 697              		.loc 1 437 7 is_stmt 0 view .LVU260
 698 000e D3F80022 		ldr	r2, [r3, #512]
 437:./FWLIB/src/stm32f10x_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 699              		.loc 1 437 13 view .LVU261
 700 0012 22F47C52 		bic	r2, r2, #16128
 701 0016 22F00E02 		bic	r2, r2, #14
 702 001a C3F80022 		str	r2, [r3, #512]
 438:./FWLIB/src/stm32f10x_can.c ****   
 703              		.loc 1 438 3 is_stmt 1 view .LVU262
 438:./FWLIB/src/stm32f10x_can.c ****   
 704              		.loc 1 438 7 is_stmt 0 view .LVU263
 705 001e D3F80022 		ldr	r2, [r3, #512]
 438:./FWLIB/src/stm32f10x_can.c ****   
 706              		.loc 1 438 13 view .LVU264
 707 0022 42EA0022 		orr	r2, r2, r0, lsl #8
 708 0026 C3F80022 		str	r2, [r3, #512]
 441:./FWLIB/src/stm32f10x_can.c **** }
 709              		.loc 1 441 3 is_stmt 1 view .LVU265
 441:./FWLIB/src/stm32f10x_can.c **** }
 710              		.loc 1 441 7 is_stmt 0 view .LVU266
 711 002a D3F80022 		ldr	r2, [r3, #512]
 441:./FWLIB/src/stm32f10x_can.c **** }
 712              		.loc 1 441 13 view .LVU267
 713 002e 22F00102 		bic	r2, r2, #1
 714 0032 C3F80022 		str	r2, [r3, #512]
 442:./FWLIB/src/stm32f10x_can.c **** 
 715              		.loc 1 442 1 view .LVU268
 716 0036 7047     		bx	lr
 717              	.L56:
 718              		.align	2
 719              	.L55:
 720 0038 00640040 		.word	1073767424
 721              		.cfi_endproc
 722              	.LFE33:
 724              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 725              		.align	1
 726              		.global	CAN_DBGFreeze
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 731              	CAN_DBGFreeze:
 732              	.LVL35:
 733              	.LFB34:
 452:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 734              		.loc 1 452 1 is_stmt 1 view -0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 0
 737              		@ frame_needed = 0, uses_anonymous_args = 0
 738              		@ link register save eliminated.
 454:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 739              		.loc 1 454 3 view .LVU270
 455:./FWLIB/src/stm32f10x_can.c ****   
 740              		.loc 1 455 3 view .LVU271
 457:./FWLIB/src/stm32f10x_can.c ****   {
 741              		.loc 1 457 3 view .LVU272
 457:./FWLIB/src/stm32f10x_can.c ****   {
 742              		.loc 1 457 6 is_stmt 0 view .LVU273
ARM GAS  /tmp/ccKET9pn.s 			page 43


 743 0000 21B1     		cbz	r1, .L58
 460:./FWLIB/src/stm32f10x_can.c ****   }
 744              		.loc 1 460 5 is_stmt 1 view .LVU274
 460:./FWLIB/src/stm32f10x_can.c ****   }
 745              		.loc 1 460 9 is_stmt 0 view .LVU275
 746 0002 0368     		ldr	r3, [r0]
 460:./FWLIB/src/stm32f10x_can.c ****   }
 747              		.loc 1 460 15 view .LVU276
 748 0004 43F48033 		orr	r3, r3, #65536
 749 0008 0360     		str	r3, [r0]
 750 000a 7047     		bx	lr
 751              	.L58:
 465:./FWLIB/src/stm32f10x_can.c ****   }
 752              		.loc 1 465 5 is_stmt 1 view .LVU277
 465:./FWLIB/src/stm32f10x_can.c ****   }
 753              		.loc 1 465 9 is_stmt 0 view .LVU278
 754 000c 0368     		ldr	r3, [r0]
 465:./FWLIB/src/stm32f10x_can.c ****   }
 755              		.loc 1 465 15 view .LVU279
 756 000e 23F48033 		bic	r3, r3, #65536
 757 0012 0360     		str	r3, [r0]
 467:./FWLIB/src/stm32f10x_can.c **** 
 758              		.loc 1 467 1 view .LVU280
 759 0014 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE34:
 763              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 764              		.align	1
 765              		.global	CAN_TTComModeCmd
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 770              	CAN_TTComModeCmd:
 771              	.LVL36:
 772              	.LFB35:
 482:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 773              		.loc 1 482 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 484:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 778              		.loc 1 484 3 view .LVU282
 485:./FWLIB/src/stm32f10x_can.c ****   if (NewState != DISABLE)
 779              		.loc 1 485 3 view .LVU283
 486:./FWLIB/src/stm32f10x_can.c ****   {
 780              		.loc 1 486 3 view .LVU284
 486:./FWLIB/src/stm32f10x_can.c ****   {
 781              		.loc 1 486 6 is_stmt 0 view .LVU285
 782 0000 B1B1     		cbz	r1, .L61
 489:./FWLIB/src/stm32f10x_can.c **** 
 783              		.loc 1 489 5 is_stmt 1 view .LVU286
 489:./FWLIB/src/stm32f10x_can.c **** 
 784              		.loc 1 489 9 is_stmt 0 view .LVU287
 785 0002 0368     		ldr	r3, [r0]
 489:./FWLIB/src/stm32f10x_can.c **** 
 786              		.loc 1 489 15 view .LVU288
ARM GAS  /tmp/ccKET9pn.s 			page 44


 787 0004 43F08003 		orr	r3, r3, #128
 788 0008 0360     		str	r3, [r0]
 492:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 789              		.loc 1 492 5 is_stmt 1 view .LVU289
 492:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 790              		.loc 1 492 24 is_stmt 0 view .LVU290
 791 000a D0F88431 		ldr	r3, [r0, #388]
 492:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 792              		.loc 1 492 30 view .LVU291
 793 000e 43F48073 		orr	r3, r3, #256
 794 0012 C0F88431 		str	r3, [r0, #388]
 493:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 795              		.loc 1 493 5 is_stmt 1 view .LVU292
 493:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 796              		.loc 1 493 24 is_stmt 0 view .LVU293
 797 0016 D0F89431 		ldr	r3, [r0, #404]
 493:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 798              		.loc 1 493 30 view .LVU294
 799 001a 43F48073 		orr	r3, r3, #256
 800 001e C0F89431 		str	r3, [r0, #404]
 494:./FWLIB/src/stm32f10x_can.c ****   }
 801              		.loc 1 494 5 is_stmt 1 view .LVU295
 494:./FWLIB/src/stm32f10x_can.c ****   }
 802              		.loc 1 494 24 is_stmt 0 view .LVU296
 803 0022 D0F8A431 		ldr	r3, [r0, #420]
 494:./FWLIB/src/stm32f10x_can.c ****   }
 804              		.loc 1 494 30 view .LVU297
 805 0026 43F48073 		orr	r3, r3, #256
 806 002a C0F8A431 		str	r3, [r0, #420]
 807 002e 7047     		bx	lr
 808              	.L61:
 499:./FWLIB/src/stm32f10x_can.c **** 
 809              		.loc 1 499 5 is_stmt 1 view .LVU298
 499:./FWLIB/src/stm32f10x_can.c **** 
 810              		.loc 1 499 9 is_stmt 0 view .LVU299
 811 0030 0368     		ldr	r3, [r0]
 499:./FWLIB/src/stm32f10x_can.c **** 
 812              		.loc 1 499 15 view .LVU300
 813 0032 23F08003 		bic	r3, r3, #128
 814 0036 0360     		str	r3, [r0]
 502:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 815              		.loc 1 502 5 is_stmt 1 view .LVU301
 502:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 816              		.loc 1 502 24 is_stmt 0 view .LVU302
 817 0038 D0F88431 		ldr	r3, [r0, #388]
 502:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 818              		.loc 1 502 30 view .LVU303
 819 003c 23F48073 		bic	r3, r3, #256
 820 0040 C0F88431 		str	r3, [r0, #388]
 503:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 821              		.loc 1 503 5 is_stmt 1 view .LVU304
 503:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 822              		.loc 1 503 24 is_stmt 0 view .LVU305
 823 0044 D0F89431 		ldr	r3, [r0, #404]
 503:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 824              		.loc 1 503 30 view .LVU306
 825 0048 23F48073 		bic	r3, r3, #256
ARM GAS  /tmp/ccKET9pn.s 			page 45


 826 004c C0F89431 		str	r3, [r0, #404]
 504:./FWLIB/src/stm32f10x_can.c ****   }
 827              		.loc 1 504 5 is_stmt 1 view .LVU307
 504:./FWLIB/src/stm32f10x_can.c ****   }
 828              		.loc 1 504 24 is_stmt 0 view .LVU308
 829 0050 D0F8A431 		ldr	r3, [r0, #420]
 504:./FWLIB/src/stm32f10x_can.c ****   }
 830              		.loc 1 504 30 view .LVU309
 831 0054 23F48073 		bic	r3, r3, #256
 832 0058 C0F8A431 		str	r3, [r0, #420]
 506:./FWLIB/src/stm32f10x_can.c **** /**
 833              		.loc 1 506 1 view .LVU310
 834 005c 7047     		bx	lr
 835              		.cfi_endproc
 836              	.LFE35:
 838              		.section	.text.CAN_Transmit,"ax",%progbits
 839              		.align	1
 840              		.global	CAN_Transmit
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 845              	CAN_Transmit:
 846              	.LVL37:
 847              	.LFB36:
 516:./FWLIB/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 848              		.loc 1 516 1 is_stmt 1 view -0
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 0
 851              		@ frame_needed = 0, uses_anonymous_args = 0
 516:./FWLIB/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 852              		.loc 1 516 1 is_stmt 0 view .LVU312
 853 0000 0346     		mov	r3, r0
 517:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 854              		.loc 1 517 3 is_stmt 1 view .LVU313
 855              	.LVL38:
 519:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 856              		.loc 1 519 3 view .LVU314
 520:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 857              		.loc 1 520 3 view .LVU315
 521:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 858              		.loc 1 521 3 view .LVU316
 522:./FWLIB/src/stm32f10x_can.c **** 
 859              		.loc 1 522 3 view .LVU317
 525:./FWLIB/src/stm32f10x_can.c ****   {
 860              		.loc 1 525 3 view .LVU318
 525:./FWLIB/src/stm32f10x_can.c ****   {
 861              		.loc 1 525 12 is_stmt 0 view .LVU319
 862 0002 8268     		ldr	r2, [r0, #8]
 525:./FWLIB/src/stm32f10x_can.c ****   {
 863              		.loc 1 525 6 view .LVU320
 864 0004 12F0806F 		tst	r2, #67108864
 865 0008 09D1     		bne	.L68
 529:./FWLIB/src/stm32f10x_can.c ****   {
 866              		.loc 1 529 8 is_stmt 1 view .LVU321
 529:./FWLIB/src/stm32f10x_can.c ****   {
 867              		.loc 1 529 17 is_stmt 0 view .LVU322
 868 000a 8268     		ldr	r2, [r0, #8]
ARM GAS  /tmp/ccKET9pn.s 			page 46


 529:./FWLIB/src/stm32f10x_can.c ****   {
 869              		.loc 1 529 11 view .LVU323
 870 000c 12F0006F 		tst	r2, #134217728
 871 0010 50D1     		bne	.L69
 533:./FWLIB/src/stm32f10x_can.c ****   {
 872              		.loc 1 533 8 is_stmt 1 view .LVU324
 533:./FWLIB/src/stm32f10x_can.c ****   {
 873              		.loc 1 533 17 is_stmt 0 view .LVU325
 874 0012 8268     		ldr	r2, [r0, #8]
 533:./FWLIB/src/stm32f10x_can.c ****   {
 875              		.loc 1 533 11 view .LVU326
 876 0014 12F0805F 		tst	r2, #268435456
 877 0018 5DD0     		beq	.L70
 535:./FWLIB/src/stm32f10x_can.c ****   }
 878              		.loc 1 535 22 view .LVU327
 879 001a 0220     		movs	r0, #2
 880              	.LVL39:
 535:./FWLIB/src/stm32f10x_can.c ****   }
 881              		.loc 1 535 22 view .LVU328
 882 001c 00E0     		b	.L64
 883              	.LVL40:
 884              	.L68:
 527:./FWLIB/src/stm32f10x_can.c ****   }
 885              		.loc 1 527 22 view .LVU329
 886 001e 0020     		movs	r0, #0
 887              	.LVL41:
 888              	.L64:
 516:./FWLIB/src/stm32f10x_can.c ****   uint8_t transmit_mailbox = 0;
 889              		.loc 1 516 1 view .LVU330
 890 0020 30B5     		push	{r4, r5, lr}
 891              	.LCFI2:
 892              		.cfi_def_cfa_offset 12
 893              		.cfi_offset 4, -12
 894              		.cfi_offset 5, -8
 895              		.cfi_offset 14, -4
 896              	.LVL42:
 545:./FWLIB/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 897              		.loc 1 545 5 is_stmt 1 view .LVU331
 545:./FWLIB/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 898              		.loc 1 545 39 is_stmt 0 view .LVU332
 899 0022 8646     		mov	lr, r0
 900 0024 00F11802 		add	r2, r0, #24
 901 0028 1201     		lsls	r2, r2, #4
 902 002a 9C58     		ldr	r4, [r3, r2]
 545:./FWLIB/src/stm32f10x_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 903              		.loc 1 545 44 view .LVU333
 904 002c 04F00104 		and	r4, r4, #1
 905 0030 9C50     		str	r4, [r3, r2]
 546:./FWLIB/src/stm32f10x_can.c ****     {
 906              		.loc 1 546 5 is_stmt 1 view .LVU334
 546:./FWLIB/src/stm32f10x_can.c ****     {
 907              		.loc 1 546 18 is_stmt 0 view .LVU335
 908 0032 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 546:./FWLIB/src/stm32f10x_can.c ****     {
 909              		.loc 1 546 8 view .LVU336
 910 0034 002A     		cmp	r2, #0
 911 0036 3FD1     		bne	.L66
ARM GAS  /tmp/ccKET9pn.s 			page 47


 548:./FWLIB/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 912              		.loc 1 548 7 is_stmt 1 view .LVU337
 549:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 913              		.loc 1 549 7 view .LVU338
 549:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 914              		.loc 1 549 41 is_stmt 0 view .LVU339
 915 0038 00F11802 		add	r2, r0, #24
 916 003c 1201     		lsls	r2, r2, #4
 917 003e 9C58     		ldr	r4, [r3, r2]
 550:./FWLIB/src/stm32f10x_can.c ****     }
 918              		.loc 1 550 60 view .LVU340
 919 0040 4D7A     		ldrb	r5, [r1, #9]	@ zero_extendqisi2
 549:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 920              		.loc 1 549 75 view .LVU341
 921 0042 D1F800C0 		ldr	ip, [r1]
 922 0046 45EA4C55 		orr	r5, r5, ip, lsl #21
 549:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 923              		.loc 1 549 46 view .LVU342
 924 004a 2C43     		orrs	r4, r4, r5
 925 004c 9C50     		str	r4, [r3, r2]
 926              	.L67:
 561:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 927              		.loc 1 561 5 is_stmt 1 view .LVU343
 561:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 928              		.loc 1 561 14 is_stmt 0 view .LVU344
 929 004e 8A7A     		ldrb	r2, [r1, #10]	@ zero_extendqisi2
 561:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 930              		.loc 1 561 20 view .LVU345
 931 0050 02F00F02 		and	r2, r2, #15
 932 0054 8A72     		strb	r2, [r1, #10]
 562:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 933              		.loc 1 562 5 is_stmt 1 view .LVU346
 562:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 934              		.loc 1 562 39 is_stmt 0 view .LVU347
 935 0056 0EF11802 		add	r2, lr, #24
 936 005a 4FEA021C 		lsl	ip, r2, #4
 937 005e 03EB0212 		add	r2, r3, r2, lsl #4
 938 0062 5468     		ldr	r4, [r2, #4]
 562:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 939              		.loc 1 562 45 view .LVU348
 940 0064 24F00F04 		bic	r4, r4, #15
 941 0068 5460     		str	r4, [r2, #4]
 563:./FWLIB/src/stm32f10x_can.c **** 
 942              		.loc 1 563 5 is_stmt 1 view .LVU349
 563:./FWLIB/src/stm32f10x_can.c **** 
 943              		.loc 1 563 39 is_stmt 0 view .LVU350
 944 006a 5468     		ldr	r4, [r2, #4]
 563:./FWLIB/src/stm32f10x_can.c **** 
 945              		.loc 1 563 57 view .LVU351
 946 006c 8D7A     		ldrb	r5, [r1, #10]	@ zero_extendqisi2
 563:./FWLIB/src/stm32f10x_can.c **** 
 947              		.loc 1 563 45 view .LVU352
 948 006e 2C43     		orrs	r4, r4, r5
 949 0070 5460     		str	r4, [r2, #4]
 566:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 950              		.loc 1 566 5 is_stmt 1 view .LVU353
 566:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
ARM GAS  /tmp/ccKET9pn.s 			page 48


 951              		.loc 1 566 74 is_stmt 0 view .LVU354
 952 0072 8C7B     		ldrb	r4, [r1, #14]	@ zero_extendqisi2
 567:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 953              		.loc 1 567 72 view .LVU355
 954 0074 4A7B     		ldrb	r2, [r1, #13]	@ zero_extendqisi2
 567:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 955              		.loc 1 567 76 view .LVU356
 956 0076 1204     		lsls	r2, r2, #16
 566:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 957              		.loc 1 566 85 view .LVU357
 958 0078 42EA0462 		orr	r2, r2, r4, lsl #24
 568:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 959              		.loc 1 568 72 view .LVU358
 960 007c 0C7B     		ldrb	r4, [r1, #12]	@ zero_extendqisi2
 567:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 961              		.loc 1 567 83 view .LVU359
 962 007e 42EA0422 		orr	r2, r2, r4, lsl #8
 569:./FWLIB/src/stm32f10x_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 963              		.loc 1 569 72 view .LVU360
 964 0082 CC7A     		ldrb	r4, [r1, #11]	@ zero_extendqisi2
 568:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 965              		.loc 1 568 82 view .LVU361
 966 0084 2243     		orrs	r2, r2, r4
 566:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 967              		.loc 1 566 45 view .LVU362
 968 0086 03EB0E1E 		add	lr, r3, lr, lsl #4
 969 008a CEF88821 		str	r2, [lr, #392]
 570:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 970              		.loc 1 570 5 is_stmt 1 view .LVU363
 570:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 971              		.loc 1 570 74 is_stmt 0 view .LVU364
 972 008e 8C7C     		ldrb	r4, [r1, #18]	@ zero_extendqisi2
 571:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 973              		.loc 1 571 72 view .LVU365
 974 0090 4A7C     		ldrb	r2, [r1, #17]	@ zero_extendqisi2
 571:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 975              		.loc 1 571 76 view .LVU366
 976 0092 1204     		lsls	r2, r2, #16
 570:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 977              		.loc 1 570 85 view .LVU367
 978 0094 42EA0462 		orr	r2, r2, r4, lsl #24
 572:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 979              		.loc 1 572 72 view .LVU368
 980 0098 0C7C     		ldrb	r4, [r1, #16]	@ zero_extendqisi2
 571:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 981              		.loc 1 571 83 view .LVU369
 982 009a 42EA0422 		orr	r2, r2, r4, lsl #8
 573:./FWLIB/src/stm32f10x_can.c ****     /* Request transmission */
 983              		.loc 1 573 72 view .LVU370
 984 009e C97B     		ldrb	r1, [r1, #15]	@ zero_extendqisi2
 985              	.LVL43:
 572:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 986              		.loc 1 572 82 view .LVU371
 987 00a0 0A43     		orrs	r2, r2, r1
 570:./FWLIB/src/stm32f10x_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 988              		.loc 1 570 45 view .LVU372
 989 00a2 CEF88C21 		str	r2, [lr, #396]
ARM GAS  /tmp/ccKET9pn.s 			page 49


 575:./FWLIB/src/stm32f10x_can.c ****   }
 990              		.loc 1 575 5 is_stmt 1 view .LVU373
 575:./FWLIB/src/stm32f10x_can.c ****   }
 991              		.loc 1 575 39 is_stmt 0 view .LVU374
 992 00a6 53F80C20 		ldr	r2, [r3, ip]
 575:./FWLIB/src/stm32f10x_can.c ****   }
 993              		.loc 1 575 44 view .LVU375
 994 00aa 42F00102 		orr	r2, r2, #1
 995 00ae 43F80C20 		str	r2, [r3, ip]
 577:./FWLIB/src/stm32f10x_can.c **** }
 996              		.loc 1 577 3 is_stmt 1 view .LVU376
 578:./FWLIB/src/stm32f10x_can.c **** 
 997              		.loc 1 578 1 is_stmt 0 view .LVU377
 998 00b2 30BD     		pop	{r4, r5, pc}
 999              	.LVL44:
 1000              	.L69:
 1001              	.LCFI3:
 1002              		.cfi_def_cfa_offset 0
 1003              		.cfi_restore 4
 1004              		.cfi_restore 5
 1005              		.cfi_restore 14
 531:./FWLIB/src/stm32f10x_can.c ****   }
 1006              		.loc 1 531 22 view .LVU378
 1007 00b4 0120     		movs	r0, #1
 1008              	.LVL45:
 531:./FWLIB/src/stm32f10x_can.c ****   }
 1009              		.loc 1 531 22 view .LVU379
 1010 00b6 B3E7     		b	.L64
 1011              	.LVL46:
 1012              	.L66:
 1013              	.LCFI4:
 1014              		.cfi_def_cfa_offset 12
 1015              		.cfi_offset 4, -12
 1016              		.cfi_offset 5, -8
 1017              		.cfi_offset 14, -4
 554:./FWLIB/src/stm32f10x_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1018              		.loc 1 554 7 is_stmt 1 view .LVU380
 555:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1019              		.loc 1 555 7 view .LVU381
 555:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1020              		.loc 1 555 41 is_stmt 0 view .LVU382
 1021 00b8 00F11804 		add	r4, r0, #24
 1022 00bc 2401     		lsls	r4, r4, #4
 1023 00be 1D59     		ldr	r5, [r3, r4]
 555:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1024              		.loc 1 555 74 view .LVU383
 1025 00c0 D1F804C0 		ldr	ip, [r1, #4]
 1026 00c4 42EACC02 		orr	r2, r2, ip, lsl #3
 557:./FWLIB/src/stm32f10x_can.c ****     }
 1027              		.loc 1 557 60 view .LVU384
 1028 00c8 91F809C0 		ldrb	ip, [r1, #9]	@ zero_extendqisi2
 556:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->RTR);
 1029              		.loc 1 556 66 view .LVU385
 1030 00cc 42EA0C02 		orr	r2, r2, ip
 555:./FWLIB/src/stm32f10x_can.c ****                                                   TxMessage->IDE | \
 1031              		.loc 1 555 46 view .LVU386
 1032 00d0 2A43     		orrs	r2, r2, r5
ARM GAS  /tmp/ccKET9pn.s 			page 50


 1033 00d2 1A51     		str	r2, [r3, r4]
 1034 00d4 BBE7     		b	.L67
 1035              	.LVL47:
 1036              	.L70:
 1037              	.LCFI5:
 1038              		.cfi_def_cfa_offset 0
 1039              		.cfi_restore 4
 1040              		.cfi_restore 5
 1041              		.cfi_restore 14
 539:./FWLIB/src/stm32f10x_can.c ****   }
 1042              		.loc 1 539 22 view .LVU387
 1043 00d6 0420     		movs	r0, #4
 1044              	.LVL48:
 577:./FWLIB/src/stm32f10x_can.c **** }
 1045              		.loc 1 577 3 is_stmt 1 view .LVU388
 578:./FWLIB/src/stm32f10x_can.c **** 
 1046              		.loc 1 578 1 is_stmt 0 view .LVU389
 1047 00d8 7047     		bx	lr
 1048              		.cfi_endproc
 1049              	.LFE36:
 1051              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 1052              		.align	1
 1053              		.global	CAN_TransmitStatus
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1058              	CAN_TransmitStatus:
 1059              	.LVL49:
 1060              	.LFB37:
 590:./FWLIB/src/stm32f10x_can.c ****   uint32_t state = 0;
 1061              		.loc 1 590 1 is_stmt 1 view -0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 591:./FWLIB/src/stm32f10x_can.c **** 
 1066              		.loc 1 591 3 view .LVU391
 594:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 1067              		.loc 1 594 3 view .LVU392
 595:./FWLIB/src/stm32f10x_can.c ****  
 1068              		.loc 1 595 3 view .LVU393
 597:./FWLIB/src/stm32f10x_can.c ****   {
 1069              		.loc 1 597 3 view .LVU394
 1070 0000 0129     		cmp	r1, #1
 1071 0002 18D0     		beq	.L75
 1072 0004 0229     		cmp	r1, #2
 1073 0006 1AD0     		beq	.L76
 1074 0008 69BB     		cbnz	r1, .L80
 600:./FWLIB/src/stm32f10x_can.c ****       break;
 1075              		.loc 1 600 7 view .LVU395
 600:./FWLIB/src/stm32f10x_can.c ****       break;
 1076              		.loc 1 600 21 is_stmt 0 view .LVU396
 1077 000a 8368     		ldr	r3, [r0, #8]
 600:./FWLIB/src/stm32f10x_can.c ****       break;
 1078              		.loc 1 600 13 view .LVU397
 1079 000c 23F07B43 		bic	r3, r3, #-83886080
 1080 0010 23F47F03 		bic	r3, r3, #16711680
ARM GAS  /tmp/ccKET9pn.s 			page 51


 1081 0014 23F47F43 		bic	r3, r3, #65280
 1082 0018 23F0FC03 		bic	r3, r3, #252
 1083              	.LVL50:
 601:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): 
 1084              		.loc 1 601 7 is_stmt 1 view .LVU398
 1085              	.L78:
 612:./FWLIB/src/stm32f10x_can.c ****   {
 1086              		.loc 1 612 3 view .LVU399
 1087 001c 1A4A     		ldr	r2, .L88
 1088 001e 9342     		cmp	r3, r2
 1089 0020 23D0     		beq	.L81
 612:./FWLIB/src/stm32f10x_can.c ****   {
 1090              		.loc 1 612 3 is_stmt 0 view .LVU400
 1091 0022 14D8     		bhi	.L79
 1092 0024 194A     		ldr	r2, .L88+4
 1093 0026 9342     		cmp	r3, r2
 1094 0028 21D0     		beq	.L82
 1095 002a 0232     		adds	r2, r2, #2
 1096 002c 9342     		cmp	r3, r2
 1097 002e 20D0     		beq	.L83
 1098 0030 0BBB     		cbnz	r3, .L84
 1099 0032 0220     		movs	r0, #2
 1100              	.LVL51:
 612:./FWLIB/src/stm32f10x_can.c ****   {
 1101              		.loc 1 612 3 view .LVU401
 1102 0034 7047     		bx	lr
 1103              	.LVL52:
 1104              	.L75:
 603:./FWLIB/src/stm32f10x_can.c ****       break;
 1105              		.loc 1 603 7 is_stmt 1 view .LVU402
 603:./FWLIB/src/stm32f10x_can.c ****       break;
 1106              		.loc 1 603 21 is_stmt 0 view .LVU403
 1107 0036 8268     		ldr	r2, [r0, #8]
 603:./FWLIB/src/stm32f10x_can.c ****       break;
 1108              		.loc 1 603 13 view .LVU404
 1109 0038 154B     		ldr	r3, .L88+8
 1110 003a 1340     		ands	r3, r3, r2
 1111              	.LVL53:
 604:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): 
 1112              		.loc 1 604 7 is_stmt 1 view .LVU405
 1113 003c EEE7     		b	.L78
 1114              	.LVL54:
 1115              	.L76:
 606:./FWLIB/src/stm32f10x_can.c ****       break;
 1116              		.loc 1 606 7 view .LVU406
 606:./FWLIB/src/stm32f10x_can.c ****       break;
 1117              		.loc 1 606 21 is_stmt 0 view .LVU407
 1118 003e 8368     		ldr	r3, [r0, #8]
 606:./FWLIB/src/stm32f10x_can.c ****       break;
 1119              		.loc 1 606 13 view .LVU408
 1120 0040 23F06F43 		bic	r3, r3, #-285212672
 1121 0044 23F47C03 		bic	r3, r3, #16515072
 1122 0048 1B0C     		lsrs	r3, r3, #16
 1123 004a 1B04     		lsls	r3, r3, #16
 1124              	.LVL55:
 607:./FWLIB/src/stm32f10x_can.c ****     default:
 1125              		.loc 1 607 7 is_stmt 1 view .LVU409
ARM GAS  /tmp/ccKET9pn.s 			page 52


 1126 004c E6E7     		b	.L78
 1127              	.L79:
 612:./FWLIB/src/stm32f10x_can.c ****   {
 1128              		.loc 1 612 3 is_stmt 0 view .LVU410
 1129 004e 114A     		ldr	r2, .L88+12
 1130 0050 9342     		cmp	r3, r2
 1131 0052 12D0     		beq	.L85
 1132 0054 02F50032 		add	r2, r2, #131072
 1133 0058 9342     		cmp	r3, r2
 1134 005a 10D0     		beq	.L86
 1135 005c 0C4A     		ldr	r2, .L88+8
 1136 005e 9342     		cmp	r3, r2
 1137 0060 0FD1     		bne	.L87
 627:./FWLIB/src/stm32f10x_can.c ****       break;
 1138              		.loc 1 627 63 view .LVU411
 1139 0062 0120     		movs	r0, #1
 1140              	.LVL56:
 627:./FWLIB/src/stm32f10x_can.c ****       break;
 1141              		.loc 1 627 63 view .LVU412
 1142 0064 7047     		bx	lr
 1143              	.LVL57:
 1144              	.L80:
 597:./FWLIB/src/stm32f10x_can.c ****   {
 1145              		.loc 1 597 3 view .LVU413
 1146 0066 0220     		movs	r0, #2
 1147              	.LVL58:
 597:./FWLIB/src/stm32f10x_can.c ****   {
 1148              		.loc 1 597 3 view .LVU414
 1149 0068 7047     		bx	lr
 1150              	.LVL59:
 1151              	.L81:
 620:./FWLIB/src/stm32f10x_can.c ****       break;
 1152              		.loc 1 620 49 view .LVU415
 1153 006a 0020     		movs	r0, #0
 1154              	.LVL60:
 620:./FWLIB/src/stm32f10x_can.c ****       break;
 1155              		.loc 1 620 49 view .LVU416
 1156 006c 7047     		bx	lr
 1157              	.LVL61:
 1158              	.L82:
 618:./FWLIB/src/stm32f10x_can.c ****       break;
 1159              		.loc 1 618 49 view .LVU417
 1160 006e 0020     		movs	r0, #0
 1161              	.LVL62:
 618:./FWLIB/src/stm32f10x_can.c ****       break;
 1162              		.loc 1 618 49 view .LVU418
 1163 0070 7047     		bx	lr
 1164              	.LVL63:
 1165              	.L83:
 625:./FWLIB/src/stm32f10x_can.c ****       break;
 1166              		.loc 1 625 63 view .LVU419
 1167 0072 0120     		movs	r0, #1
 1168              	.LVL64:
 625:./FWLIB/src/stm32f10x_can.c ****       break;
 1169              		.loc 1 625 63 view .LVU420
 1170 0074 7047     		bx	lr
 1171              	.LVL65:
ARM GAS  /tmp/ccKET9pn.s 			page 53


 1172              	.L84:
 631:./FWLIB/src/stm32f10x_can.c ****       break;
 1173              		.loc 1 631 20 view .LVU421
 1174 0076 0020     		movs	r0, #0
 1175              	.LVL66:
 631:./FWLIB/src/stm32f10x_can.c ****       break;
 1176              		.loc 1 631 20 view .LVU422
 1177 0078 7047     		bx	lr
 1178              	.LVL67:
 1179              	.L85:
 622:./FWLIB/src/stm32f10x_can.c ****       break;
 1180              		.loc 1 622 49 view .LVU423
 1181 007a 0020     		movs	r0, #0
 1182              	.LVL68:
 622:./FWLIB/src/stm32f10x_can.c ****       break;
 1183              		.loc 1 622 49 view .LVU424
 1184 007c 7047     		bx	lr
 1185              	.LVL69:
 1186              	.L86:
 629:./FWLIB/src/stm32f10x_can.c ****       break;
 1187              		.loc 1 629 63 view .LVU425
 1188 007e 0120     		movs	r0, #1
 1189              	.LVL70:
 629:./FWLIB/src/stm32f10x_can.c ****       break;
 1190              		.loc 1 629 63 view .LVU426
 1191 0080 7047     		bx	lr
 1192              	.LVL71:
 1193              	.L87:
 631:./FWLIB/src/stm32f10x_can.c ****       break;
 1194              		.loc 1 631 20 view .LVU427
 1195 0082 0020     		movs	r0, #0
 1196              	.LVL72:
 634:./FWLIB/src/stm32f10x_can.c **** }
 1197              		.loc 1 634 3 is_stmt 1 view .LVU428
 635:./FWLIB/src/stm32f10x_can.c **** 
 1198              		.loc 1 635 1 is_stmt 0 view .LVU429
 1199 0084 7047     		bx	lr
 1200              	.L89:
 1201 0086 00BF     		.align	2
 1202              	.L88:
 1203 0088 00010008 		.word	134217984
 1204 008c 01000004 		.word	67108865
 1205 0090 00030008 		.word	134218496
 1206 0094 00000110 		.word	268500992
 1207              		.cfi_endproc
 1208              	.LFE37:
 1210              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 1211              		.align	1
 1212              		.global	CAN_CancelTransmit
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1217              	CAN_CancelTransmit:
 1218              	.LVL73:
 1219              	.LFB38:
 644:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1220              		.loc 1 644 1 is_stmt 1 view -0
ARM GAS  /tmp/ccKET9pn.s 			page 54


 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              		@ link register save eliminated.
 646:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 1225              		.loc 1 646 3 view .LVU431
 647:./FWLIB/src/stm32f10x_can.c ****   /* abort transmission */
 1226              		.loc 1 647 3 view .LVU432
 649:./FWLIB/src/stm32f10x_can.c ****   {
 1227              		.loc 1 649 3 view .LVU433
 1228 0000 0129     		cmp	r1, #1
 1229 0002 07D0     		beq	.L91
 1230 0004 0229     		cmp	r1, #2
 1231 0006 0AD0     		beq	.L92
 1232 0008 69B9     		cbnz	r1, .L90
 651:./FWLIB/src/stm32f10x_can.c ****       break;
 1233              		.loc 1 651 29 view .LVU434
 651:./FWLIB/src/stm32f10x_can.c ****       break;
 1234              		.loc 1 651 33 is_stmt 0 view .LVU435
 1235 000a 8368     		ldr	r3, [r0, #8]
 651:./FWLIB/src/stm32f10x_can.c ****       break;
 1236              		.loc 1 651 39 view .LVU436
 1237 000c 43F08003 		orr	r3, r3, #128
 1238 0010 8360     		str	r3, [r0, #8]
 652:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 1239              		.loc 1 652 7 is_stmt 1 view .LVU437
 1240 0012 7047     		bx	lr
 1241              	.L91:
 653:./FWLIB/src/stm32f10x_can.c ****       break;
 1242              		.loc 1 653 29 view .LVU438
 653:./FWLIB/src/stm32f10x_can.c ****       break;
 1243              		.loc 1 653 33 is_stmt 0 view .LVU439
 1244 0014 8368     		ldr	r3, [r0, #8]
 653:./FWLIB/src/stm32f10x_can.c ****       break;
 1245              		.loc 1 653 39 view .LVU440
 1246 0016 43F40043 		orr	r3, r3, #32768
 1247 001a 8360     		str	r3, [r0, #8]
 654:./FWLIB/src/stm32f10x_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 1248              		.loc 1 654 7 is_stmt 1 view .LVU441
 1249 001c 7047     		bx	lr
 1250              	.L92:
 655:./FWLIB/src/stm32f10x_can.c ****       break;
 1251              		.loc 1 655 29 view .LVU442
 655:./FWLIB/src/stm32f10x_can.c ****       break;
 1252              		.loc 1 655 33 is_stmt 0 view .LVU443
 1253 001e 8368     		ldr	r3, [r0, #8]
 655:./FWLIB/src/stm32f10x_can.c ****       break;
 1254              		.loc 1 655 39 view .LVU444
 1255 0020 43F40003 		orr	r3, r3, #8388608
 1256 0024 8360     		str	r3, [r0, #8]
 656:./FWLIB/src/stm32f10x_can.c ****     default:
 1257              		.loc 1 656 7 is_stmt 1 view .LVU445
 1258              	.L90:
 660:./FWLIB/src/stm32f10x_can.c **** 
 1259              		.loc 1 660 1 is_stmt 0 view .LVU446
 1260 0026 7047     		bx	lr
 1261              		.cfi_endproc
ARM GAS  /tmp/ccKET9pn.s 			page 55


 1262              	.LFE38:
 1264              		.section	.text.CAN_Receive,"ax",%progbits
 1265              		.align	1
 1266              		.global	CAN_Receive
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1271              	CAN_Receive:
 1272              	.LVL74:
 1273              	.LFB39:
 672:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1274              		.loc 1 672 1 is_stmt 1 view -0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 0, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 672:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1279              		.loc 1 672 1 is_stmt 0 view .LVU448
 1280 0000 10B4     		push	{r4}
 1281              	.LCFI6:
 1282              		.cfi_def_cfa_offset 4
 1283              		.cfi_offset 4, -4
 674:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1284              		.loc 1 674 3 is_stmt 1 view .LVU449
 675:./FWLIB/src/stm32f10x_can.c ****   /* Get the Id */
 1285              		.loc 1 675 3 view .LVU450
 677:./FWLIB/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1286              		.loc 1 677 3 view .LVU451
 677:./FWLIB/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1287              		.loc 1 677 66 is_stmt 0 view .LVU452
 1288 0002 01F11B03 		add	r3, r1, #27
 1289 0006 1B01     		lsls	r3, r3, #4
 1290 0008 C358     		ldr	r3, [r0, r3]
 677:./FWLIB/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1291              		.loc 1 677 34 view .LVU453
 1292 000a 03F00403 		and	r3, r3, #4
 677:./FWLIB/src/stm32f10x_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1293              		.loc 1 677 18 view .LVU454
 1294 000e 1372     		strb	r3, [r2, #8]
 678:./FWLIB/src/stm32f10x_can.c ****   {
 1295              		.loc 1 678 3 is_stmt 1 view .LVU455
 678:./FWLIB/src/stm32f10x_can.c ****   {
 1296              		.loc 1 678 6 is_stmt 0 view .LVU456
 1297 0010 002B     		cmp	r3, #0
 1298 0012 3ED1     		bne	.L95
 680:./FWLIB/src/stm32f10x_can.c ****   }
 1299              		.loc 1 680 5 is_stmt 1 view .LVU457
 680:./FWLIB/src/stm32f10x_can.c ****   }
 1300              		.loc 1 680 78 is_stmt 0 view .LVU458
 1301 0014 01F11B03 		add	r3, r1, #27
 1302 0018 1B01     		lsls	r3, r3, #4
 1303 001a C358     		ldr	r3, [r0, r3]
 680:./FWLIB/src/stm32f10x_can.c ****   }
 1304              		.loc 1 680 83 view .LVU459
 1305 001c 5B0D     		lsrs	r3, r3, #21
 680:./FWLIB/src/stm32f10x_can.c ****   }
 1306              		.loc 1 680 22 view .LVU460
ARM GAS  /tmp/ccKET9pn.s 			page 56


 1307 001e 1360     		str	r3, [r2]
 1308              	.L96:
 687:./FWLIB/src/stm32f10x_can.c ****   /* Get the DLC */
 1309              		.loc 1 687 3 is_stmt 1 view .LVU461
 687:./FWLIB/src/stm32f10x_can.c ****   /* Get the DLC */
 1310              		.loc 1 687 66 is_stmt 0 view .LVU462
 1311 0020 01F11B03 		add	r3, r1, #27
 1312 0024 1C01     		lsls	r4, r3, #4
 1313 0026 00EB0313 		add	r3, r0, r3, lsl #4
 1314 002a 0459     		ldr	r4, [r0, r4]
 687:./FWLIB/src/stm32f10x_can.c ****   /* Get the DLC */
 1315              		.loc 1 687 34 view .LVU463
 1316 002c 04F00204 		and	r4, r4, #2
 687:./FWLIB/src/stm32f10x_can.c ****   /* Get the DLC */
 1317              		.loc 1 687 18 view .LVU464
 1318 0030 5472     		strb	r4, [r2, #9]
 689:./FWLIB/src/stm32f10x_can.c ****   /* Get the FMI */
 1319              		.loc 1 689 3 is_stmt 1 view .LVU465
 689:./FWLIB/src/stm32f10x_can.c ****   /* Get the FMI */
 1320              		.loc 1 689 66 is_stmt 0 view .LVU466
 1321 0032 5C68     		ldr	r4, [r3, #4]
 689:./FWLIB/src/stm32f10x_can.c ****   /* Get the FMI */
 1322              		.loc 1 689 34 view .LVU467
 1323 0034 04F00F04 		and	r4, r4, #15
 689:./FWLIB/src/stm32f10x_can.c ****   /* Get the FMI */
 1324              		.loc 1 689 18 view .LVU468
 1325 0038 9472     		strb	r4, [r2, #10]
 691:./FWLIB/src/stm32f10x_can.c ****   /* Get the data field */
 1326              		.loc 1 691 3 is_stmt 1 view .LVU469
 691:./FWLIB/src/stm32f10x_can.c ****   /* Get the data field */
 1327              		.loc 1 691 67 is_stmt 0 view .LVU470
 1328 003a 5B68     		ldr	r3, [r3, #4]
 691:./FWLIB/src/stm32f10x_can.c ****   /* Get the data field */
 1329              		.loc 1 691 73 view .LVU471
 1330 003c 1B0A     		lsrs	r3, r3, #8
 691:./FWLIB/src/stm32f10x_can.c ****   /* Get the data field */
 1331              		.loc 1 691 18 view .LVU472
 1332 003e D374     		strb	r3, [r2, #19]
 693:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1333              		.loc 1 693 3 is_stmt 1 view .LVU473
 693:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1334              		.loc 1 693 70 is_stmt 0 view .LVU474
 1335 0040 00EB0113 		add	r3, r0, r1, lsl #4
 1336 0044 D3F8B841 		ldr	r4, [r3, #440]
 693:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1337              		.loc 1 693 22 view .LVU475
 1338 0048 D472     		strb	r4, [r2, #11]
 694:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1339              		.loc 1 694 3 is_stmt 1 view .LVU476
 694:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1340              		.loc 1 694 71 is_stmt 0 view .LVU477
 1341 004a D3F8B841 		ldr	r4, [r3, #440]
 694:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1342              		.loc 1 694 77 view .LVU478
 1343 004e 240A     		lsrs	r4, r4, #8
 694:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1344              		.loc 1 694 22 view .LVU479
ARM GAS  /tmp/ccKET9pn.s 			page 57


 1345 0050 1473     		strb	r4, [r2, #12]
 695:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1346              		.loc 1 695 3 is_stmt 1 view .LVU480
 695:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1347              		.loc 1 695 71 is_stmt 0 view .LVU481
 1348 0052 D3F8B841 		ldr	r4, [r3, #440]
 695:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1349              		.loc 1 695 77 view .LVU482
 1350 0056 240C     		lsrs	r4, r4, #16
 695:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1351              		.loc 1 695 22 view .LVU483
 1352 0058 5473     		strb	r4, [r2, #13]
 696:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1353              		.loc 1 696 3 is_stmt 1 view .LVU484
 696:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1354              		.loc 1 696 71 is_stmt 0 view .LVU485
 1355 005a D3F8B841 		ldr	r4, [r3, #440]
 696:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1356              		.loc 1 696 77 view .LVU486
 1357 005e 240E     		lsrs	r4, r4, #24
 696:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1358              		.loc 1 696 22 view .LVU487
 1359 0060 9473     		strb	r4, [r2, #14]
 697:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1360              		.loc 1 697 3 is_stmt 1 view .LVU488
 697:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1361              		.loc 1 697 70 is_stmt 0 view .LVU489
 1362 0062 D3F8BC41 		ldr	r4, [r3, #444]
 697:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1363              		.loc 1 697 22 view .LVU490
 1364 0066 D473     		strb	r4, [r2, #15]
 698:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1365              		.loc 1 698 3 is_stmt 1 view .LVU491
 698:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1366              		.loc 1 698 71 is_stmt 0 view .LVU492
 1367 0068 D3F8BC41 		ldr	r4, [r3, #444]
 698:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1368              		.loc 1 698 77 view .LVU493
 1369 006c 240A     		lsrs	r4, r4, #8
 698:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1370              		.loc 1 698 22 view .LVU494
 1371 006e 1474     		strb	r4, [r2, #16]
 699:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1372              		.loc 1 699 3 is_stmt 1 view .LVU495
 699:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1373              		.loc 1 699 71 is_stmt 0 view .LVU496
 1374 0070 D3F8BC41 		ldr	r4, [r3, #444]
 699:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1375              		.loc 1 699 77 view .LVU497
 1376 0074 4FEA144C 		lsr	ip, r4, #16
 699:./FWLIB/src/stm32f10x_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1377              		.loc 1 699 22 view .LVU498
 1378 0078 82F811C0 		strb	ip, [r2, #17]
 700:./FWLIB/src/stm32f10x_can.c ****   /* Release the FIFO */
 1379              		.loc 1 700 3 is_stmt 1 view .LVU499
 700:./FWLIB/src/stm32f10x_can.c ****   /* Release the FIFO */
 1380              		.loc 1 700 71 is_stmt 0 view .LVU500
ARM GAS  /tmp/ccKET9pn.s 			page 58


 1381 007c D3F8BC31 		ldr	r3, [r3, #444]
 700:./FWLIB/src/stm32f10x_can.c ****   /* Release the FIFO */
 1382              		.loc 1 700 77 view .LVU501
 1383 0080 1B0E     		lsrs	r3, r3, #24
 700:./FWLIB/src/stm32f10x_can.c ****   /* Release the FIFO */
 1384              		.loc 1 700 22 view .LVU502
 1385 0082 9374     		strb	r3, [r2, #18]
 703:./FWLIB/src/stm32f10x_can.c ****   {
 1386              		.loc 1 703 3 is_stmt 1 view .LVU503
 703:./FWLIB/src/stm32f10x_can.c ****   {
 1387              		.loc 1 703 6 is_stmt 0 view .LVU504
 1388 0084 61B9     		cbnz	r1, .L97
 705:./FWLIB/src/stm32f10x_can.c ****   }
 1389              		.loc 1 705 5 is_stmt 1 view .LVU505
 705:./FWLIB/src/stm32f10x_can.c ****   }
 1390              		.loc 1 705 9 is_stmt 0 view .LVU506
 1391 0086 C368     		ldr	r3, [r0, #12]
 705:./FWLIB/src/stm32f10x_can.c ****   }
 1392              		.loc 1 705 16 view .LVU507
 1393 0088 43F02003 		orr	r3, r3, #32
 1394 008c C360     		str	r3, [r0, #12]
 1395              	.L94:
 712:./FWLIB/src/stm32f10x_can.c **** 
 1396              		.loc 1 712 1 view .LVU508
 1397 008e 10BC     		pop	{r4}
 1398              	.LCFI7:
 1399              		.cfi_remember_state
 1400              		.cfi_restore 4
 1401              		.cfi_def_cfa_offset 0
 1402 0090 7047     		bx	lr
 1403              	.L95:
 1404              	.LCFI8:
 1405              		.cfi_restore_state
 684:./FWLIB/src/stm32f10x_can.c ****   }
 1406              		.loc 1 684 5 is_stmt 1 view .LVU509
 684:./FWLIB/src/stm32f10x_can.c ****   }
 1407              		.loc 1 684 78 is_stmt 0 view .LVU510
 1408 0092 01F11B03 		add	r3, r1, #27
 1409 0096 1B01     		lsls	r3, r3, #4
 1410 0098 C358     		ldr	r3, [r0, r3]
 684:./FWLIB/src/stm32f10x_can.c ****   }
 1411              		.loc 1 684 83 view .LVU511
 1412 009a DB08     		lsrs	r3, r3, #3
 684:./FWLIB/src/stm32f10x_can.c ****   }
 1413              		.loc 1 684 22 view .LVU512
 1414 009c 5360     		str	r3, [r2, #4]
 1415 009e BFE7     		b	.L96
 1416              	.L97:
 710:./FWLIB/src/stm32f10x_can.c ****   }
 1417              		.loc 1 710 5 is_stmt 1 view .LVU513
 710:./FWLIB/src/stm32f10x_can.c ****   }
 1418              		.loc 1 710 9 is_stmt 0 view .LVU514
 1419 00a0 0369     		ldr	r3, [r0, #16]
 710:./FWLIB/src/stm32f10x_can.c ****   }
 1420              		.loc 1 710 16 view .LVU515
 1421 00a2 43F02003 		orr	r3, r3, #32
 1422 00a6 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/ccKET9pn.s 			page 59


 712:./FWLIB/src/stm32f10x_can.c **** 
 1423              		.loc 1 712 1 view .LVU516
 1424 00a8 F1E7     		b	.L94
 1425              		.cfi_endproc
 1426              	.LFE39:
 1428              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1429              		.align	1
 1430              		.global	CAN_FIFORelease
 1431              		.syntax unified
 1432              		.thumb
 1433              		.thumb_func
 1435              	CAN_FIFORelease:
 1436              	.LVL75:
 1437              	.LFB40:
 721:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1438              		.loc 1 721 1 is_stmt 1 view -0
 1439              		.cfi_startproc
 1440              		@ args = 0, pretend = 0, frame = 0
 1441              		@ frame_needed = 0, uses_anonymous_args = 0
 1442              		@ link register save eliminated.
 723:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1443              		.loc 1 723 3 view .LVU518
 724:./FWLIB/src/stm32f10x_can.c ****   /* Release FIFO0 */
 1444              		.loc 1 724 3 view .LVU519
 726:./FWLIB/src/stm32f10x_can.c ****   {
 1445              		.loc 1 726 3 view .LVU520
 726:./FWLIB/src/stm32f10x_can.c ****   {
 1446              		.loc 1 726 6 is_stmt 0 view .LVU521
 1447 0000 21B9     		cbnz	r1, .L101
 728:./FWLIB/src/stm32f10x_can.c ****   }
 1448              		.loc 1 728 5 is_stmt 1 view .LVU522
 728:./FWLIB/src/stm32f10x_can.c ****   }
 1449              		.loc 1 728 9 is_stmt 0 view .LVU523
 1450 0002 C368     		ldr	r3, [r0, #12]
 728:./FWLIB/src/stm32f10x_can.c ****   }
 1451              		.loc 1 728 16 view .LVU524
 1452 0004 43F02003 		orr	r3, r3, #32
 1453 0008 C360     		str	r3, [r0, #12]
 1454 000a 7047     		bx	lr
 1455              	.L101:
 733:./FWLIB/src/stm32f10x_can.c ****   }
 1456              		.loc 1 733 5 is_stmt 1 view .LVU525
 733:./FWLIB/src/stm32f10x_can.c ****   }
 1457              		.loc 1 733 9 is_stmt 0 view .LVU526
 1458 000c 0369     		ldr	r3, [r0, #16]
 733:./FWLIB/src/stm32f10x_can.c ****   }
 1459              		.loc 1 733 16 view .LVU527
 1460 000e 43F02003 		orr	r3, r3, #32
 1461 0012 0361     		str	r3, [r0, #16]
 735:./FWLIB/src/stm32f10x_can.c **** 
 1462              		.loc 1 735 1 view .LVU528
 1463 0014 7047     		bx	lr
 1464              		.cfi_endproc
 1465              	.LFE40:
 1467              		.section	.text.CAN_MessagePending,"ax",%progbits
 1468              		.align	1
 1469              		.global	CAN_MessagePending
ARM GAS  /tmp/ccKET9pn.s 			page 60


 1470              		.syntax unified
 1471              		.thumb
 1472              		.thumb_func
 1474              	CAN_MessagePending:
 1475              	.LVL76:
 1476              	.LFB41:
 744:./FWLIB/src/stm32f10x_can.c ****   uint8_t message_pending=0;
 1477              		.loc 1 744 1 is_stmt 1 view -0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 0
 1480              		@ frame_needed = 0, uses_anonymous_args = 0
 1481              		@ link register save eliminated.
 745:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1482              		.loc 1 745 3 view .LVU530
 747:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 1483              		.loc 1 747 3 view .LVU531
 748:./FWLIB/src/stm32f10x_can.c ****   if (FIFONumber == CAN_FIFO0)
 1484              		.loc 1 748 3 view .LVU532
 749:./FWLIB/src/stm32f10x_can.c ****   {
 1485              		.loc 1 749 3 view .LVU533
 749:./FWLIB/src/stm32f10x_can.c ****   {
 1486              		.loc 1 749 6 is_stmt 0 view .LVU534
 1487 0000 19B9     		cbnz	r1, .L104
 751:./FWLIB/src/stm32f10x_can.c ****   }
 1488              		.loc 1 751 5 is_stmt 1 view .LVU535
 751:./FWLIB/src/stm32f10x_can.c ****   }
 1489              		.loc 1 751 37 is_stmt 0 view .LVU536
 1490 0002 C068     		ldr	r0, [r0, #12]
 1491              	.LVL77:
 751:./FWLIB/src/stm32f10x_can.c ****   }
 1492              		.loc 1 751 21 view .LVU537
 1493 0004 00F00300 		and	r0, r0, #3
 1494              	.LVL78:
 751:./FWLIB/src/stm32f10x_can.c ****   }
 1495              		.loc 1 751 21 view .LVU538
 1496 0008 7047     		bx	lr
 1497              	.LVL79:
 1498              	.L104:
 753:./FWLIB/src/stm32f10x_can.c ****   {
 1499              		.loc 1 753 8 is_stmt 1 view .LVU539
 753:./FWLIB/src/stm32f10x_can.c ****   {
 1500              		.loc 1 753 11 is_stmt 0 view .LVU540
 1501 000a 0129     		cmp	r1, #1
 1502 000c 01D0     		beq	.L107
 759:./FWLIB/src/stm32f10x_can.c ****   }
 1503              		.loc 1 759 21 view .LVU541
 1504 000e 0020     		movs	r0, #0
 1505              	.LVL80:
 761:./FWLIB/src/stm32f10x_can.c **** }
 1506              		.loc 1 761 3 is_stmt 1 view .LVU542
 762:./FWLIB/src/stm32f10x_can.c **** 
 1507              		.loc 1 762 1 is_stmt 0 view .LVU543
 1508 0010 7047     		bx	lr
 1509              	.LVL81:
 1510              	.L107:
 755:./FWLIB/src/stm32f10x_can.c ****   }
 1511              		.loc 1 755 5 is_stmt 1 view .LVU544
ARM GAS  /tmp/ccKET9pn.s 			page 61


 755:./FWLIB/src/stm32f10x_can.c ****   }
 1512              		.loc 1 755 37 is_stmt 0 view .LVU545
 1513 0012 0069     		ldr	r0, [r0, #16]
 1514              	.LVL82:
 755:./FWLIB/src/stm32f10x_can.c ****   }
 1515              		.loc 1 755 21 view .LVU546
 1516 0014 00F00300 		and	r0, r0, #3
 1517              	.LVL83:
 755:./FWLIB/src/stm32f10x_can.c ****   }
 1518              		.loc 1 755 21 view .LVU547
 1519 0018 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE41:
 1523              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1524              		.align	1
 1525              		.global	CAN_OperatingModeRequest
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1530              	CAN_OperatingModeRequest:
 1531              	.LVL84:
 1532              	.LFB42:
 775:./FWLIB/src/stm32f10x_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1533              		.loc 1 775 1 is_stmt 1 view -0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 776:./FWLIB/src/stm32f10x_can.c ****   
 1538              		.loc 1 776 3 view .LVU549
 779:./FWLIB/src/stm32f10x_can.c **** 
 1539              		.loc 1 779 3 view .LVU550
 782:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 1540              		.loc 1 782 3 view .LVU551
 783:./FWLIB/src/stm32f10x_can.c **** 
 1541              		.loc 1 783 3 view .LVU552
 785:./FWLIB/src/stm32f10x_can.c ****   {
 1542              		.loc 1 785 3 view .LVU553
 785:./FWLIB/src/stm32f10x_can.c ****   {
 1543              		.loc 1 785 6 is_stmt 0 view .LVU554
 1544 0000 8C46     		mov	ip, r1
 1545 0002 B1B9     		cbnz	r1, .L109
 788:./FWLIB/src/stm32f10x_can.c **** 
 1546              		.loc 1 788 5 is_stmt 1 view .LVU555
 788:./FWLIB/src/stm32f10x_can.c **** 
 1547              		.loc 1 788 33 is_stmt 0 view .LVU556
 1548 0004 0368     		ldr	r3, [r0]
 788:./FWLIB/src/stm32f10x_can.c **** 
 1549              		.loc 1 788 17 view .LVU557
 1550 0006 23F00303 		bic	r3, r3, #3
 1551 000a 43F00103 		orr	r3, r3, #1
 788:./FWLIB/src/stm32f10x_can.c **** 
 1552              		.loc 1 788 15 view .LVU558
 1553 000e 0360     		str	r3, [r0]
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1554              		.loc 1 791 5 is_stmt 1 view .LVU559
 779:./FWLIB/src/stm32f10x_can.c **** 
ARM GAS  /tmp/ccKET9pn.s 			page 62


 1555              		.loc 1 779 12 is_stmt 0 view .LVU560
 1556 0010 4FF6FF72 		movw	r2, #65535
 1557              	.LVL85:
 1558              	.L110:
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1559              		.loc 1 791 58 is_stmt 1 view .LVU561
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1560              		.loc 1 791 18 is_stmt 0 view .LVU562
 1561 0014 4368     		ldr	r3, [r0, #4]
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1562              		.loc 1 791 24 view .LVU563
 1563 0016 03F00303 		and	r3, r3, #3
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1564              		.loc 1 791 58 view .LVU564
 1565 001a 012B     		cmp	r3, #1
 1566 001c 02D0     		beq	.L111
 791:./FWLIB/src/stm32f10x_can.c ****     {
 1567              		.loc 1 791 58 discriminator 1 view .LVU565
 1568 001e 0AB1     		cbz	r2, .L111
 793:./FWLIB/src/stm32f10x_can.c ****     }
 1569              		.loc 1 793 7 is_stmt 1 view .LVU566
 793:./FWLIB/src/stm32f10x_can.c ****     }
 1570              		.loc 1 793 14 is_stmt 0 view .LVU567
 1571 0020 013A     		subs	r2, r2, #1
 1572              	.LVL86:
 793:./FWLIB/src/stm32f10x_can.c ****     }
 1573              		.loc 1 793 14 view .LVU568
 1574 0022 F7E7     		b	.L110
 1575              	.LVL87:
 1576              	.L111:
 795:./FWLIB/src/stm32f10x_can.c ****     {
 1577              		.loc 1 795 5 is_stmt 1 view .LVU569
 795:./FWLIB/src/stm32f10x_can.c ****     {
 1578              		.loc 1 795 14 is_stmt 0 view .LVU570
 1579 0024 4368     		ldr	r3, [r0, #4]
 795:./FWLIB/src/stm32f10x_can.c ****     {
 1580              		.loc 1 795 20 view .LVU571
 1581 0026 03F00303 		and	r3, r3, #3
 795:./FWLIB/src/stm32f10x_can.c ****     {
 1582              		.loc 1 795 8 view .LVU572
 1583 002a 012B     		cmp	r3, #1
 1584 002c 33D0     		beq	.L121
 797:./FWLIB/src/stm32f10x_can.c ****     }
 1585              		.loc 1 797 14 view .LVU573
 1586 002e 6046     		mov	r0, ip
 1587              	.LVL88:
 797:./FWLIB/src/stm32f10x_can.c ****     }
 1588              		.loc 1 797 14 view .LVU574
 1589 0030 7047     		bx	lr
 1590              	.LVL89:
 1591              	.L109:
 804:./FWLIB/src/stm32f10x_can.c ****   {
 1592              		.loc 1 804 9 is_stmt 1 view .LVU575
 804:./FWLIB/src/stm32f10x_can.c ****   {
 1593              		.loc 1 804 12 is_stmt 0 view .LVU576
 1594 0032 0129     		cmp	r1, #1
 1595 0034 03D0     		beq	.L125
ARM GAS  /tmp/ccKET9pn.s 			page 63


 823:./FWLIB/src/stm32f10x_can.c ****   {
 1596              		.loc 1 823 9 is_stmt 1 view .LVU577
 823:./FWLIB/src/stm32f10x_can.c ****   {
 1597              		.loc 1 823 12 is_stmt 0 view .LVU578
 1598 0036 0229     		cmp	r1, #2
 1599 0038 15D0     		beq	.L126
 844:./FWLIB/src/stm32f10x_can.c ****   }
 1600              		.loc 1 844 12 view .LVU579
 1601 003a 0020     		movs	r0, #0
 1602              	.LVL90:
 844:./FWLIB/src/stm32f10x_can.c ****   }
 1603              		.loc 1 844 12 view .LVU580
 1604 003c 7047     		bx	lr
 1605              	.LVL91:
 1606              	.L125:
 807:./FWLIB/src/stm32f10x_can.c **** 
 1607              		.loc 1 807 5 is_stmt 1 view .LVU581
 807:./FWLIB/src/stm32f10x_can.c **** 
 1608              		.loc 1 807 9 is_stmt 0 view .LVU582
 1609 003e 0368     		ldr	r3, [r0]
 807:./FWLIB/src/stm32f10x_can.c **** 
 1610              		.loc 1 807 15 view .LVU583
 1611 0040 23F00303 		bic	r3, r3, #3
 1612 0044 0360     		str	r3, [r0]
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1613              		.loc 1 810 5 is_stmt 1 view .LVU584
 779:./FWLIB/src/stm32f10x_can.c **** 
 1614              		.loc 1 779 12 is_stmt 0 view .LVU585
 1615 0046 4FF6FF73 		movw	r3, #65535
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1616              		.loc 1 810 11 view .LVU586
 1617 004a 00E0     		b	.L115
 1618              	.LVL92:
 1619              	.L117:
 812:./FWLIB/src/stm32f10x_can.c ****     }
 1620              		.loc 1 812 7 is_stmt 1 view .LVU587
 812:./FWLIB/src/stm32f10x_can.c ****     }
 1621              		.loc 1 812 14 is_stmt 0 view .LVU588
 1622 004c 013B     		subs	r3, r3, #1
 1623              	.LVL93:
 1624              	.L115:
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1625              		.loc 1 810 47 is_stmt 1 view .LVU589
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1626              		.loc 1 810 18 is_stmt 0 view .LVU590
 1627 004e 4268     		ldr	r2, [r0, #4]
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1628              		.loc 1 810 47 view .LVU591
 1629 0050 12F0030F 		tst	r2, #3
 1630 0054 01D0     		beq	.L116
 810:./FWLIB/src/stm32f10x_can.c ****     {
 1631              		.loc 1 810 47 discriminator 1 view .LVU592
 1632 0056 002B     		cmp	r3, #0
 1633 0058 F8D1     		bne	.L117
 1634              	.L116:
 814:./FWLIB/src/stm32f10x_can.c ****     {
 1635              		.loc 1 814 5 is_stmt 1 view .LVU593
ARM GAS  /tmp/ccKET9pn.s 			page 64


 814:./FWLIB/src/stm32f10x_can.c ****     {
 1636              		.loc 1 814 14 is_stmt 0 view .LVU594
 1637 005a 4368     		ldr	r3, [r0, #4]
 1638              	.LVL94:
 814:./FWLIB/src/stm32f10x_can.c ****     {
 1639              		.loc 1 814 8 view .LVU595
 1640 005c 13F0030F 		tst	r3, #3
 1641 0060 1BD0     		beq	.L122
 816:./FWLIB/src/stm32f10x_can.c ****     }
 1642              		.loc 1 816 14 view .LVU596
 1643 0062 0020     		movs	r0, #0
 1644              	.LVL95:
 816:./FWLIB/src/stm32f10x_can.c ****     }
 1645              		.loc 1 816 14 view .LVU597
 1646 0064 7047     		bx	lr
 1647              	.LVL96:
 1648              	.L126:
 826:./FWLIB/src/stm32f10x_can.c **** 
 1649              		.loc 1 826 5 is_stmt 1 view .LVU598
 826:./FWLIB/src/stm32f10x_can.c **** 
 1650              		.loc 1 826 33 is_stmt 0 view .LVU599
 1651 0066 0368     		ldr	r3, [r0]
 826:./FWLIB/src/stm32f10x_can.c **** 
 1652              		.loc 1 826 17 view .LVU600
 1653 0068 23F00303 		bic	r3, r3, #3
 1654 006c 43F00203 		orr	r3, r3, #2
 826:./FWLIB/src/stm32f10x_can.c **** 
 1655              		.loc 1 826 15 view .LVU601
 1656 0070 0360     		str	r3, [r0]
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1657              		.loc 1 829 5 is_stmt 1 view .LVU602
 779:./FWLIB/src/stm32f10x_can.c **** 
 1658              		.loc 1 779 12 is_stmt 0 view .LVU603
 1659 0072 4FF6FF72 		movw	r2, #65535
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1660              		.loc 1 829 11 view .LVU604
 1661 0076 00E0     		b	.L118
 1662              	.LVL97:
 1663              	.L120:
 831:./FWLIB/src/stm32f10x_can.c ****     }
 1664              		.loc 1 831 7 is_stmt 1 view .LVU605
 831:./FWLIB/src/stm32f10x_can.c ****     }
 1665              		.loc 1 831 14 is_stmt 0 view .LVU606
 1666 0078 013A     		subs	r2, r2, #1
 1667              	.LVL98:
 1668              	.L118:
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1669              		.loc 1 829 58 is_stmt 1 view .LVU607
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1670              		.loc 1 829 18 is_stmt 0 view .LVU608
 1671 007a 4368     		ldr	r3, [r0, #4]
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1672              		.loc 1 829 24 view .LVU609
 1673 007c 03F00303 		and	r3, r3, #3
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1674              		.loc 1 829 58 view .LVU610
 1675 0080 022B     		cmp	r3, #2
ARM GAS  /tmp/ccKET9pn.s 			page 65


 1676 0082 01D0     		beq	.L119
 829:./FWLIB/src/stm32f10x_can.c ****     {
 1677              		.loc 1 829 58 discriminator 1 view .LVU611
 1678 0084 002A     		cmp	r2, #0
 1679 0086 F7D1     		bne	.L120
 1680              	.L119:
 833:./FWLIB/src/stm32f10x_can.c ****     {
 1681              		.loc 1 833 5 is_stmt 1 view .LVU612
 833:./FWLIB/src/stm32f10x_can.c ****     {
 1682              		.loc 1 833 14 is_stmt 0 view .LVU613
 1683 0088 4368     		ldr	r3, [r0, #4]
 833:./FWLIB/src/stm32f10x_can.c ****     {
 1684              		.loc 1 833 20 view .LVU614
 1685 008a 03F00303 		and	r3, r3, #3
 833:./FWLIB/src/stm32f10x_can.c ****     {
 1686              		.loc 1 833 8 view .LVU615
 1687 008e 022B     		cmp	r3, #2
 1688 0090 05D0     		beq	.L124
 835:./FWLIB/src/stm32f10x_can.c ****     }
 1689              		.loc 1 835 14 view .LVU616
 1690 0092 0020     		movs	r0, #0
 1691              	.LVL99:
 835:./FWLIB/src/stm32f10x_can.c ****     }
 1692              		.loc 1 835 14 view .LVU617
 1693 0094 7047     		bx	lr
 1694              	.LVL100:
 1695              	.L121:
 801:./FWLIB/src/stm32f10x_can.c ****     }
 1696              		.loc 1 801 14 view .LVU618
 1697 0096 0120     		movs	r0, #1
 1698              	.LVL101:
 801:./FWLIB/src/stm32f10x_can.c ****     }
 1699              		.loc 1 801 14 view .LVU619
 1700 0098 7047     		bx	lr
 1701              	.LVL102:
 1702              	.L122:
 820:./FWLIB/src/stm32f10x_can.c ****     }
 1703              		.loc 1 820 14 view .LVU620
 1704 009a 6046     		mov	r0, ip
 1705              	.LVL103:
 820:./FWLIB/src/stm32f10x_can.c ****     }
 1706              		.loc 1 820 14 view .LVU621
 1707 009c 7047     		bx	lr
 1708              	.LVL104:
 1709              	.L124:
 839:./FWLIB/src/stm32f10x_can.c ****     }
 1710              		.loc 1 839 14 view .LVU622
 1711 009e 0120     		movs	r0, #1
 1712              	.LVL105:
 847:./FWLIB/src/stm32f10x_can.c **** }
 1713              		.loc 1 847 3 is_stmt 1 view .LVU623
 848:./FWLIB/src/stm32f10x_can.c **** 
 1714              		.loc 1 848 1 is_stmt 0 view .LVU624
 1715 00a0 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE42:
 1719              		.section	.text.CAN_Sleep,"ax",%progbits
ARM GAS  /tmp/ccKET9pn.s 			page 66


 1720              		.align	1
 1721              		.global	CAN_Sleep
 1722              		.syntax unified
 1723              		.thumb
 1724              		.thumb_func
 1726              	CAN_Sleep:
 1727              	.LVL106:
 1728              	.LFB43:
 857:./FWLIB/src/stm32f10x_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1729              		.loc 1 857 1 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 858:./FWLIB/src/stm32f10x_can.c ****   
 1734              		.loc 1 858 3 view .LVU626
 861:./FWLIB/src/stm32f10x_can.c ****     
 1735              		.loc 1 861 3 view .LVU627
 864:./FWLIB/src/stm32f10x_can.c ****    
 1736              		.loc 1 864 4 view .LVU628
 864:./FWLIB/src/stm32f10x_can.c ****    
 1737              		.loc 1 864 23 is_stmt 0 view .LVU629
 1738 0000 0368     		ldr	r3, [r0]
 864:./FWLIB/src/stm32f10x_can.c ****    
 1739              		.loc 1 864 69 view .LVU630
 1740 0002 23F00303 		bic	r3, r3, #3
 1741 0006 43F00203 		orr	r3, r3, #2
 864:./FWLIB/src/stm32f10x_can.c ****    
 1742              		.loc 1 864 14 view .LVU631
 1743 000a 0360     		str	r3, [r0]
 867:./FWLIB/src/stm32f10x_can.c ****   {
 1744              		.loc 1 867 3 is_stmt 1 view .LVU632
 867:./FWLIB/src/stm32f10x_can.c ****   {
 1745              		.loc 1 867 12 is_stmt 0 view .LVU633
 1746 000c 4368     		ldr	r3, [r0, #4]
 867:./FWLIB/src/stm32f10x_can.c ****   {
 1747              		.loc 1 867 18 view .LVU634
 1748 000e 03F00303 		and	r3, r3, #3
 867:./FWLIB/src/stm32f10x_can.c ****   {
 1749              		.loc 1 867 6 view .LVU635
 1750 0012 022B     		cmp	r3, #2
 1751 0014 01D0     		beq	.L129
 858:./FWLIB/src/stm32f10x_can.c ****   
 1752              		.loc 1 858 11 view .LVU636
 1753 0016 0020     		movs	r0, #0
 1754              	.LVL107:
 858:./FWLIB/src/stm32f10x_can.c ****   
 1755              		.loc 1 858 11 view .LVU637
 1756 0018 7047     		bx	lr
 1757              	.LVL108:
 1758              	.L129:
 870:./FWLIB/src/stm32f10x_can.c ****   }
 1759              		.loc 1 870 17 view .LVU638
 1760 001a 0120     		movs	r0, #1
 1761              	.LVL109:
 873:./FWLIB/src/stm32f10x_can.c **** }
 1762              		.loc 1 873 4 is_stmt 1 view .LVU639
ARM GAS  /tmp/ccKET9pn.s 			page 67


 874:./FWLIB/src/stm32f10x_can.c **** 
 1763              		.loc 1 874 1 is_stmt 0 view .LVU640
 1764 001c 7047     		bx	lr
 1765              		.cfi_endproc
 1766              	.LFE43:
 1768              		.section	.text.CAN_WakeUp,"ax",%progbits
 1769              		.align	1
 1770              		.global	CAN_WakeUp
 1771              		.syntax unified
 1772              		.thumb
 1773              		.thumb_func
 1775              	CAN_WakeUp:
 1776              	.LVL110:
 1777              	.LFB44:
 883:./FWLIB/src/stm32f10x_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 1778              		.loc 1 883 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
 884:./FWLIB/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1783              		.loc 1 884 3 view .LVU642
 885:./FWLIB/src/stm32f10x_can.c ****   
 1784              		.loc 1 885 3 view .LVU643
 888:./FWLIB/src/stm32f10x_can.c ****     
 1785              		.loc 1 888 3 view .LVU644
 891:./FWLIB/src/stm32f10x_can.c ****     
 1786              		.loc 1 891 3 view .LVU645
 891:./FWLIB/src/stm32f10x_can.c ****     
 1787              		.loc 1 891 7 is_stmt 0 view .LVU646
 1788 0000 0368     		ldr	r3, [r0]
 891:./FWLIB/src/stm32f10x_can.c ****     
 1789              		.loc 1 891 13 view .LVU647
 1790 0002 23F00203 		bic	r3, r3, #2
 1791 0006 0360     		str	r3, [r0]
 894:./FWLIB/src/stm32f10x_can.c ****   {
 1792              		.loc 1 894 3 is_stmt 1 view .LVU648
 884:./FWLIB/src/stm32f10x_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 1793              		.loc 1 884 12 is_stmt 0 view .LVU649
 1794 0008 4FF6FF73 		movw	r3, #65535
 1795              	.LVL111:
 1796              	.L131:
 894:./FWLIB/src/stm32f10x_can.c ****   {
 1797              		.loc 1 894 53 is_stmt 1 view .LVU650
 894:./FWLIB/src/stm32f10x_can.c ****   {
 1798              		.loc 1 894 15 is_stmt 0 view .LVU651
 1799 000c 4268     		ldr	r2, [r0, #4]
 894:./FWLIB/src/stm32f10x_can.c ****   {
 1800              		.loc 1 894 53 view .LVU652
 1801 000e 12F0020F 		tst	r2, #2
 1802 0012 02D0     		beq	.L132
 894:./FWLIB/src/stm32f10x_can.c ****   {
 1803              		.loc 1 894 53 discriminator 1 view .LVU653
 1804 0014 0BB1     		cbz	r3, .L132
 896:./FWLIB/src/stm32f10x_can.c ****   }
 1805              		.loc 1 896 4 is_stmt 1 view .LVU654
 896:./FWLIB/src/stm32f10x_can.c ****   }
ARM GAS  /tmp/ccKET9pn.s 			page 68


 1806              		.loc 1 896 13 is_stmt 0 view .LVU655
 1807 0016 013B     		subs	r3, r3, #1
 1808              	.LVL112:
 896:./FWLIB/src/stm32f10x_can.c ****   }
 1809              		.loc 1 896 13 view .LVU656
 1810 0018 F8E7     		b	.L131
 1811              	.LVL113:
 1812              	.L132:
 898:./FWLIB/src/stm32f10x_can.c ****   {
 1813              		.loc 1 898 3 is_stmt 1 view .LVU657
 898:./FWLIB/src/stm32f10x_can.c ****   {
 1814              		.loc 1 898 11 is_stmt 0 view .LVU658
 1815 001a 4368     		ldr	r3, [r0, #4]
 1816              	.LVL114:
 898:./FWLIB/src/stm32f10x_can.c ****   {
 1817              		.loc 1 898 5 view .LVU659
 1818 001c 13F0020F 		tst	r3, #2
 1819 0020 01D0     		beq	.L135
 885:./FWLIB/src/stm32f10x_can.c ****   
 1820              		.loc 1 885 11 view .LVU660
 1821 0022 0020     		movs	r0, #0
 1822              	.LVL115:
 885:./FWLIB/src/stm32f10x_can.c ****   
 1823              		.loc 1 885 11 view .LVU661
 1824 0024 7047     		bx	lr
 1825              	.LVL116:
 1826              	.L135:
 901:./FWLIB/src/stm32f10x_can.c ****   }
 1827              		.loc 1 901 18 view .LVU662
 1828 0026 0120     		movs	r0, #1
 1829              	.LVL117:
 904:./FWLIB/src/stm32f10x_can.c **** }
 1830              		.loc 1 904 3 is_stmt 1 view .LVU663
 905:./FWLIB/src/stm32f10x_can.c **** 
 1831              		.loc 1 905 1 is_stmt 0 view .LVU664
 1832 0028 7047     		bx	lr
 1833              		.cfi_endproc
 1834              	.LFE44:
 1836              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1837              		.align	1
 1838              		.global	CAN_GetLastErrorCode
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1843              	CAN_GetLastErrorCode:
 1844              	.LVL118:
 1845              	.LFB45:
 923:./FWLIB/src/stm32f10x_can.c ****   uint8_t errorcode=0;
 1846              		.loc 1 923 1 is_stmt 1 view -0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              		@ link register save eliminated.
 924:./FWLIB/src/stm32f10x_can.c ****   
 1851              		.loc 1 924 3 view .LVU666
 927:./FWLIB/src/stm32f10x_can.c ****   
 1852              		.loc 1 927 3 view .LVU667
ARM GAS  /tmp/ccKET9pn.s 			page 69


 930:./FWLIB/src/stm32f10x_can.c ****   
 1853              		.loc 1 930 3 view .LVU668
 930:./FWLIB/src/stm32f10x_can.c ****   
 1854              		.loc 1 930 30 is_stmt 0 view .LVU669
 1855 0000 8069     		ldr	r0, [r0, #24]
 1856              	.LVL119:
 933:./FWLIB/src/stm32f10x_can.c **** }
 1857              		.loc 1 933 3 is_stmt 1 view .LVU670
 934:./FWLIB/src/stm32f10x_can.c **** /**
 1858              		.loc 1 934 1 is_stmt 0 view .LVU671
 1859 0002 00F07000 		and	r0, r0, #112
 1860              	.LVL120:
 934:./FWLIB/src/stm32f10x_can.c **** /**
 1861              		.loc 1 934 1 view .LVU672
 1862 0006 7047     		bx	lr
 1863              		.cfi_endproc
 1864              	.LFE45:
 1866              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1867              		.align	1
 1868              		.global	CAN_GetReceiveErrorCounter
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1873              	CAN_GetReceiveErrorCounter:
 1874              	.LVL121:
 1875              	.LFB46:
 947:./FWLIB/src/stm32f10x_can.c ****   uint8_t counter=0;
 1876              		.loc 1 947 1 is_stmt 1 view -0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 948:./FWLIB/src/stm32f10x_can.c ****   
 1881              		.loc 1 948 3 view .LVU674
 951:./FWLIB/src/stm32f10x_can.c ****   
 1882              		.loc 1 951 3 view .LVU675
 954:./FWLIB/src/stm32f10x_can.c ****   
 1883              		.loc 1 954 3 view .LVU676
 954:./FWLIB/src/stm32f10x_can.c ****   
 1884              		.loc 1 954 28 is_stmt 0 view .LVU677
 1885 0000 8069     		ldr	r0, [r0, #24]
 1886              	.LVL122:
 957:./FWLIB/src/stm32f10x_can.c **** }
 1887              		.loc 1 957 3 is_stmt 1 view .LVU678
 958:./FWLIB/src/stm32f10x_can.c **** 
 1888              		.loc 1 958 1 is_stmt 0 view .LVU679
 1889 0002 000E     		lsrs	r0, r0, #24
 1890              	.LVL123:
 958:./FWLIB/src/stm32f10x_can.c **** 
 1891              		.loc 1 958 1 view .LVU680
 1892 0004 7047     		bx	lr
 1893              		.cfi_endproc
 1894              	.LFE46:
 1896              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1897              		.align	1
 1898              		.global	CAN_GetLSBTransmitErrorCounter
 1899              		.syntax unified
ARM GAS  /tmp/ccKET9pn.s 			page 70


 1900              		.thumb
 1901              		.thumb_func
 1903              	CAN_GetLSBTransmitErrorCounter:
 1904              	.LVL124:
 1905              	.LFB47:
 967:./FWLIB/src/stm32f10x_can.c ****   uint8_t counter=0;
 1906              		.loc 1 967 1 is_stmt 1 view -0
 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 968:./FWLIB/src/stm32f10x_can.c ****   
 1911              		.loc 1 968 3 view .LVU682
 971:./FWLIB/src/stm32f10x_can.c ****   
 1912              		.loc 1 971 3 view .LVU683
 974:./FWLIB/src/stm32f10x_can.c ****   
 1913              		.loc 1 974 3 view .LVU684
 974:./FWLIB/src/stm32f10x_can.c ****   
 1914              		.loc 1 974 28 is_stmt 0 view .LVU685
 1915 0000 8069     		ldr	r0, [r0, #24]
 1916              	.LVL125:
 977:./FWLIB/src/stm32f10x_can.c **** }
 1917              		.loc 1 977 3 is_stmt 1 view .LVU686
 978:./FWLIB/src/stm32f10x_can.c **** 
 1918              		.loc 1 978 1 is_stmt 0 view .LVU687
 1919 0002 C0F30740 		ubfx	r0, r0, #16, #8
 1920              	.LVL126:
 978:./FWLIB/src/stm32f10x_can.c **** 
 1921              		.loc 1 978 1 view .LVU688
 1922 0006 7047     		bx	lr
 1923              		.cfi_endproc
 1924              	.LFE47:
 1926              		.section	.text.CAN_ITConfig,"ax",%progbits
 1927              		.align	1
 1928              		.global	CAN_ITConfig
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1933              	CAN_ITConfig:
 1934              	.LVL127:
 1935              	.LFB48:
1004:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 1936              		.loc 1 1004 1 is_stmt 1 view -0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 0
 1939              		@ frame_needed = 0, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
1006:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 1941              		.loc 1 1006 3 view .LVU690
1007:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1942              		.loc 1 1007 3 view .LVU691
1008:./FWLIB/src/stm32f10x_can.c **** 
 1943              		.loc 1 1008 3 view .LVU692
1010:./FWLIB/src/stm32f10x_can.c ****   {
 1944              		.loc 1 1010 3 view .LVU693
1010:./FWLIB/src/stm32f10x_can.c ****   {
 1945              		.loc 1 1010 6 is_stmt 0 view .LVU694
ARM GAS  /tmp/ccKET9pn.s 			page 71


 1946 0000 1AB1     		cbz	r2, .L140
1013:./FWLIB/src/stm32f10x_can.c ****   }
 1947              		.loc 1 1013 5 is_stmt 1 view .LVU695
1013:./FWLIB/src/stm32f10x_can.c ****   }
 1948              		.loc 1 1013 9 is_stmt 0 view .LVU696
 1949 0002 4369     		ldr	r3, [r0, #20]
1013:./FWLIB/src/stm32f10x_can.c ****   }
 1950              		.loc 1 1013 15 view .LVU697
 1951 0004 0B43     		orrs	r3, r3, r1
 1952 0006 4361     		str	r3, [r0, #20]
 1953 0008 7047     		bx	lr
 1954              	.L140:
1018:./FWLIB/src/stm32f10x_can.c ****   }
 1955              		.loc 1 1018 5 is_stmt 1 view .LVU698
1018:./FWLIB/src/stm32f10x_can.c ****   }
 1956              		.loc 1 1018 9 is_stmt 0 view .LVU699
 1957 000a 4369     		ldr	r3, [r0, #20]
1018:./FWLIB/src/stm32f10x_can.c ****   }
 1958              		.loc 1 1018 15 view .LVU700
 1959 000c 23EA0103 		bic	r3, r3, r1
 1960 0010 4361     		str	r3, [r0, #20]
1020:./FWLIB/src/stm32f10x_can.c **** /**
 1961              		.loc 1 1020 1 view .LVU701
 1962 0012 7047     		bx	lr
 1963              		.cfi_endproc
 1964              	.LFE48:
 1966              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1967              		.align	1
 1968              		.global	CAN_GetFlagStatus
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1973              	CAN_GetFlagStatus:
 1974              	.LVL128:
 1975              	.LFB49:
1044:./FWLIB/src/stm32f10x_can.c ****   FlagStatus bitstatus = RESET;
 1976              		.loc 1 1044 1 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              		@ link register save eliminated.
1045:./FWLIB/src/stm32f10x_can.c ****   
 1981              		.loc 1 1045 3 view .LVU703
1048:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
 1982              		.loc 1 1048 3 view .LVU704
1049:./FWLIB/src/stm32f10x_can.c ****   
 1983              		.loc 1 1049 3 view .LVU705
1052:./FWLIB/src/stm32f10x_can.c ****   { 
 1984              		.loc 1 1052 3 view .LVU706
1052:./FWLIB/src/stm32f10x_can.c ****   { 
 1985              		.loc 1 1052 5 is_stmt 0 view .LVU707
 1986 0000 11F4700F 		tst	r1, #15728640
 1987 0004 06D0     		beq	.L143
1055:./FWLIB/src/stm32f10x_can.c ****     { 
 1988              		.loc 1 1055 5 is_stmt 1 view .LVU708
1055:./FWLIB/src/stm32f10x_can.c ****     { 
 1989              		.loc 1 1055 14 is_stmt 0 view .LVU709
ARM GAS  /tmp/ccKET9pn.s 			page 72


 1990 0006 8369     		ldr	r3, [r0, #24]
1055:./FWLIB/src/stm32f10x_can.c ****     { 
 1991              		.loc 1 1055 20 view .LVU710
 1992 0008 0B40     		ands	r3, r3, r1
 1993 000a C3F31303 		ubfx	r3, r3, #0, #20
1055:./FWLIB/src/stm32f10x_can.c ****     { 
 1994              		.loc 1 1055 8 view .LVU711
 1995 000e 33B3     		cbz	r3, .L148
1058:./FWLIB/src/stm32f10x_can.c ****     }
 1996              		.loc 1 1058 17 view .LVU712
 1997 0010 0120     		movs	r0, #1
 1998              	.LVL129:
1058:./FWLIB/src/stm32f10x_can.c ****     }
 1999              		.loc 1 1058 17 view .LVU713
 2000 0012 7047     		bx	lr
 2001              	.LVL130:
 2002              	.L143:
1066:./FWLIB/src/stm32f10x_can.c ****   { 
 2003              		.loc 1 1066 8 is_stmt 1 view .LVU714
1066:./FWLIB/src/stm32f10x_can.c ****   { 
 2004              		.loc 1 1066 10 is_stmt 0 view .LVU715
 2005 0014 11F0807F 		tst	r1, #16777216
 2006 0018 06D0     		beq	.L145
1069:./FWLIB/src/stm32f10x_can.c ****     { 
 2007              		.loc 1 1069 5 is_stmt 1 view .LVU716
1069:./FWLIB/src/stm32f10x_can.c ****     { 
 2008              		.loc 1 1069 14 is_stmt 0 view .LVU717
 2009 001a 4368     		ldr	r3, [r0, #4]
1069:./FWLIB/src/stm32f10x_can.c ****     { 
 2010              		.loc 1 1069 20 view .LVU718
 2011 001c 0B40     		ands	r3, r3, r1
 2012 001e C3F31303 		ubfx	r3, r3, #0, #20
1069:./FWLIB/src/stm32f10x_can.c ****     { 
 2013              		.loc 1 1069 8 view .LVU719
 2014 0022 F3B1     		cbz	r3, .L149
1072:./FWLIB/src/stm32f10x_can.c ****     }
 2015              		.loc 1 1072 17 view .LVU720
 2016 0024 0120     		movs	r0, #1
 2017              	.LVL131:
1072:./FWLIB/src/stm32f10x_can.c ****     }
 2018              		.loc 1 1072 17 view .LVU721
 2019 0026 7047     		bx	lr
 2020              	.LVL132:
 2021              	.L145:
1080:./FWLIB/src/stm32f10x_can.c ****   { 
 2022              		.loc 1 1080 8 is_stmt 1 view .LVU722
1080:./FWLIB/src/stm32f10x_can.c ****   { 
 2023              		.loc 1 1080 10 is_stmt 0 view .LVU723
 2024 0028 11F0006F 		tst	r1, #134217728
 2025 002c 06D0     		beq	.L146
1083:./FWLIB/src/stm32f10x_can.c ****     { 
 2026              		.loc 1 1083 5 is_stmt 1 view .LVU724
1083:./FWLIB/src/stm32f10x_can.c ****     { 
 2027              		.loc 1 1083 14 is_stmt 0 view .LVU725
 2028 002e 8368     		ldr	r3, [r0, #8]
1083:./FWLIB/src/stm32f10x_can.c ****     { 
 2029              		.loc 1 1083 20 view .LVU726
ARM GAS  /tmp/ccKET9pn.s 			page 73


 2030 0030 0B40     		ands	r3, r3, r1
 2031 0032 C3F31303 		ubfx	r3, r3, #0, #20
1083:./FWLIB/src/stm32f10x_can.c ****     { 
 2032              		.loc 1 1083 8 view .LVU727
 2033 0036 B3B1     		cbz	r3, .L150
1086:./FWLIB/src/stm32f10x_can.c ****     }
 2034              		.loc 1 1086 17 view .LVU728
 2035 0038 0120     		movs	r0, #1
 2036              	.LVL133:
1086:./FWLIB/src/stm32f10x_can.c ****     }
 2037              		.loc 1 1086 17 view .LVU729
 2038 003a 7047     		bx	lr
 2039              	.LVL134:
 2040              	.L146:
1094:./FWLIB/src/stm32f10x_can.c ****   { 
 2041              		.loc 1 1094 8 is_stmt 1 view .LVU730
1094:./FWLIB/src/stm32f10x_can.c ****   { 
 2042              		.loc 1 1094 10 is_stmt 0 view .LVU731
 2043 003c 11F0007F 		tst	r1, #33554432
 2044 0040 06D0     		beq	.L147
1097:./FWLIB/src/stm32f10x_can.c ****     { 
 2045              		.loc 1 1097 5 is_stmt 1 view .LVU732
1097:./FWLIB/src/stm32f10x_can.c ****     { 
 2046              		.loc 1 1097 14 is_stmt 0 view .LVU733
 2047 0042 C368     		ldr	r3, [r0, #12]
1097:./FWLIB/src/stm32f10x_can.c ****     { 
 2048              		.loc 1 1097 21 view .LVU734
 2049 0044 0B40     		ands	r3, r3, r1
 2050 0046 C3F31303 		ubfx	r3, r3, #0, #20
1097:./FWLIB/src/stm32f10x_can.c ****     { 
 2051              		.loc 1 1097 8 view .LVU735
 2052 004a 73B1     		cbz	r3, .L151
1100:./FWLIB/src/stm32f10x_can.c ****     }
 2053              		.loc 1 1100 17 view .LVU736
 2054 004c 0120     		movs	r0, #1
 2055              	.LVL135:
1100:./FWLIB/src/stm32f10x_can.c ****     }
 2056              		.loc 1 1100 17 view .LVU737
 2057 004e 7047     		bx	lr
 2058              	.LVL136:
 2059              	.L147:
1111:./FWLIB/src/stm32f10x_can.c ****     { 
 2060              		.loc 1 1111 5 is_stmt 1 view .LVU738
1111:./FWLIB/src/stm32f10x_can.c ****     { 
 2061              		.loc 1 1111 24 is_stmt 0 view .LVU739
 2062 0050 0369     		ldr	r3, [r0, #16]
1111:./FWLIB/src/stm32f10x_can.c ****     { 
 2063              		.loc 1 1111 9 view .LVU740
 2064 0052 0B40     		ands	r3, r3, r1
 2065 0054 C3F31303 		ubfx	r3, r3, #0, #20
1111:./FWLIB/src/stm32f10x_can.c ****     { 
 2066              		.loc 1 1111 8 view .LVU741
 2067 0058 4BB1     		cbz	r3, .L152
1114:./FWLIB/src/stm32f10x_can.c ****     }
 2068              		.loc 1 1114 17 view .LVU742
 2069 005a 0120     		movs	r0, #1
 2070              	.LVL137:
ARM GAS  /tmp/ccKET9pn.s 			page 74


1114:./FWLIB/src/stm32f10x_can.c ****     }
 2071              		.loc 1 1114 17 view .LVU743
 2072 005c 7047     		bx	lr
 2073              	.LVL138:
 2074              	.L148:
1063:./FWLIB/src/stm32f10x_can.c ****     }
 2075              		.loc 1 1063 17 view .LVU744
 2076 005e 0020     		movs	r0, #0
 2077              	.LVL139:
1063:./FWLIB/src/stm32f10x_can.c ****     }
 2078              		.loc 1 1063 17 view .LVU745
 2079 0060 7047     		bx	lr
 2080              	.LVL140:
 2081              	.L149:
1077:./FWLIB/src/stm32f10x_can.c ****     }
 2082              		.loc 1 1077 17 view .LVU746
 2083 0062 0020     		movs	r0, #0
 2084              	.LVL141:
1077:./FWLIB/src/stm32f10x_can.c ****     }
 2085              		.loc 1 1077 17 view .LVU747
 2086 0064 7047     		bx	lr
 2087              	.LVL142:
 2088              	.L150:
1091:./FWLIB/src/stm32f10x_can.c ****     }
 2089              		.loc 1 1091 17 view .LVU748
 2090 0066 0020     		movs	r0, #0
 2091              	.LVL143:
1091:./FWLIB/src/stm32f10x_can.c ****     }
 2092              		.loc 1 1091 17 view .LVU749
 2093 0068 7047     		bx	lr
 2094              	.LVL144:
 2095              	.L151:
1105:./FWLIB/src/stm32f10x_can.c ****     }
 2096              		.loc 1 1105 17 view .LVU750
 2097 006a 0020     		movs	r0, #0
 2098              	.LVL145:
1105:./FWLIB/src/stm32f10x_can.c ****     }
 2099              		.loc 1 1105 17 view .LVU751
 2100 006c 7047     		bx	lr
 2101              	.LVL146:
 2102              	.L152:
1119:./FWLIB/src/stm32f10x_can.c ****     }
 2103              		.loc 1 1119 17 view .LVU752
 2104 006e 0020     		movs	r0, #0
 2105              	.LVL147:
1123:./FWLIB/src/stm32f10x_can.c **** }
 2106              		.loc 1 1123 3 is_stmt 1 view .LVU753
1124:./FWLIB/src/stm32f10x_can.c **** 
 2107              		.loc 1 1124 1 is_stmt 0 view .LVU754
 2108 0070 7047     		bx	lr
 2109              		.cfi_endproc
 2110              	.LFE49:
 2112              		.section	.text.CAN_ClearFlag,"ax",%progbits
 2113              		.align	1
 2114              		.global	CAN_ClearFlag
 2115              		.syntax unified
 2116              		.thumb
ARM GAS  /tmp/ccKET9pn.s 			page 75


 2117              		.thumb_func
 2119              	CAN_ClearFlag:
 2120              	.LVL148:
 2121              	.LFB50:
1144:./FWLIB/src/stm32f10x_can.c ****   uint32_t flagtmp=0;
 2122              		.loc 1 1144 1 is_stmt 1 view -0
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 0
 2125              		@ frame_needed = 0, uses_anonymous_args = 0
 2126              		@ link register save eliminated.
1145:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 2127              		.loc 1 1145 3 view .LVU756
1147:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
 2128              		.loc 1 1147 3 view .LVU757
1148:./FWLIB/src/stm32f10x_can.c ****   
 2129              		.loc 1 1148 3 view .LVU758
1150:./FWLIB/src/stm32f10x_can.c ****   {
 2130              		.loc 1 1150 3 view .LVU759
1150:./FWLIB/src/stm32f10x_can.c ****   {
 2131              		.loc 1 1150 6 is_stmt 0 view .LVU760
 2132 0000 0C4B     		ldr	r3, .L160
 2133 0002 9942     		cmp	r1, r3
 2134 0004 06D0     		beq	.L159
1157:./FWLIB/src/stm32f10x_can.c **** 
 2135              		.loc 1 1157 5 is_stmt 1 view .LVU761
1157:./FWLIB/src/stm32f10x_can.c **** 
 2136              		.loc 1 1157 13 is_stmt 0 view .LVU762
 2137 0006 C1F31303 		ubfx	r3, r1, #0, #20
 2138              	.LVL149:
1159:./FWLIB/src/stm32f10x_can.c ****     {
 2139              		.loc 1 1159 5 is_stmt 1 view .LVU763
1159:./FWLIB/src/stm32f10x_can.c ****     {
 2140              		.loc 1 1159 8 is_stmt 0 view .LVU764
 2141 000a 11F0007F 		tst	r1, #33554432
 2142 000e 04D0     		beq	.L156
1162:./FWLIB/src/stm32f10x_can.c ****     }
 2143              		.loc 1 1162 7 is_stmt 1 view .LVU765
1162:./FWLIB/src/stm32f10x_can.c ****     }
 2144              		.loc 1 1162 18 is_stmt 0 view .LVU766
 2145 0010 C360     		str	r3, [r0, #12]
 2146 0012 7047     		bx	lr
 2147              	.LVL150:
 2148              	.L159:
1153:./FWLIB/src/stm32f10x_can.c ****   }
 2149              		.loc 1 1153 5 is_stmt 1 view .LVU767
1153:./FWLIB/src/stm32f10x_can.c ****   }
 2150              		.loc 1 1153 15 is_stmt 0 view .LVU768
 2151 0014 0023     		movs	r3, #0
 2152 0016 8361     		str	r3, [r0, #24]
 2153 0018 7047     		bx	lr
 2154              	.LVL151:
 2155              	.L156:
1164:./FWLIB/src/stm32f10x_can.c ****     {
 2156              		.loc 1 1164 10 is_stmt 1 view .LVU769
1164:./FWLIB/src/stm32f10x_can.c ****     {
 2157              		.loc 1 1164 13 is_stmt 0 view .LVU770
 2158 001a 11F0806F 		tst	r1, #67108864
ARM GAS  /tmp/ccKET9pn.s 			page 76


 2159 001e 01D0     		beq	.L157
1167:./FWLIB/src/stm32f10x_can.c ****     }
 2160              		.loc 1 1167 7 is_stmt 1 view .LVU771
1167:./FWLIB/src/stm32f10x_can.c ****     }
 2161              		.loc 1 1167 18 is_stmt 0 view .LVU772
 2162 0020 0361     		str	r3, [r0, #16]
 2163 0022 7047     		bx	lr
 2164              	.L157:
1169:./FWLIB/src/stm32f10x_can.c ****     {
 2165              		.loc 1 1169 10 is_stmt 1 view .LVU773
1169:./FWLIB/src/stm32f10x_can.c ****     {
 2166              		.loc 1 1169 13 is_stmt 0 view .LVU774
 2167 0024 11F0006F 		tst	r1, #134217728
 2168 0028 01D0     		beq	.L158
1172:./FWLIB/src/stm32f10x_can.c ****     }
 2169              		.loc 1 1172 7 is_stmt 1 view .LVU775
1172:./FWLIB/src/stm32f10x_can.c ****     }
 2170              		.loc 1 1172 17 is_stmt 0 view .LVU776
 2171 002a 8360     		str	r3, [r0, #8]
 2172 002c 7047     		bx	lr
 2173              	.L158:
1177:./FWLIB/src/stm32f10x_can.c ****     }
 2174              		.loc 1 1177 7 is_stmt 1 view .LVU777
1177:./FWLIB/src/stm32f10x_can.c ****     }
 2175              		.loc 1 1177 17 is_stmt 0 view .LVU778
 2176 002e 4360     		str	r3, [r0, #4]
1180:./FWLIB/src/stm32f10x_can.c **** 
 2177              		.loc 1 1180 1 view .LVU779
 2178 0030 7047     		bx	lr
 2179              	.L161:
 2180 0032 00BF     		.align	2
 2181              	.L160:
 2182 0034 7000F030 		.word	821035120
 2183              		.cfi_endproc
 2184              	.LFE50:
 2186              		.section	.text.CAN_GetITStatus,"ax",%progbits
 2187              		.align	1
 2188              		.global	CAN_GetITStatus
 2189              		.syntax unified
 2190              		.thumb
 2191              		.thumb_func
 2193              	CAN_GetITStatus:
 2194              	.LVL152:
 2195              	.LFB51:
1204:./FWLIB/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
 2196              		.loc 1 1204 1 is_stmt 1 view -0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
1204:./FWLIB/src/stm32f10x_can.c ****   ITStatus itstatus = RESET;
 2200              		.loc 1 1204 1 is_stmt 0 view .LVU781
 2201 0000 08B5     		push	{r3, lr}
 2202              	.LCFI9:
 2203              		.cfi_def_cfa_offset 8
 2204              		.cfi_offset 3, -8
 2205              		.cfi_offset 14, -4
1205:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccKET9pn.s 			page 77


 2206              		.loc 1 1205 3 is_stmt 1 view .LVU782
 2207              	.LVL153:
1207:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
 2208              		.loc 1 1207 3 view .LVU783
1208:./FWLIB/src/stm32f10x_can.c ****   
 2209              		.loc 1 1208 3 view .LVU784
1211:./FWLIB/src/stm32f10x_can.c ****  {
 2210              		.loc 1 1211 2 view .LVU785
1211:./FWLIB/src/stm32f10x_can.c ****  {
 2211              		.loc 1 1211 10 is_stmt 0 view .LVU786
 2212 0002 4369     		ldr	r3, [r0, #20]
1211:./FWLIB/src/stm32f10x_can.c ****  {
 2213              		.loc 1 1211 4 view .LVU787
 2214 0004 0B42     		tst	r3, r1
 2215 0006 00F0B280 		beq	.L182
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2216              		.loc 1 1214 5 is_stmt 1 view .LVU788
 2217 000a B1F5807F 		cmp	r1, #256
 2218 000e 00F09A80 		beq	.L164
 2219 0012 54D8     		bhi	.L165
 2220 0014 2029     		cmp	r1, #32
 2221 0016 49D8     		bhi	.L166
 2222 0018 0029     		cmp	r1, #0
 2223 001a 00F0AA80 		beq	.L183
 2224 001e 0139     		subs	r1, r1, #1
 2225              	.LVL154:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2226              		.loc 1 1214 5 is_stmt 0 view .LVU789
 2227 0020 1F29     		cmp	r1, #31
 2228 0022 00F2A880 		bhi	.L184
 2229 0026 01A3     		adr	r3, .L168
 2230 0028 53F821F0 		ldr	pc, [r3, r1, lsl #2]
 2231              		.p2align 2
 2232              	.L168:
 2233 002c 01010000 		.word	.L173+1
 2234 0030 0B010000 		.word	.L172+1
 2235 0034 77010000 		.word	.L184+1
 2236 0038 15010000 		.word	.L171+1
 2237 003c 77010000 		.word	.L184+1
 2238 0040 77010000 		.word	.L184+1
 2239 0044 77010000 		.word	.L184+1
 2240 0048 1F010000 		.word	.L170+1
 2241 004c 77010000 		.word	.L184+1
 2242 0050 77010000 		.word	.L184+1
 2243 0054 77010000 		.word	.L184+1
 2244 0058 77010000 		.word	.L184+1
 2245 005c 77010000 		.word	.L184+1
 2246 0060 77010000 		.word	.L184+1
 2247 0064 77010000 		.word	.L184+1
 2248 0068 29010000 		.word	.L169+1
 2249 006c 77010000 		.word	.L184+1
 2250 0070 77010000 		.word	.L184+1
 2251 0074 77010000 		.word	.L184+1
 2252 0078 77010000 		.word	.L184+1
 2253 007c 77010000 		.word	.L184+1
 2254 0080 77010000 		.word	.L184+1
 2255 0084 77010000 		.word	.L184+1
ARM GAS  /tmp/ccKET9pn.s 			page 78


 2256 0088 77010000 		.word	.L184+1
 2257 008c 77010000 		.word	.L184+1
 2258 0090 77010000 		.word	.L184+1
 2259 0094 77010000 		.word	.L184+1
 2260 0098 77010000 		.word	.L184+1
 2261 009c 77010000 		.word	.L184+1
 2262 00a0 77010000 		.word	.L184+1
 2263 00a4 77010000 		.word	.L184+1
 2264 00a8 33010000 		.word	.L167+1
 2265              	.LVL155:
 2266              		.p2align 1
 2267              	.L166:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2268              		.loc 1 1214 5 view .LVU790
 2269 00ac 4029     		cmp	r1, #64
 2270 00ae 04D1     		bne	.L186
1242:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2271              		.loc 1 1242 15 is_stmt 1 view .LVU791
1242:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2272              		.loc 1 1242 44 is_stmt 0 view .LVU792
 2273 00b0 0069     		ldr	r0, [r0, #16]
 2274              	.LVL156:
1242:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2275              		.loc 1 1242 26 view .LVU793
 2276 00b2 1021     		movs	r1, #16
 2277              	.LVL157:
1242:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2278              		.loc 1 1242 26 view .LVU794
 2279 00b4 FFF7FEFF 		bl	CheckITStatus
 2280              	.LVL158:
1243:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 2281              		.loc 1 1243 8 is_stmt 1 view .LVU795
 2282 00b8 5AE0     		b	.L163
 2283              	.LVL159:
 2284              	.L186:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2285              		.loc 1 1214 5 is_stmt 0 view .LVU796
 2286 00ba 0020     		movs	r0, #0
 2287              	.LVL160:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2288              		.loc 1 1214 5 view .LVU797
 2289 00bc 58E0     		b	.L163
 2290              	.LVL161:
 2291              	.L165:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2292              		.loc 1 1214 5 view .LVU798
 2293 00be B1F5004F 		cmp	r1, #32768
 2294 00c2 4FD0     		beq	.L175
 2295 00c4 0FD8     		bhi	.L176
 2296 00c6 B1F5806F 		cmp	r1, #1024
 2297 00ca 41D0     		beq	.L177
 2298 00cc B1F5006F 		cmp	r1, #2048
 2299 00d0 43D0     		beq	.L178
 2300 00d2 B1F5007F 		cmp	r1, #512
 2301 00d6 04D1     		bne	.L187
1258:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2302              		.loc 1 1258 15 is_stmt 1 view .LVU799
ARM GAS  /tmp/ccKET9pn.s 			page 79


1258:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2303              		.loc 1 1258 44 is_stmt 0 view .LVU800
 2304 00d8 8069     		ldr	r0, [r0, #24]
 2305              	.LVL162:
1258:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2306              		.loc 1 1258 26 view .LVU801
 2307 00da 0221     		movs	r1, #2
 2308              	.LVL163:
1258:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2309              		.loc 1 1258 26 view .LVU802
 2310 00dc FFF7FEFF 		bl	CheckITStatus
 2311              	.LVL164:
1259:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_BOF:
 2312              		.loc 1 1259 8 is_stmt 1 view .LVU803
 2313 00e0 46E0     		b	.L163
 2314              	.LVL165:
 2315              	.L187:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2316              		.loc 1 1214 5 is_stmt 0 view .LVU804
 2317 00e2 0020     		movs	r0, #0
 2318              	.LVL166:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2319              		.loc 1 1214 5 view .LVU805
 2320 00e4 44E0     		b	.L163
 2321              	.LVL167:
 2322              	.L176:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2323              		.loc 1 1214 5 view .LVU806
 2324 00e6 B1F5803F 		cmp	r1, #65536
 2325 00ea 27D0     		beq	.L180
 2326 00ec B1F5003F 		cmp	r1, #131072
 2327 00f0 04D1     		bne	.L188
1250:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2328              		.loc 1 1250 15 is_stmt 1 view .LVU807
1250:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2329              		.loc 1 1250 44 is_stmt 0 view .LVU808
 2330 00f2 4068     		ldr	r0, [r0, #4]
 2331              	.LVL168:
1250:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2332              		.loc 1 1250 26 view .LVU809
 2333 00f4 1021     		movs	r1, #16
 2334              	.LVL169:
1250:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2335              		.loc 1 1250 26 view .LVU810
 2336 00f6 FFF7FEFF 		bl	CheckITStatus
 2337              	.LVL170:
1251:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 2338              		.loc 1 1251 8 is_stmt 1 view .LVU811
 2339 00fa 39E0     		b	.L163
 2340              	.LVL171:
 2341              	.L188:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2342              		.loc 1 1214 5 is_stmt 0 view .LVU812
 2343 00fc 0020     		movs	r0, #0
 2344              	.LVL172:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2345              		.loc 1 1214 5 view .LVU813
ARM GAS  /tmp/ccKET9pn.s 			page 80


 2346 00fe 37E0     		b	.L163
 2347              	.LVL173:
 2348              	.L173:
1218:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2349              		.loc 1 1218 15 is_stmt 1 view .LVU814
1218:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2350              		.loc 1 1218 44 is_stmt 0 view .LVU815
 2351 0100 8068     		ldr	r0, [r0, #8]
 2352              	.LVL174:
1218:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2353              		.loc 1 1218 26 view .LVU816
 2354 0102 1E49     		ldr	r1, .L189
 2355              	.LVL175:
1218:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2356              		.loc 1 1218 26 view .LVU817
 2357 0104 FFF7FEFF 		bl	CheckITStatus
 2358              	.LVL176:
1219:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FMP0:
 2359              		.loc 1 1219 8 is_stmt 1 view .LVU818
 2360 0108 32E0     		b	.L163
 2361              	.LVL177:
 2362              	.L172:
1222:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2363              		.loc 1 1222 15 view .LVU819
1222:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2364              		.loc 1 1222 44 is_stmt 0 view .LVU820
 2365 010a C068     		ldr	r0, [r0, #12]
 2366              	.LVL178:
1222:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2367              		.loc 1 1222 26 view .LVU821
 2368 010c 0321     		movs	r1, #3
 2369 010e FFF7FEFF 		bl	CheckITStatus
 2370              	.LVL179:
1223:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 2371              		.loc 1 1223 8 is_stmt 1 view .LVU822
 2372 0112 2DE0     		b	.L163
 2373              	.LVL180:
 2374              	.L171:
1226:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2375              		.loc 1 1226 16 view .LVU823
1226:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2376              		.loc 1 1226 45 is_stmt 0 view .LVU824
 2377 0114 C068     		ldr	r0, [r0, #12]
 2378              	.LVL181:
1226:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2379              		.loc 1 1226 27 view .LVU825
 2380 0116 0821     		movs	r1, #8
 2381 0118 FFF7FEFF 		bl	CheckITStatus
 2382              	.LVL182:
1227:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 2383              		.loc 1 1227 8 is_stmt 1 view .LVU826
 2384 011c 28E0     		b	.L163
 2385              	.LVL183:
 2386              	.L170:
1230:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2387              		.loc 1 1230 16 view .LVU827
1230:./FWLIB/src/stm32f10x_can.c **** 	      break;
ARM GAS  /tmp/ccKET9pn.s 			page 81


 2388              		.loc 1 1230 45 is_stmt 0 view .LVU828
 2389 011e C068     		ldr	r0, [r0, #12]
 2390              	.LVL184:
1230:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2391              		.loc 1 1230 27 view .LVU829
 2392 0120 1021     		movs	r1, #16
 2393 0122 FFF7FEFF 		bl	CheckITStatus
 2394              	.LVL185:
1231:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FMP1:
 2395              		.loc 1 1231 8 is_stmt 1 view .LVU830
 2396 0126 23E0     		b	.L163
 2397              	.LVL186:
 2398              	.L169:
1234:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2399              		.loc 1 1234 16 view .LVU831
1234:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2400              		.loc 1 1234 45 is_stmt 0 view .LVU832
 2401 0128 0069     		ldr	r0, [r0, #16]
 2402              	.LVL187:
1234:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2403              		.loc 1 1234 27 view .LVU833
 2404 012a 0321     		movs	r1, #3
 2405 012c FFF7FEFF 		bl	CheckITStatus
 2406              	.LVL188:
1235:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 2407              		.loc 1 1235 8 is_stmt 1 view .LVU834
 2408 0130 1EE0     		b	.L163
 2409              	.LVL189:
 2410              	.L167:
1238:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2411              		.loc 1 1238 15 view .LVU835
1238:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2412              		.loc 1 1238 44 is_stmt 0 view .LVU836
 2413 0132 0069     		ldr	r0, [r0, #16]
 2414              	.LVL190:
1238:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2415              		.loc 1 1238 26 view .LVU837
 2416 0134 0821     		movs	r1, #8
 2417 0136 FFF7FEFF 		bl	CheckITStatus
 2418              	.LVL191:
1239:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 2419              		.loc 1 1239 8 is_stmt 1 view .LVU838
 2420 013a 19E0     		b	.L163
 2421              	.LVL192:
 2422              	.L180:
1246:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2423              		.loc 1 1246 16 view .LVU839
1246:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2424              		.loc 1 1246 45 is_stmt 0 view .LVU840
 2425 013c 4068     		ldr	r0, [r0, #4]
 2426              	.LVL193:
1246:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2427              		.loc 1 1246 27 view .LVU841
 2428 013e 0821     		movs	r1, #8
 2429              	.LVL194:
1246:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2430              		.loc 1 1246 27 view .LVU842
ARM GAS  /tmp/ccKET9pn.s 			page 82


 2431 0140 FFF7FEFF 		bl	CheckITStatus
 2432              	.LVL195:
1247:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 2433              		.loc 1 1247 8 is_stmt 1 view .LVU843
 2434 0144 14E0     		b	.L163
 2435              	.LVL196:
 2436              	.L164:
1254:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2437              		.loc 1 1254 15 view .LVU844
1254:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2438              		.loc 1 1254 44 is_stmt 0 view .LVU845
 2439 0146 8069     		ldr	r0, [r0, #24]
 2440              	.LVL197:
1254:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2441              		.loc 1 1254 26 view .LVU846
 2442 0148 0121     		movs	r1, #1
 2443              	.LVL198:
1254:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2444              		.loc 1 1254 26 view .LVU847
 2445 014a FFF7FEFF 		bl	CheckITStatus
 2446              	.LVL199:
1255:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 2447              		.loc 1 1255 8 is_stmt 1 view .LVU848
 2448 014e 0FE0     		b	.L163
 2449              	.LVL200:
 2450              	.L177:
1262:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2451              		.loc 1 1262 15 view .LVU849
1262:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2452              		.loc 1 1262 44 is_stmt 0 view .LVU850
 2453 0150 8069     		ldr	r0, [r0, #24]
 2454              	.LVL201:
1262:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2455              		.loc 1 1262 26 view .LVU851
 2456 0152 0421     		movs	r1, #4
 2457              	.LVL202:
1262:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2458              		.loc 1 1262 26 view .LVU852
 2459 0154 FFF7FEFF 		bl	CheckITStatus
 2460              	.LVL203:
1263:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 2461              		.loc 1 1263 8 is_stmt 1 view .LVU853
 2462 0158 0AE0     		b	.L163
 2463              	.LVL204:
 2464              	.L178:
1266:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2465              		.loc 1 1266 15 view .LVU854
1266:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2466              		.loc 1 1266 44 is_stmt 0 view .LVU855
 2467 015a 8069     		ldr	r0, [r0, #24]
 2468              	.LVL205:
1266:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2469              		.loc 1 1266 26 view .LVU856
 2470 015c 7021     		movs	r1, #112
 2471              	.LVL206:
1266:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2472              		.loc 1 1266 26 view .LVU857
ARM GAS  /tmp/ccKET9pn.s 			page 83


 2473 015e FFF7FEFF 		bl	CheckITStatus
 2474              	.LVL207:
1267:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2475              		.loc 1 1267 8 is_stmt 1 view .LVU858
 2476 0162 05E0     		b	.L163
 2477              	.LVL208:
 2478              	.L175:
1270:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2479              		.loc 1 1270 16 view .LVU859
1270:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2480              		.loc 1 1270 45 is_stmt 0 view .LVU860
 2481 0164 4068     		ldr	r0, [r0, #4]
 2482              	.LVL209:
1270:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2483              		.loc 1 1270 27 view .LVU861
 2484 0166 0421     		movs	r1, #4
 2485              	.LVL210:
1270:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2486              		.loc 1 1270 27 view .LVU862
 2487 0168 FFF7FEFF 		bl	CheckITStatus
 2488              	.LVL211:
1271:./FWLIB/src/stm32f10x_can.c ****       default :
 2489              		.loc 1 1271 8 is_stmt 1 view .LVU863
 2490 016c 00E0     		b	.L163
 2491              	.LVL212:
 2492              	.L182:
1281:./FWLIB/src/stm32f10x_can.c ****   }
 2493              		.loc 1 1281 15 is_stmt 0 view .LVU864
 2494 016e 0020     		movs	r0, #0
 2495              	.LVL213:
 2496              	.L163:
1285:./FWLIB/src/stm32f10x_can.c **** }
 2497              		.loc 1 1285 3 is_stmt 1 view .LVU865
1286:./FWLIB/src/stm32f10x_can.c **** 
 2498              		.loc 1 1286 1 is_stmt 0 view .LVU866
 2499 0170 08BD     		pop	{r3, pc}
 2500              	.LVL214:
 2501              	.L183:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2502              		.loc 1 1214 5 view .LVU867
 2503 0172 0020     		movs	r0, #0
 2504              	.LVL215:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2505              		.loc 1 1214 5 view .LVU868
 2506 0174 FCE7     		b	.L163
 2507              	.LVL216:
 2508              	.L184:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2509              		.loc 1 1214 5 view .LVU869
 2510 0176 0020     		movs	r0, #0
 2511              	.LVL217:
1214:./FWLIB/src/stm32f10x_can.c ****     {
 2512              		.loc 1 1214 5 view .LVU870
 2513 0178 FAE7     		b	.L163
 2514              	.L190:
 2515 017a 00BF     		.align	2
 2516              	.L189:
ARM GAS  /tmp/ccKET9pn.s 			page 84


 2517 017c 01010100 		.word	65793
 2518              		.cfi_endproc
 2519              	.LFE51:
 2521              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 2522              		.align	1
 2523              		.global	CAN_ClearITPendingBit
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2528              	CAN_ClearITPendingBit:
 2529              	.LVL218:
 2530              	.LFB52:
1307:./FWLIB/src/stm32f10x_can.c ****   /* Check the parameters */
 2531              		.loc 1 1307 1 is_stmt 1 view -0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 0
 2534              		@ frame_needed = 0, uses_anonymous_args = 0
 2535              		@ link register save eliminated.
1309:./FWLIB/src/stm32f10x_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
 2536              		.loc 1 1309 3 view .LVU872
1310:./FWLIB/src/stm32f10x_can.c **** 
 2537              		.loc 1 1310 3 view .LVU873
1312:./FWLIB/src/stm32f10x_can.c ****   {
 2538              		.loc 1 1312 3 view .LVU874
 2539 0000 B1F5007F 		cmp	r1, #512
 2540 0004 00F08380 		beq	.L192
 2541 0008 55D8     		bhi	.L193
 2542 000a 2029     		cmp	r1, #32
 2543 000c 4AD8     		bhi	.L194
 2544 000e 0029     		cmp	r1, #0
 2545 0010 00F08780 		beq	.L191
 2546 0014 0139     		subs	r1, r1, #1
 2547              	.LVL219:
1312:./FWLIB/src/stm32f10x_can.c ****   {
 2548              		.loc 1 1312 3 is_stmt 0 view .LVU875
 2549 0016 1F29     		cmp	r1, #31
 2550 0018 00F28380 		bhi	.L191
 2551 001c 01A3     		adr	r3, .L197
 2552 001e 53F821F0 		ldr	pc, [r3, r1, lsl #2]
 2553 0022 00BF     		.p2align 2
 2554              	.L197:
 2555 0024 EB000000 		.word	.L200+1
 2556 0028 23010000 		.word	.L191+1
 2557 002c 23010000 		.word	.L191+1
 2558 0030 F1000000 		.word	.L199+1
 2559 0034 23010000 		.word	.L191+1
 2560 0038 23010000 		.word	.L191+1
 2561 003c 23010000 		.word	.L191+1
 2562 0040 F7000000 		.word	.L198+1
 2563 0044 23010000 		.word	.L191+1
 2564 0048 23010000 		.word	.L191+1
 2565 004c 23010000 		.word	.L191+1
 2566 0050 23010000 		.word	.L191+1
 2567 0054 23010000 		.word	.L191+1
 2568 0058 23010000 		.word	.L191+1
 2569 005c 23010000 		.word	.L191+1
 2570 0060 23010000 		.word	.L191+1
ARM GAS  /tmp/ccKET9pn.s 			page 85


 2571 0064 23010000 		.word	.L191+1
 2572 0068 23010000 		.word	.L191+1
 2573 006c 23010000 		.word	.L191+1
 2574 0070 23010000 		.word	.L191+1
 2575 0074 23010000 		.word	.L191+1
 2576 0078 23010000 		.word	.L191+1
 2577 007c 23010000 		.word	.L191+1
 2578 0080 23010000 		.word	.L191+1
 2579 0084 23010000 		.word	.L191+1
 2580 0088 23010000 		.word	.L191+1
 2581 008c 23010000 		.word	.L191+1
 2582 0090 23010000 		.word	.L191+1
 2583 0094 23010000 		.word	.L191+1
 2584 0098 23010000 		.word	.L191+1
 2585 009c 23010000 		.word	.L191+1
 2586 00a0 FD000000 		.word	.L196+1
 2587              	.LVL220:
 2588              		.p2align 1
 2589              	.L194:
1312:./FWLIB/src/stm32f10x_can.c ****   {
 2590              		.loc 1 1312 3 view .LVU876
 2591 00a4 4029     		cmp	r1, #64
 2592 00a6 2CD0     		beq	.L201
 2593 00a8 B1F5807F 		cmp	r1, #256
 2594 00ac 02D1     		bne	.L210
1344:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2595              		.loc 1 1344 8 is_stmt 1 view .LVU877
1344:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2596              		.loc 1 1344 18 is_stmt 0 view .LVU878
 2597 00ae 0423     		movs	r3, #4
 2598 00b0 4360     		str	r3, [r0, #4]
1347:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 2599              		.loc 1 1347 8 is_stmt 1 view .LVU879
 2600 00b2 7047     		bx	lr
 2601              	.L210:
1347:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EPV:
 2602              		.loc 1 1347 8 is_stmt 0 view .LVU880
 2603 00b4 7047     		bx	lr
 2604              	.L193:
1312:./FWLIB/src/stm32f10x_can.c ****   {
 2605              		.loc 1 1312 3 view .LVU881
 2606 00b6 B1F5004F 		cmp	r1, #32768
 2607 00ba 2ED0     		beq	.L203
 2608 00bc 08D9     		bls	.L211
 2609 00be B1F5803F 		cmp	r1, #65536
 2610 00c2 21D0     		beq	.L207
 2611 00c4 B1F5003F 		cmp	r1, #131072
 2612 00c8 0ED1     		bne	.L212
1340:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2613              		.loc 1 1340 8 is_stmt 1 view .LVU882
1340:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2614              		.loc 1 1340 18 is_stmt 0 view .LVU883
 2615 00ca 1023     		movs	r3, #16
 2616 00cc 4360     		str	r3, [r0, #4]
1341:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_EWG:
 2617              		.loc 1 1341 8 is_stmt 1 view .LVU884
 2618 00ce 7047     		bx	lr
ARM GAS  /tmp/ccKET9pn.s 			page 86


 2619              	.L211:
1312:./FWLIB/src/stm32f10x_can.c ****   {
 2620              		.loc 1 1312 3 is_stmt 0 view .LVU885
 2621 00d0 B1F5806F 		cmp	r1, #1024
 2622 00d4 1ED0     		beq	.L205
 2623 00d6 B1F5006F 		cmp	r1, #2048
 2624 00da 04D1     		bne	.L213
1362:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2625              		.loc 1 1362 8 is_stmt 1 view .LVU886
1362:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2626              		.loc 1 1362 18 is_stmt 0 view .LVU887
 2627 00dc 0023     		movs	r3, #0
 2628 00de 8361     		str	r3, [r0, #24]
1364:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2629              		.loc 1 1364 8 is_stmt 1 view .LVU888
1364:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2630              		.loc 1 1364 18 is_stmt 0 view .LVU889
 2631 00e0 0423     		movs	r3, #4
 2632 00e2 4360     		str	r3, [r0, #4]
1365:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2633              		.loc 1 1365 8 is_stmt 1 view .LVU890
 2634 00e4 7047     		bx	lr
 2635              	.L213:
1365:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2636              		.loc 1 1365 8 is_stmt 0 view .LVU891
 2637 00e6 7047     		bx	lr
 2638              	.L212:
1365:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_ERR:
 2639              		.loc 1 1365 8 view .LVU892
 2640 00e8 7047     		bx	lr
 2641              	.LVL221:
 2642              	.L200:
1316:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2643              		.loc 1 1316 8 is_stmt 1 view .LVU893
1316:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2644              		.loc 1 1316 18 is_stmt 0 view .LVU894
 2645 00ea 0E4B     		ldr	r3, .L214
 2646 00ec 8360     		str	r3, [r0, #8]
1317:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF0:
 2647              		.loc 1 1317 8 is_stmt 1 view .LVU895
 2648 00ee 7047     		bx	lr
 2649              	.L199:
1320:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2650              		.loc 1 1320 8 view .LVU896
1320:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2651              		.loc 1 1320 19 is_stmt 0 view .LVU897
 2652 00f0 0823     		movs	r3, #8
 2653 00f2 C360     		str	r3, [r0, #12]
1321:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV0:
 2654              		.loc 1 1321 8 is_stmt 1 view .LVU898
 2655 00f4 7047     		bx	lr
 2656              	.L198:
1324:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2657              		.loc 1 1324 8 view .LVU899
1324:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2658              		.loc 1 1324 19 is_stmt 0 view .LVU900
 2659 00f6 1023     		movs	r3, #16
ARM GAS  /tmp/ccKET9pn.s 			page 87


 2660 00f8 C360     		str	r3, [r0, #12]
1325:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FF1:
 2661              		.loc 1 1325 8 is_stmt 1 view .LVU901
 2662 00fa 7047     		bx	lr
 2663              	.L196:
1328:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2664              		.loc 1 1328 8 view .LVU902
1328:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2665              		.loc 1 1328 19 is_stmt 0 view .LVU903
 2666 00fc 0823     		movs	r3, #8
 2667 00fe 0361     		str	r3, [r0, #16]
1329:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_FOV1:
 2668              		.loc 1 1329 8 is_stmt 1 view .LVU904
 2669 0100 7047     		bx	lr
 2670              	.LVL222:
 2671              	.L201:
1332:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2672              		.loc 1 1332 8 view .LVU905
1332:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2673              		.loc 1 1332 19 is_stmt 0 view .LVU906
 2674 0102 1023     		movs	r3, #16
 2675 0104 0361     		str	r3, [r0, #16]
1333:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_WKU:
 2676              		.loc 1 1333 8 is_stmt 1 view .LVU907
 2677 0106 7047     		bx	lr
 2678              	.L207:
1336:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2679              		.loc 1 1336 8 view .LVU908
1336:./FWLIB/src/stm32f10x_can.c **** 	      break;
 2680              		.loc 1 1336 18 is_stmt 0 view .LVU909
 2681 0108 0823     		movs	r3, #8
 2682 010a 4360     		str	r3, [r0, #4]
1337:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_SLK:
 2683              		.loc 1 1337 8 is_stmt 1 view .LVU910
 2684 010c 7047     		bx	lr
 2685              	.L192:
1350:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2686              		.loc 1 1350 8 view .LVU911
1350:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2687              		.loc 1 1350 18 is_stmt 0 view .LVU912
 2688 010e 0423     		movs	r3, #4
 2689 0110 4360     		str	r3, [r0, #4]
1353:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_BOF:
 2690              		.loc 1 1353 8 is_stmt 1 view .LVU913
 2691 0112 7047     		bx	lr
 2692              	.L205:
1356:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2693              		.loc 1 1356 8 view .LVU914
1356:./FWLIB/src/stm32f10x_can.c ****               /* Note : the corresponding Flag is cleared by hardware depending 
 2694              		.loc 1 1356 18 is_stmt 0 view .LVU915
 2695 0114 0423     		movs	r3, #4
 2696 0116 4360     		str	r3, [r0, #4]
1359:./FWLIB/src/stm32f10x_can.c ****       case CAN_IT_LEC:
 2697              		.loc 1 1359 8 is_stmt 1 view .LVU916
 2698 0118 7047     		bx	lr
 2699              	.L203:
1368:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
ARM GAS  /tmp/ccKET9pn.s 			page 88


 2700              		.loc 1 1368 8 view .LVU917
1368:./FWLIB/src/stm32f10x_can.c ****               /* Clear CAN_MSR_ERRI (rc_w1) */
 2701              		.loc 1 1368 18 is_stmt 0 view .LVU918
 2702 011a 0023     		movs	r3, #0
 2703 011c 8361     		str	r3, [r0, #24]
1370:./FWLIB/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
 2704              		.loc 1 1370 8 is_stmt 1 view .LVU919
1370:./FWLIB/src/stm32f10x_can.c **** 	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
 2705              		.loc 1 1370 18 is_stmt 0 view .LVU920
 2706 011e 0423     		movs	r3, #4
 2707 0120 4360     		str	r3, [r0, #4]
1373:./FWLIB/src/stm32f10x_can.c ****       default :
 2708              		.loc 1 1373 8 is_stmt 1 view .LVU921
 2709              	.LVL223:
 2710              	.L191:
1377:./FWLIB/src/stm32f10x_can.c **** 
 2711              		.loc 1 1377 1 is_stmt 0 view .LVU922
 2712 0122 7047     		bx	lr
 2713              	.L215:
 2714              		.align	2
 2715              	.L214:
 2716 0124 01010100 		.word	65793
 2717              		.cfi_endproc
 2718              	.LFE52:
 2720              		.text
 2721              	.Letext0:
 2722              		.file 2 "/usr/lib/gcc/arm-none-eabi/14.1.0/include/stdint-gcc.h"
 2723              		.file 3 "USER/stm32f10x.h"
 2724              		.file 4 "FWLIB/inc/stm32f10x_can.h"
 2725              		.file 5 "FWLIB/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/ccKET9pn.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_can.c
     /tmp/ccKET9pn.s:19     .text.CheckITStatus:00000000 $t
     /tmp/ccKET9pn.s:24     .text.CheckITStatus:00000000 CheckITStatus
     /tmp/ccKET9pn.s:54     .text.CAN_DeInit:00000000 $t
     /tmp/ccKET9pn.s:60     .text.CAN_DeInit:00000000 CAN_DeInit
     /tmp/ccKET9pn.s:112    .text.CAN_DeInit:00000034 $d
     /tmp/ccKET9pn.s:117    .text.CAN_Init:00000000 $t
     /tmp/ccKET9pn.s:123    .text.CAN_Init:00000000 CAN_Init
     /tmp/ccKET9pn.s:401    .text.CAN_FilterInit:00000000 $t
     /tmp/ccKET9pn.s:407    .text.CAN_FilterInit:00000000 CAN_FilterInit
     /tmp/ccKET9pn.s:612    .text.CAN_FilterInit:00000108 $d
     /tmp/ccKET9pn.s:617    .text.CAN_StructInit:00000000 $t
     /tmp/ccKET9pn.s:623    .text.CAN_StructInit:00000000 CAN_StructInit
     /tmp/ccKET9pn.s:674    .text.CAN_SlaveStartBank:00000000 $t
     /tmp/ccKET9pn.s:680    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
     /tmp/ccKET9pn.s:720    .text.CAN_SlaveStartBank:00000038 $d
     /tmp/ccKET9pn.s:725    .text.CAN_DBGFreeze:00000000 $t
     /tmp/ccKET9pn.s:731    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
     /tmp/ccKET9pn.s:764    .text.CAN_TTComModeCmd:00000000 $t
     /tmp/ccKET9pn.s:770    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
     /tmp/ccKET9pn.s:839    .text.CAN_Transmit:00000000 $t
     /tmp/ccKET9pn.s:845    .text.CAN_Transmit:00000000 CAN_Transmit
     /tmp/ccKET9pn.s:1052   .text.CAN_TransmitStatus:00000000 $t
     /tmp/ccKET9pn.s:1058   .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
     /tmp/ccKET9pn.s:1203   .text.CAN_TransmitStatus:00000088 $d
     /tmp/ccKET9pn.s:1211   .text.CAN_CancelTransmit:00000000 $t
     /tmp/ccKET9pn.s:1217   .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
     /tmp/ccKET9pn.s:1265   .text.CAN_Receive:00000000 $t
     /tmp/ccKET9pn.s:1271   .text.CAN_Receive:00000000 CAN_Receive
     /tmp/ccKET9pn.s:1429   .text.CAN_FIFORelease:00000000 $t
     /tmp/ccKET9pn.s:1435   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
     /tmp/ccKET9pn.s:1468   .text.CAN_MessagePending:00000000 $t
     /tmp/ccKET9pn.s:1474   .text.CAN_MessagePending:00000000 CAN_MessagePending
     /tmp/ccKET9pn.s:1524   .text.CAN_OperatingModeRequest:00000000 $t
     /tmp/ccKET9pn.s:1530   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
     /tmp/ccKET9pn.s:1720   .text.CAN_Sleep:00000000 $t
     /tmp/ccKET9pn.s:1726   .text.CAN_Sleep:00000000 CAN_Sleep
     /tmp/ccKET9pn.s:1769   .text.CAN_WakeUp:00000000 $t
     /tmp/ccKET9pn.s:1775   .text.CAN_WakeUp:00000000 CAN_WakeUp
     /tmp/ccKET9pn.s:1837   .text.CAN_GetLastErrorCode:00000000 $t
     /tmp/ccKET9pn.s:1843   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
     /tmp/ccKET9pn.s:1867   .text.CAN_GetReceiveErrorCounter:00000000 $t
     /tmp/ccKET9pn.s:1873   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
     /tmp/ccKET9pn.s:1897   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
     /tmp/ccKET9pn.s:1903   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
     /tmp/ccKET9pn.s:1927   .text.CAN_ITConfig:00000000 $t
     /tmp/ccKET9pn.s:1933   .text.CAN_ITConfig:00000000 CAN_ITConfig
     /tmp/ccKET9pn.s:1967   .text.CAN_GetFlagStatus:00000000 $t
     /tmp/ccKET9pn.s:1973   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
     /tmp/ccKET9pn.s:2113   .text.CAN_ClearFlag:00000000 $t
     /tmp/ccKET9pn.s:2119   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
     /tmp/ccKET9pn.s:2182   .text.CAN_ClearFlag:00000034 $d
     /tmp/ccKET9pn.s:2187   .text.CAN_GetITStatus:00000000 $t
     /tmp/ccKET9pn.s:2193   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
     /tmp/ccKET9pn.s:2233   .text.CAN_GetITStatus:0000002c $d
     /tmp/ccKET9pn.s:2266   .text.CAN_GetITStatus:000000ac $t
ARM GAS  /tmp/ccKET9pn.s 			page 90


     /tmp/ccKET9pn.s:2517   .text.CAN_GetITStatus:0000017c $d
     /tmp/ccKET9pn.s:2522   .text.CAN_ClearITPendingBit:00000000 $t
     /tmp/ccKET9pn.s:2528   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
     /tmp/ccKET9pn.s:2555   .text.CAN_ClearITPendingBit:00000024 $d
     /tmp/ccKET9pn.s:2588   .text.CAN_ClearITPendingBit:000000a4 $t
     /tmp/ccKET9pn.s:2716   .text.CAN_ClearITPendingBit:00000124 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd

ARM GAS  /tmp/ccflrkWe.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./FWLIB/src/stm32f10x_rcc.c"
  18              		.section	.text.RCC_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	RCC_DeInit
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	RCC_DeInit:
  26              	.LFB29:
   1:./FWLIB/src/stm32f10x_rcc.c **** /**
   2:./FWLIB/src/stm32f10x_rcc.c ****   ******************************************************************************
   3:./FWLIB/src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:./FWLIB/src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:./FWLIB/src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:./FWLIB/src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:./FWLIB/src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:./FWLIB/src/stm32f10x_rcc.c ****   ******************************************************************************
   9:./FWLIB/src/stm32f10x_rcc.c ****   * @attention
  10:./FWLIB/src/stm32f10x_rcc.c ****   *
  11:./FWLIB/src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:./FWLIB/src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:./FWLIB/src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:./FWLIB/src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:./FWLIB/src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:./FWLIB/src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:./FWLIB/src/stm32f10x_rcc.c ****   *
  18:./FWLIB/src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:./FWLIB/src/stm32f10x_rcc.c ****   ******************************************************************************
  20:./FWLIB/src/stm32f10x_rcc.c ****   */
  21:./FWLIB/src/stm32f10x_rcc.c **** 
  22:./FWLIB/src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:./FWLIB/src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:./FWLIB/src/stm32f10x_rcc.c **** 
  25:./FWLIB/src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:./FWLIB/src/stm32f10x_rcc.c ****   * @{
  27:./FWLIB/src/stm32f10x_rcc.c ****   */
  28:./FWLIB/src/stm32f10x_rcc.c **** 
  29:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:./FWLIB/src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:./FWLIB/src/stm32f10x_rcc.c ****   * @{
  32:./FWLIB/src/stm32f10x_rcc.c ****   */ 
ARM GAS  /tmp/ccflrkWe.s 			page 2


  33:./FWLIB/src/stm32f10x_rcc.c **** 
  34:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:./FWLIB/src/stm32f10x_rcc.c ****   * @{
  36:./FWLIB/src/stm32f10x_rcc.c ****   */
  37:./FWLIB/src/stm32f10x_rcc.c **** 
  38:./FWLIB/src/stm32f10x_rcc.c **** /**
  39:./FWLIB/src/stm32f10x_rcc.c ****   * @}
  40:./FWLIB/src/stm32f10x_rcc.c ****   */
  41:./FWLIB/src/stm32f10x_rcc.c **** 
  42:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:./FWLIB/src/stm32f10x_rcc.c ****   * @{
  44:./FWLIB/src/stm32f10x_rcc.c ****   */
  45:./FWLIB/src/stm32f10x_rcc.c **** 
  46:./FWLIB/src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:./FWLIB/src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:./FWLIB/src/stm32f10x_rcc.c **** 
  49:./FWLIB/src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:./FWLIB/src/stm32f10x_rcc.c **** 
  51:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:./FWLIB/src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:./FWLIB/src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:./FWLIB/src/stm32f10x_rcc.c **** 
  56:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:./FWLIB/src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:./FWLIB/src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:./FWLIB/src/stm32f10x_rcc.c **** 
  60:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:./FWLIB/src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:./FWLIB/src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:./FWLIB/src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:./FWLIB/src/stm32f10x_rcc.c **** 
  65:./FWLIB/src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:./FWLIB/src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:./FWLIB/src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:./FWLIB/src/stm32f10x_rcc.c **** 
  70:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:./FWLIB/src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:./FWLIB/src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:./FWLIB/src/stm32f10x_rcc.c **** 
  74:./FWLIB/src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:./FWLIB/src/stm32f10x_rcc.c **** 
  76:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:./FWLIB/src/stm32f10x_rcc.c **** 
  79:./FWLIB/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:./FWLIB/src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:./FWLIB/src/stm32f10x_rcc.c **** #else
  83:./FWLIB/src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:./FWLIB/src/stm32f10x_rcc.c **** 
  87:./FWLIB/src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:./FWLIB/src/stm32f10x_rcc.c **** 
  89:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
ARM GAS  /tmp/ccflrkWe.s 			page 3


  90:./FWLIB/src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:./FWLIB/src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:./FWLIB/src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:./FWLIB/src/stm32f10x_rcc.c **** 
  94:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:./FWLIB/src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:./FWLIB/src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:./FWLIB/src/stm32f10x_rcc.c **** 
  98:./FWLIB/src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:./FWLIB/src/stm32f10x_rcc.c **** 
 100:./FWLIB/src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:./FWLIB/src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:./FWLIB/src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:./FWLIB/src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:./FWLIB/src/stm32f10x_rcc.c **** 
 105:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:./FWLIB/src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:./FWLIB/src/stm32f10x_rcc.c **** 
 108:./FWLIB/src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:./FWLIB/src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:./FWLIB/src/stm32f10x_rcc.c **** 
 113:./FWLIB/src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:./FWLIB/src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:./FWLIB/src/stm32f10x_rcc.c **** 
 118:./FWLIB/src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:./FWLIB/src/stm32f10x_rcc.c **** 
 120:./FWLIB/src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:./FWLIB/src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:./FWLIB/src/stm32f10x_rcc.c **** 
 127:./FWLIB/src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:./FWLIB/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:./FWLIB/src/stm32f10x_rcc.c **** #else
 131:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:./FWLIB/src/stm32f10x_rcc.c **** 
 134:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
ARM GAS  /tmp/ccflrkWe.s 			page 4


 147:./FWLIB/src/stm32f10x_rcc.c **** 
 148:./FWLIB/src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:./FWLIB/src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:./FWLIB/src/stm32f10x_rcc.c **** 
 151:./FWLIB/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:./FWLIB/src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:./FWLIB/src/stm32f10x_rcc.c **** #endif
 156:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:./FWLIB/src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:./FWLIB/src/stm32f10x_rcc.c **** 
 162:./FWLIB/src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:./FWLIB/src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:./FWLIB/src/stm32f10x_rcc.c **** 
 165:./FWLIB/src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:./FWLIB/src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:./FWLIB/src/stm32f10x_rcc.c **** 
 168:./FWLIB/src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:./FWLIB/src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:./FWLIB/src/stm32f10x_rcc.c **** 
 171:./FWLIB/src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:./FWLIB/src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:./FWLIB/src/stm32f10x_rcc.c **** 
 174:./FWLIB/src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:./FWLIB/src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:./FWLIB/src/stm32f10x_rcc.c **** 
 177:./FWLIB/src/stm32f10x_rcc.c **** /**
 178:./FWLIB/src/stm32f10x_rcc.c ****   * @}
 179:./FWLIB/src/stm32f10x_rcc.c ****   */ 
 180:./FWLIB/src/stm32f10x_rcc.c **** 
 181:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:./FWLIB/src/stm32f10x_rcc.c ****   * @{
 183:./FWLIB/src/stm32f10x_rcc.c ****   */ 
 184:./FWLIB/src/stm32f10x_rcc.c **** 
 185:./FWLIB/src/stm32f10x_rcc.c **** /**
 186:./FWLIB/src/stm32f10x_rcc.c ****   * @}
 187:./FWLIB/src/stm32f10x_rcc.c ****   */ 
 188:./FWLIB/src/stm32f10x_rcc.c **** 
 189:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:./FWLIB/src/stm32f10x_rcc.c ****   * @{
 191:./FWLIB/src/stm32f10x_rcc.c ****   */ 
 192:./FWLIB/src/stm32f10x_rcc.c **** 
 193:./FWLIB/src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:./FWLIB/src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:./FWLIB/src/stm32f10x_rcc.c **** 
 196:./FWLIB/src/stm32f10x_rcc.c **** /**
 197:./FWLIB/src/stm32f10x_rcc.c ****   * @}
 198:./FWLIB/src/stm32f10x_rcc.c ****   */
 199:./FWLIB/src/stm32f10x_rcc.c **** 
 200:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:./FWLIB/src/stm32f10x_rcc.c ****   * @{
 202:./FWLIB/src/stm32f10x_rcc.c ****   */
 203:./FWLIB/src/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccflrkWe.s 			page 5


 204:./FWLIB/src/stm32f10x_rcc.c **** /**
 205:./FWLIB/src/stm32f10x_rcc.c ****   * @}
 206:./FWLIB/src/stm32f10x_rcc.c ****   */
 207:./FWLIB/src/stm32f10x_rcc.c **** 
 208:./FWLIB/src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:./FWLIB/src/stm32f10x_rcc.c ****   * @{
 210:./FWLIB/src/stm32f10x_rcc.c ****   */
 211:./FWLIB/src/stm32f10x_rcc.c **** 
 212:./FWLIB/src/stm32f10x_rcc.c **** /**
 213:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:./FWLIB/src/stm32f10x_rcc.c ****   * @param  None
 215:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 216:./FWLIB/src/stm32f10x_rcc.c ****   */
 217:./FWLIB/src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:./FWLIB/src/stm32f10x_rcc.c **** {
  27              		.loc 1 218 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 219:./FWLIB/src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  32              		.loc 1 220 3 view .LVU1
  33              		.loc 1 220 6 is_stmt 0 view .LVU2
  34 0000 0D4B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36              		.loc 1 220 11 view .LVU3
  37 0004 42F00102 		orr	r2, r2, #1
  38 0008 1A60     		str	r2, [r3]
 221:./FWLIB/src/stm32f10x_rcc.c **** 
 222:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:./FWLIB/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  39              		.loc 1 224 3 is_stmt 1 view .LVU4
  40              		.loc 1 224 6 is_stmt 0 view .LVU5
  41 000a 5968     		ldr	r1, [r3, #4]
  42              		.loc 1 224 13 view .LVU6
  43 000c 0B4A     		ldr	r2, .L2+4
  44 000e 0A40     		ands	r2, r2, r1
  45 0010 5A60     		str	r2, [r3, #4]
 225:./FWLIB/src/stm32f10x_rcc.c **** #else
 226:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 227:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:./FWLIB/src/stm32f10x_rcc.c ****   
 229:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  46              		.loc 1 230 3 is_stmt 1 view .LVU7
  47              		.loc 1 230 6 is_stmt 0 view .LVU8
  48 0012 1A68     		ldr	r2, [r3]
  49              		.loc 1 230 11 view .LVU9
  50 0014 22F08472 		bic	r2, r2, #17301504
  51 0018 22F48032 		bic	r2, r2, #65536
  52 001c 1A60     		str	r2, [r3]
 231:./FWLIB/src/stm32f10x_rcc.c **** 
 232:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  53              		.loc 1 233 3 is_stmt 1 view .LVU10
ARM GAS  /tmp/ccflrkWe.s 			page 6


  54              		.loc 1 233 6 is_stmt 0 view .LVU11
  55 001e 1A68     		ldr	r2, [r3]
  56              		.loc 1 233 11 view .LVU12
  57 0020 22F48022 		bic	r2, r2, #262144
  58 0024 1A60     		str	r2, [r3]
 234:./FWLIB/src/stm32f10x_rcc.c **** 
 235:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  59              		.loc 1 236 3 is_stmt 1 view .LVU13
  60              		.loc 1 236 6 is_stmt 0 view .LVU14
  61 0026 5A68     		ldr	r2, [r3, #4]
  62              		.loc 1 236 13 view .LVU15
  63 0028 22F4FE02 		bic	r2, r2, #8323072
  64 002c 5A60     		str	r2, [r3, #4]
 237:./FWLIB/src/stm32f10x_rcc.c **** 
 238:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 241:./FWLIB/src/stm32f10x_rcc.c **** 
 242:./FWLIB/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 244:./FWLIB/src/stm32f10x_rcc.c **** 
 245:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 247:./FWLIB/src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:./FWLIB/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 250:./FWLIB/src/stm32f10x_rcc.c **** 
 251:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 253:./FWLIB/src/stm32f10x_rcc.c **** #else
 254:./FWLIB/src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
  65              		.loc 1 255 3 is_stmt 1 view .LVU16
  66              		.loc 1 255 12 is_stmt 0 view .LVU17
  67 002e 4FF41F02 		mov	r2, #10420224
  68 0032 9A60     		str	r2, [r3, #8]
 256:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:./FWLIB/src/stm32f10x_rcc.c **** 
 258:./FWLIB/src/stm32f10x_rcc.c **** }
  69              		.loc 1 258 1 view .LVU18
  70 0034 7047     		bx	lr
  71              	.L3:
  72 0036 00BF     		.align	2
  73              	.L2:
  74 0038 00100240 		.word	1073876992
  75 003c 0000FFF8 		.word	-117506048
  76              		.cfi_endproc
  77              	.LFE29:
  79              		.section	.text.RCC_HSEConfig,"ax",%progbits
  80              		.align	1
  81              		.global	RCC_HSEConfig
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	RCC_HSEConfig:
  87              	.LVL0:
ARM GAS  /tmp/ccflrkWe.s 			page 7


  88              	.LFB30:
 259:./FWLIB/src/stm32f10x_rcc.c **** 
 260:./FWLIB/src/stm32f10x_rcc.c **** /**
 261:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:./FWLIB/src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 269:./FWLIB/src/stm32f10x_rcc.c ****   */
 270:./FWLIB/src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:./FWLIB/src/stm32f10x_rcc.c **** {
  89              		.loc 1 271 1 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
 272:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
  94              		.loc 1 273 3 view .LVU20
 274:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
  95              		.loc 1 276 3 view .LVU21
  96              		.loc 1 276 6 is_stmt 0 view .LVU22
  97 0000 0D4B     		ldr	r3, .L8
  98 0002 1A68     		ldr	r2, [r3]
  99              		.loc 1 276 11 view .LVU23
 100 0004 22F48032 		bic	r2, r2, #65536
 101 0008 1A60     		str	r2, [r3]
 277:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 102              		.loc 1 278 3 is_stmt 1 view .LVU24
 103              		.loc 1 278 6 is_stmt 0 view .LVU25
 104 000a 1A68     		ldr	r2, [r3]
 105              		.loc 1 278 11 view .LVU26
 106 000c 22F48022 		bic	r2, r2, #262144
 107 0010 1A60     		str	r2, [r3]
 279:./FWLIB/src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:./FWLIB/src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 108              		.loc 1 280 3 is_stmt 1 view .LVU27
 109 0012 B0F5803F 		cmp	r0, #65536
 110 0016 03D0     		beq	.L5
 111 0018 B0F5802F 		cmp	r0, #262144
 112 001c 06D0     		beq	.L6
 113 001e 7047     		bx	lr
 114              	.L5:
 281:./FWLIB/src/stm32f10x_rcc.c ****   {
 282:./FWLIB/src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:./FWLIB/src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:./FWLIB/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 115              		.loc 1 284 7 view .LVU28
 116              		.loc 1 284 10 is_stmt 0 view .LVU29
 117 0020 054A     		ldr	r2, .L8
 118 0022 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccflrkWe.s 			page 8


 119              		.loc 1 284 15 view .LVU30
 120 0024 43F48033 		orr	r3, r3, #65536
 121 0028 1360     		str	r3, [r2]
 285:./FWLIB/src/stm32f10x_rcc.c ****       break;
 122              		.loc 1 285 7 is_stmt 1 view .LVU31
 123 002a 7047     		bx	lr
 124              	.L6:
 286:./FWLIB/src/stm32f10x_rcc.c ****       
 287:./FWLIB/src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:./FWLIB/src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:./FWLIB/src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 125              		.loc 1 289 7 view .LVU32
 126              		.loc 1 289 10 is_stmt 0 view .LVU33
 127 002c 024A     		ldr	r2, .L8
 128 002e 1368     		ldr	r3, [r2]
 129              		.loc 1 289 15 view .LVU34
 130 0030 43F4A023 		orr	r3, r3, #327680
 131 0034 1360     		str	r3, [r2]
 290:./FWLIB/src/stm32f10x_rcc.c ****       break;
 132              		.loc 1 290 7 is_stmt 1 view .LVU35
 291:./FWLIB/src/stm32f10x_rcc.c ****       
 292:./FWLIB/src/stm32f10x_rcc.c ****     default:
 293:./FWLIB/src/stm32f10x_rcc.c ****       break;
 294:./FWLIB/src/stm32f10x_rcc.c ****   }
 295:./FWLIB/src/stm32f10x_rcc.c **** }
 133              		.loc 1 295 1 is_stmt 0 view .LVU36
 134 0036 7047     		bx	lr
 135              	.L9:
 136              		.align	2
 137              	.L8:
 138 0038 00100240 		.word	1073876992
 139              		.cfi_endproc
 140              	.LFE30:
 142              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 143              		.align	1
 144              		.global	RCC_AdjustHSICalibrationValue
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 149              	RCC_AdjustHSICalibrationValue:
 150              	.LVL1:
 151              	.LFB32:
 296:./FWLIB/src/stm32f10x_rcc.c **** 
 297:./FWLIB/src/stm32f10x_rcc.c **** /**
 298:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:./FWLIB/src/stm32f10x_rcc.c ****   * @param  None
 300:./FWLIB/src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:./FWLIB/src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:./FWLIB/src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:./FWLIB/src/stm32f10x_rcc.c ****   */
 304:./FWLIB/src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:./FWLIB/src/stm32f10x_rcc.c **** {
 306:./FWLIB/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 307:./FWLIB/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 308:./FWLIB/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 309:./FWLIB/src/stm32f10x_rcc.c ****   
 310:./FWLIB/src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
ARM GAS  /tmp/ccflrkWe.s 			page 9


 311:./FWLIB/src/stm32f10x_rcc.c ****   do
 312:./FWLIB/src/stm32f10x_rcc.c ****   {
 313:./FWLIB/src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 314:./FWLIB/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 315:./FWLIB/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 316:./FWLIB/src/stm32f10x_rcc.c ****   
 317:./FWLIB/src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 318:./FWLIB/src/stm32f10x_rcc.c ****   {
 319:./FWLIB/src/stm32f10x_rcc.c ****     status = SUCCESS;
 320:./FWLIB/src/stm32f10x_rcc.c ****   }
 321:./FWLIB/src/stm32f10x_rcc.c ****   else
 322:./FWLIB/src/stm32f10x_rcc.c ****   {
 323:./FWLIB/src/stm32f10x_rcc.c ****     status = ERROR;
 324:./FWLIB/src/stm32f10x_rcc.c ****   }  
 325:./FWLIB/src/stm32f10x_rcc.c ****   return (status);
 326:./FWLIB/src/stm32f10x_rcc.c **** }
 327:./FWLIB/src/stm32f10x_rcc.c **** 
 328:./FWLIB/src/stm32f10x_rcc.c **** /**
 329:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:./FWLIB/src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 333:./FWLIB/src/stm32f10x_rcc.c ****   */
 334:./FWLIB/src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:./FWLIB/src/stm32f10x_rcc.c **** {
 152              		.loc 1 335 1 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 336:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 157              		.loc 1 336 3 view .LVU38
 337:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 158              		.loc 1 338 3 view .LVU39
 339:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 159              		.loc 1 339 3 view .LVU40
 160              		.loc 1 339 10 is_stmt 0 view .LVU41
 161 0000 034A     		ldr	r2, .L11
 162 0002 1368     		ldr	r3, [r2]
 163              	.LVL2:
 340:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 164              		.loc 1 341 3 is_stmt 1 view .LVU42
 165              		.loc 1 341 10 is_stmt 0 view .LVU43
 166 0004 23F0F803 		bic	r3, r3, #248
 167              	.LVL3:
 342:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 168              		.loc 1 343 3 is_stmt 1 view .LVU44
 169              		.loc 1 343 10 is_stmt 0 view .LVU45
 170 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 171              	.LVL4:
 344:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 345:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 172              		.loc 1 345 3 is_stmt 1 view .LVU46
 173              		.loc 1 345 11 is_stmt 0 view .LVU47
ARM GAS  /tmp/ccflrkWe.s 			page 10


 174 000c 1360     		str	r3, [r2]
 346:./FWLIB/src/stm32f10x_rcc.c **** }
 175              		.loc 1 346 1 view .LVU48
 176 000e 7047     		bx	lr
 177              	.L12:
 178              		.align	2
 179              	.L11:
 180 0010 00100240 		.word	1073876992
 181              		.cfi_endproc
 182              	.LFE32:
 184              		.section	.text.RCC_HSICmd,"ax",%progbits
 185              		.align	1
 186              		.global	RCC_HSICmd
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 191              	RCC_HSICmd:
 192              	.LVL5:
 193              	.LFB33:
 347:./FWLIB/src/stm32f10x_rcc.c **** 
 348:./FWLIB/src/stm32f10x_rcc.c **** /**
 349:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:./FWLIB/src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 353:./FWLIB/src/stm32f10x_rcc.c ****   */
 354:./FWLIB/src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:./FWLIB/src/stm32f10x_rcc.c **** {
 194              		.loc 1 355 1 is_stmt 1 view -0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 356:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 199              		.loc 1 357 3 view .LVU50
 358:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 200              		.loc 1 358 3 view .LVU51
 201              		.loc 1 358 34 is_stmt 0 view .LVU52
 202 0000 014B     		ldr	r3, .L14
 203 0002 1860     		str	r0, [r3]
 359:./FWLIB/src/stm32f10x_rcc.c **** }
 204              		.loc 1 359 1 view .LVU53
 205 0004 7047     		bx	lr
 206              	.L15:
 207 0006 00BF     		.align	2
 208              	.L14:
 209 0008 00004242 		.word	1111621632
 210              		.cfi_endproc
 211              	.LFE33:
 213              		.section	.text.RCC_PLLConfig,"ax",%progbits
 214              		.align	1
 215              		.global	RCC_PLLConfig
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 220              	RCC_PLLConfig:
ARM GAS  /tmp/ccflrkWe.s 			page 11


 221              	.LVL6:
 222              	.LFB34:
 360:./FWLIB/src/stm32f10x_rcc.c **** 
 361:./FWLIB/src/stm32f10x_rcc.c **** /**
 362:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:./FWLIB/src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:./FWLIB/src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 377:./FWLIB/src/stm32f10x_rcc.c ****   */
 378:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:./FWLIB/src/stm32f10x_rcc.c **** {
 223              		.loc 1 379 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 380:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 228              		.loc 1 380 3 view .LVU55
 381:./FWLIB/src/stm32f10x_rcc.c **** 
 382:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 229              		.loc 1 383 3 view .LVU56
 384:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 230              		.loc 1 384 3 view .LVU57
 385:./FWLIB/src/stm32f10x_rcc.c **** 
 386:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 231              		.loc 1 386 3 view .LVU58
 232              		.loc 1 386 10 is_stmt 0 view .LVU59
 233 0000 034A     		ldr	r2, .L17
 234 0002 5368     		ldr	r3, [r2, #4]
 235              	.LVL7:
 387:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 236              		.loc 1 388 3 is_stmt 1 view .LVU60
 237              		.loc 1 388 10 is_stmt 0 view .LVU61
 238 0004 23F47C13 		bic	r3, r3, #4128768
 239              	.LVL8:
 389:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 240              		.loc 1 390 3 is_stmt 1 view .LVU62
 241              		.loc 1 390 27 is_stmt 0 view .LVU63
 242 0008 0843     		orrs	r0, r0, r1
 243              	.LVL9:
 244              		.loc 1 390 10 view .LVU64
 245 000a 1843     		orrs	r0, r0, r3
 246              	.LVL10:
ARM GAS  /tmp/ccflrkWe.s 			page 12


 391:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 392:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 247              		.loc 1 392 3 is_stmt 1 view .LVU65
 248              		.loc 1 392 13 is_stmt 0 view .LVU66
 249 000c 5060     		str	r0, [r2, #4]
 393:./FWLIB/src/stm32f10x_rcc.c **** }
 250              		.loc 1 393 1 view .LVU67
 251 000e 7047     		bx	lr
 252              	.L18:
 253              		.align	2
 254              	.L17:
 255 0010 00100240 		.word	1073876992
 256              		.cfi_endproc
 257              	.LFE34:
 259              		.section	.text.RCC_PLLCmd,"ax",%progbits
 260              		.align	1
 261              		.global	RCC_PLLCmd
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 266              	RCC_PLLCmd:
 267              	.LVL11:
 268              	.LFB35:
 394:./FWLIB/src/stm32f10x_rcc.c **** 
 395:./FWLIB/src/stm32f10x_rcc.c **** /**
 396:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:./FWLIB/src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 400:./FWLIB/src/stm32f10x_rcc.c ****   */
 401:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:./FWLIB/src/stm32f10x_rcc.c **** {
 269              		.loc 1 402 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 403:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 274              		.loc 1 404 3 view .LVU69
 405:./FWLIB/src/stm32f10x_rcc.c **** 
 406:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 275              		.loc 1 406 3 view .LVU70
 276              		.loc 1 406 34 is_stmt 0 view .LVU71
 277 0000 014B     		ldr	r3, .L20
 278 0002 1866     		str	r0, [r3, #96]
 407:./FWLIB/src/stm32f10x_rcc.c **** }
 279              		.loc 1 407 1 view .LVU72
 280 0004 7047     		bx	lr
 281              	.L21:
 282 0006 00BF     		.align	2
 283              	.L20:
 284 0008 00004242 		.word	1111621632
 285              		.cfi_endproc
 286              	.LFE35:
 288              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 289              		.align	1
ARM GAS  /tmp/ccflrkWe.s 			page 13


 290              		.global	RCC_SYSCLKConfig
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	RCC_SYSCLKConfig:
 296              	.LVL12:
 297              	.LFB36:
 408:./FWLIB/src/stm32f10x_rcc.c **** 
 409:./FWLIB/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:./FWLIB/src/stm32f10x_rcc.c **** /**
 411:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:./FWLIB/src/stm32f10x_rcc.c ****   * @note 
 413:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:./FWLIB/src/stm32f10x_rcc.c ****   *     devices.
 416:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:./FWLIB/src/stm32f10x_rcc.c ****   * @note 
 421:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 425:./FWLIB/src/stm32f10x_rcc.c ****   */
 426:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:./FWLIB/src/stm32f10x_rcc.c **** {
 428:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 429:./FWLIB/src/stm32f10x_rcc.c ****   
 430:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:./FWLIB/src/stm32f10x_rcc.c **** 
 434:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 435:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 437:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 439:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 440:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 441:./FWLIB/src/stm32f10x_rcc.c **** }
 442:./FWLIB/src/stm32f10x_rcc.c **** #endif
 443:./FWLIB/src/stm32f10x_rcc.c **** 
 444:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:./FWLIB/src/stm32f10x_rcc.c **** /**
 446:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:./FWLIB/src/stm32f10x_rcc.c ****   * @note 
 448:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 453:./FWLIB/src/stm32f10x_rcc.c ****   */
 454:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:./FWLIB/src/stm32f10x_rcc.c **** {
 456:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457:./FWLIB/src/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccflrkWe.s 			page 14


 458:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:./FWLIB/src/stm32f10x_rcc.c **** 
 461:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 462:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 464:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 466:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 467:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 468:./FWLIB/src/stm32f10x_rcc.c **** }
 469:./FWLIB/src/stm32f10x_rcc.c **** 
 470:./FWLIB/src/stm32f10x_rcc.c **** /**
 471:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:./FWLIB/src/stm32f10x_rcc.c ****   * @note
 473:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 478:./FWLIB/src/stm32f10x_rcc.c ****   */
 479:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:./FWLIB/src/stm32f10x_rcc.c **** {
 481:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 482:./FWLIB/src/stm32f10x_rcc.c **** 
 483:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:./FWLIB/src/stm32f10x_rcc.c **** 
 486:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 487:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 489:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 491:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 492:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 493:./FWLIB/src/stm32f10x_rcc.c **** }
 494:./FWLIB/src/stm32f10x_rcc.c **** 
 495:./FWLIB/src/stm32f10x_rcc.c **** 
 496:./FWLIB/src/stm32f10x_rcc.c **** /**
 497:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:./FWLIB/src/stm32f10x_rcc.c ****   * @note 
 499:./FWLIB/src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:./FWLIB/src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 504:./FWLIB/src/stm32f10x_rcc.c ****   */
 505:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:./FWLIB/src/stm32f10x_rcc.c **** {
 507:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:./FWLIB/src/stm32f10x_rcc.c **** 
 510:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 511:./FWLIB/src/stm32f10x_rcc.c **** }
 512:./FWLIB/src/stm32f10x_rcc.c **** 
 513:./FWLIB/src/stm32f10x_rcc.c **** 
 514:./FWLIB/src/stm32f10x_rcc.c **** /**
ARM GAS  /tmp/ccflrkWe.s 			page 15


 515:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:./FWLIB/src/stm32f10x_rcc.c ****   * @note 
 517:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 522:./FWLIB/src/stm32f10x_rcc.c ****   */
 523:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:./FWLIB/src/stm32f10x_rcc.c **** {
 525:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 526:./FWLIB/src/stm32f10x_rcc.c **** 
 527:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:./FWLIB/src/stm32f10x_rcc.c **** 
 530:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 531:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 533:./FWLIB/src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 535:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 536:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 537:./FWLIB/src/stm32f10x_rcc.c **** }
 538:./FWLIB/src/stm32f10x_rcc.c **** 
 539:./FWLIB/src/stm32f10x_rcc.c **** 
 540:./FWLIB/src/stm32f10x_rcc.c **** /**
 541:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:./FWLIB/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 545:./FWLIB/src/stm32f10x_rcc.c ****   */
 546:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:./FWLIB/src/stm32f10x_rcc.c **** {
 548:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:./FWLIB/src/stm32f10x_rcc.c **** 
 550:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 552:./FWLIB/src/stm32f10x_rcc.c **** }
 553:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:./FWLIB/src/stm32f10x_rcc.c **** 
 555:./FWLIB/src/stm32f10x_rcc.c **** /**
 556:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 563:./FWLIB/src/stm32f10x_rcc.c ****   */
 564:./FWLIB/src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:./FWLIB/src/stm32f10x_rcc.c **** {
 298              		.loc 1 565 1 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 566:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccflrkWe.s 			page 16


 303              		.loc 1 566 3 view .LVU74
 567:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 304              		.loc 1 568 3 view .LVU75
 569:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 305              		.loc 1 569 3 view .LVU76
 306              		.loc 1 569 10 is_stmt 0 view .LVU77
 307 0000 034A     		ldr	r2, .L23
 308 0002 5368     		ldr	r3, [r2, #4]
 309              	.LVL13:
 570:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 310              		.loc 1 571 3 is_stmt 1 view .LVU78
 311              		.loc 1 571 10 is_stmt 0 view .LVU79
 312 0004 23F00303 		bic	r3, r3, #3
 313              	.LVL14:
 572:./FWLIB/src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 314              		.loc 1 573 3 is_stmt 1 view .LVU80
 315              		.loc 1 573 10 is_stmt 0 view .LVU81
 316 0008 0343     		orrs	r3, r3, r0
 317              	.LVL15:
 574:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 575:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 318              		.loc 1 575 3 is_stmt 1 view .LVU82
 319              		.loc 1 575 13 is_stmt 0 view .LVU83
 320 000a 5360     		str	r3, [r2, #4]
 576:./FWLIB/src/stm32f10x_rcc.c **** }
 321              		.loc 1 576 1 view .LVU84
 322 000c 7047     		bx	lr
 323              	.L24:
 324 000e 00BF     		.align	2
 325              	.L23:
 326 0010 00100240 		.word	1073876992
 327              		.cfi_endproc
 328              	.LFE36:
 330              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 331              		.align	1
 332              		.global	RCC_GetSYSCLKSource
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 337              	RCC_GetSYSCLKSource:
 338              	.LFB37:
 577:./FWLIB/src/stm32f10x_rcc.c **** 
 578:./FWLIB/src/stm32f10x_rcc.c **** /**
 579:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:./FWLIB/src/stm32f10x_rcc.c ****   * @param  None
 581:./FWLIB/src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:./FWLIB/src/stm32f10x_rcc.c ****   *   be one of the following:
 583:./FWLIB/src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:./FWLIB/src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:./FWLIB/src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:./FWLIB/src/stm32f10x_rcc.c ****   */
 587:./FWLIB/src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:./FWLIB/src/stm32f10x_rcc.c **** {
 339              		.loc 1 588 1 is_stmt 1 view -0
ARM GAS  /tmp/ccflrkWe.s 			page 17


 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 589:./FWLIB/src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 344              		.loc 1 589 3 view .LVU86
 345              		.loc 1 589 24 is_stmt 0 view .LVU87
 346 0000 024B     		ldr	r3, .L26
 347 0002 5868     		ldr	r0, [r3, #4]
 590:./FWLIB/src/stm32f10x_rcc.c **** }
 348              		.loc 1 590 1 view .LVU88
 349 0004 00F00C00 		and	r0, r0, #12
 350 0008 7047     		bx	lr
 351              	.L27:
 352 000a 00BF     		.align	2
 353              	.L26:
 354 000c 00100240 		.word	1073876992
 355              		.cfi_endproc
 356              	.LFE37:
 358              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 359              		.align	1
 360              		.global	RCC_HCLKConfig
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 365              	RCC_HCLKConfig:
 366              	.LVL16:
 367              	.LFB38:
 591:./FWLIB/src/stm32f10x_rcc.c **** 
 592:./FWLIB/src/stm32f10x_rcc.c **** /**
 593:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:./FWLIB/src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 607:./FWLIB/src/stm32f10x_rcc.c ****   */
 608:./FWLIB/src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:./FWLIB/src/stm32f10x_rcc.c **** {
 368              		.loc 1 609 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 610:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 373              		.loc 1 610 3 view .LVU90
 611:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 374              		.loc 1 612 3 view .LVU91
ARM GAS  /tmp/ccflrkWe.s 			page 18


 613:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 375              		.loc 1 613 3 view .LVU92
 376              		.loc 1 613 10 is_stmt 0 view .LVU93
 377 0000 034A     		ldr	r2, .L29
 378 0002 5368     		ldr	r3, [r2, #4]
 379              	.LVL17:
 614:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 380              		.loc 1 615 3 is_stmt 1 view .LVU94
 381              		.loc 1 615 10 is_stmt 0 view .LVU95
 382 0004 23F0F003 		bic	r3, r3, #240
 383              	.LVL18:
 616:./FWLIB/src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 384              		.loc 1 617 3 is_stmt 1 view .LVU96
 385              		.loc 1 617 10 is_stmt 0 view .LVU97
 386 0008 0343     		orrs	r3, r3, r0
 387              	.LVL19:
 618:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 619:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 388              		.loc 1 619 3 is_stmt 1 view .LVU98
 389              		.loc 1 619 13 is_stmt 0 view .LVU99
 390 000a 5360     		str	r3, [r2, #4]
 620:./FWLIB/src/stm32f10x_rcc.c **** }
 391              		.loc 1 620 1 view .LVU100
 392 000c 7047     		bx	lr
 393              	.L30:
 394 000e 00BF     		.align	2
 395              	.L29:
 396 0010 00100240 		.word	1073876992
 397              		.cfi_endproc
 398              	.LFE38:
 400              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 401              		.align	1
 402              		.global	RCC_PCLK1Config
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 407              	RCC_PCLK1Config:
 408              	.LVL20:
 409              	.LFB39:
 621:./FWLIB/src/stm32f10x_rcc.c **** 
 622:./FWLIB/src/stm32f10x_rcc.c **** /**
 623:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:./FWLIB/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 633:./FWLIB/src/stm32f10x_rcc.c ****   */
 634:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:./FWLIB/src/stm32f10x_rcc.c **** {
 410              		.loc 1 635 1 is_stmt 1 view -0
ARM GAS  /tmp/ccflrkWe.s 			page 19


 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 636:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 415              		.loc 1 636 3 view .LVU102
 637:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 416              		.loc 1 638 3 view .LVU103
 639:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 417              		.loc 1 639 3 view .LVU104
 418              		.loc 1 639 10 is_stmt 0 view .LVU105
 419 0000 034A     		ldr	r2, .L32
 420 0002 5368     		ldr	r3, [r2, #4]
 421              	.LVL21:
 640:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 422              		.loc 1 641 3 is_stmt 1 view .LVU106
 423              		.loc 1 641 10 is_stmt 0 view .LVU107
 424 0004 23F4E063 		bic	r3, r3, #1792
 425              	.LVL22:
 642:./FWLIB/src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 426              		.loc 1 643 3 is_stmt 1 view .LVU108
 427              		.loc 1 643 10 is_stmt 0 view .LVU109
 428 0008 0343     		orrs	r3, r3, r0
 429              	.LVL23:
 644:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 645:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 430              		.loc 1 645 3 is_stmt 1 view .LVU110
 431              		.loc 1 645 13 is_stmt 0 view .LVU111
 432 000a 5360     		str	r3, [r2, #4]
 646:./FWLIB/src/stm32f10x_rcc.c **** }
 433              		.loc 1 646 1 view .LVU112
 434 000c 7047     		bx	lr
 435              	.L33:
 436 000e 00BF     		.align	2
 437              	.L32:
 438 0010 00100240 		.word	1073876992
 439              		.cfi_endproc
 440              	.LFE39:
 442              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 443              		.align	1
 444              		.global	RCC_PCLK2Config
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 449              	RCC_PCLK2Config:
 450              	.LVL24:
 451              	.LFB40:
 647:./FWLIB/src/stm32f10x_rcc.c **** 
 648:./FWLIB/src/stm32f10x_rcc.c **** /**
 649:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:./FWLIB/src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
ARM GAS  /tmp/ccflrkWe.s 			page 20


 654:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 659:./FWLIB/src/stm32f10x_rcc.c ****   */
 660:./FWLIB/src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:./FWLIB/src/stm32f10x_rcc.c **** {
 452              		.loc 1 661 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 662:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 457              		.loc 1 662 3 view .LVU114
 663:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 458              		.loc 1 664 3 view .LVU115
 665:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 459              		.loc 1 665 3 view .LVU116
 460              		.loc 1 665 10 is_stmt 0 view .LVU117
 461 0000 034A     		ldr	r2, .L35
 462 0002 5368     		ldr	r3, [r2, #4]
 463              	.LVL25:
 666:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 464              		.loc 1 667 3 is_stmt 1 view .LVU118
 465              		.loc 1 667 10 is_stmt 0 view .LVU119
 466 0004 23F46053 		bic	r3, r3, #14336
 467              	.LVL26:
 668:./FWLIB/src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 468              		.loc 1 669 3 is_stmt 1 view .LVU120
 469              		.loc 1 669 10 is_stmt 0 view .LVU121
 470 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 471              	.LVL27:
 670:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 671:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 472              		.loc 1 671 3 is_stmt 1 view .LVU122
 473              		.loc 1 671 13 is_stmt 0 view .LVU123
 474 000c 5360     		str	r3, [r2, #4]
 672:./FWLIB/src/stm32f10x_rcc.c **** }
 475              		.loc 1 672 1 view .LVU124
 476 000e 7047     		bx	lr
 477              	.L36:
 478              		.align	2
 479              	.L35:
 480 0010 00100240 		.word	1073876992
 481              		.cfi_endproc
 482              	.LFE40:
 484              		.section	.text.RCC_ITConfig,"ax",%progbits
 485              		.align	1
 486              		.global	RCC_ITConfig
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 491              	RCC_ITConfig:
ARM GAS  /tmp/ccflrkWe.s 			page 21


 492              	.LVL28:
 493              	.LFB41:
 673:./FWLIB/src/stm32f10x_rcc.c **** 
 674:./FWLIB/src/stm32f10x_rcc.c **** /**
 675:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:./FWLIB/src/stm32f10x_rcc.c ****   * 
 678:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:./FWLIB/src/stm32f10x_rcc.c ****   *   of the following values        
 680:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:./FWLIB/src/stm32f10x_rcc.c ****   * 
 688:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:./FWLIB/src/stm32f10x_rcc.c ****   *   following values        
 690:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:./FWLIB/src/stm32f10x_rcc.c ****   *       
 696:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 699:./FWLIB/src/stm32f10x_rcc.c ****   */
 700:./FWLIB/src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:./FWLIB/src/stm32f10x_rcc.c **** {
 494              		.loc 1 701 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              		@ link register save eliminated.
 702:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 499              		.loc 1 703 3 view .LVU126
 704:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 500              		.loc 1 704 3 view .LVU127
 705:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 501              		.loc 1 705 3 view .LVU128
 502              		.loc 1 705 6 is_stmt 0 view .LVU129
 503 0000 21B1     		cbz	r1, .L38
 706:./FWLIB/src/stm32f10x_rcc.c ****   {
 707:./FWLIB/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:./FWLIB/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 504              		.loc 1 708 5 is_stmt 1 view .LVU130
 505 0002 054A     		ldr	r2, .L40
 506 0004 537A     		ldrb	r3, [r2, #9]	@ zero_extendqisi2
 507              		.loc 1 708 41 is_stmt 0 view .LVU131
 508 0006 0343     		orrs	r3, r3, r0
 509 0008 5372     		strb	r3, [r2, #9]
 510 000a 7047     		bx	lr
 511              	.L38:
 709:./FWLIB/src/stm32f10x_rcc.c ****   }
ARM GAS  /tmp/ccflrkWe.s 			page 22


 710:./FWLIB/src/stm32f10x_rcc.c ****   else
 711:./FWLIB/src/stm32f10x_rcc.c ****   {
 712:./FWLIB/src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:./FWLIB/src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 512              		.loc 1 713 5 is_stmt 1 view .LVU132
 513 000c 024A     		ldr	r2, .L40
 514 000e 537A     		ldrb	r3, [r2, #9]	@ zero_extendqisi2
 515              		.loc 1 713 41 is_stmt 0 view .LVU133
 516 0010 23EA0003 		bic	r3, r3, r0
 517 0014 5372     		strb	r3, [r2, #9]
 714:./FWLIB/src/stm32f10x_rcc.c ****   }
 715:./FWLIB/src/stm32f10x_rcc.c **** }
 518              		.loc 1 715 1 view .LVU134
 519 0016 7047     		bx	lr
 520              	.L41:
 521              		.align	2
 522              	.L40:
 523 0018 00100240 		.word	1073876992
 524              		.cfi_endproc
 525              	.LFE41:
 527              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 528              		.align	1
 529              		.global	RCC_USBCLKConfig
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 534              	RCC_USBCLKConfig:
 535              	.LVL29:
 536              	.LFB42:
 716:./FWLIB/src/stm32f10x_rcc.c **** 
 717:./FWLIB/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:./FWLIB/src/stm32f10x_rcc.c **** /**
 719:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:./FWLIB/src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:./FWLIB/src/stm32f10x_rcc.c ****   *                                     clock source
 725:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 727:./FWLIB/src/stm32f10x_rcc.c ****   */
 728:./FWLIB/src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:./FWLIB/src/stm32f10x_rcc.c **** {
 537              		.loc 1 729 1 is_stmt 1 view -0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 730:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 542              		.loc 1 731 3 view .LVU136
 732:./FWLIB/src/stm32f10x_rcc.c **** 
 733:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 543              		.loc 1 733 3 view .LVU137
 544              		.loc 1 733 37 is_stmt 0 view .LVU138
 545 0000 014B     		ldr	r3, .L43
 546 0002 C3F8D800 		str	r0, [r3, #216]
ARM GAS  /tmp/ccflrkWe.s 			page 23


 734:./FWLIB/src/stm32f10x_rcc.c **** }
 547              		.loc 1 734 1 view .LVU139
 548 0006 7047     		bx	lr
 549              	.L44:
 550              		.align	2
 551              	.L43:
 552 0008 00004242 		.word	1111621632
 553              		.cfi_endproc
 554              	.LFE42:
 556              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 557              		.align	1
 558              		.global	RCC_ADCCLKConfig
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 563              	RCC_ADCCLKConfig:
 564              	.LVL30:
 565              	.LFB43:
 735:./FWLIB/src/stm32f10x_rcc.c **** #else
 736:./FWLIB/src/stm32f10x_rcc.c **** /**
 737:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:./FWLIB/src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:./FWLIB/src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 745:./FWLIB/src/stm32f10x_rcc.c ****   */
 746:./FWLIB/src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:./FWLIB/src/stm32f10x_rcc.c **** {
 748:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:./FWLIB/src/stm32f10x_rcc.c **** 
 751:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 752:./FWLIB/src/stm32f10x_rcc.c **** }
 753:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:./FWLIB/src/stm32f10x_rcc.c **** 
 755:./FWLIB/src/stm32f10x_rcc.c **** /**
 756:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:./FWLIB/src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 765:./FWLIB/src/stm32f10x_rcc.c ****   */
 766:./FWLIB/src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:./FWLIB/src/stm32f10x_rcc.c **** {
 566              		.loc 1 767 1 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 768:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccflrkWe.s 			page 24


 571              		.loc 1 768 3 view .LVU141
 769:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 572              		.loc 1 770 3 view .LVU142
 771:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 573              		.loc 1 771 3 view .LVU143
 574              		.loc 1 771 10 is_stmt 0 view .LVU144
 575 0000 034A     		ldr	r2, .L46
 576 0002 5368     		ldr	r3, [r2, #4]
 577              	.LVL31:
 772:./FWLIB/src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 578              		.loc 1 773 3 is_stmt 1 view .LVU145
 579              		.loc 1 773 10 is_stmt 0 view .LVU146
 580 0004 23F44043 		bic	r3, r3, #49152
 581              	.LVL32:
 774:./FWLIB/src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:./FWLIB/src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 582              		.loc 1 775 3 is_stmt 1 view .LVU147
 583              		.loc 1 775 10 is_stmt 0 view .LVU148
 584 0008 0343     		orrs	r3, r3, r0
 585              	.LVL33:
 776:./FWLIB/src/stm32f10x_rcc.c ****   /* Store the new value */
 777:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 586              		.loc 1 777 3 is_stmt 1 view .LVU149
 587              		.loc 1 777 13 is_stmt 0 view .LVU150
 588 000a 5360     		str	r3, [r2, #4]
 778:./FWLIB/src/stm32f10x_rcc.c **** }
 589              		.loc 1 778 1 view .LVU151
 590 000c 7047     		bx	lr
 591              	.L47:
 592 000e 00BF     		.align	2
 593              	.L46:
 594 0010 00100240 		.word	1073876992
 595              		.cfi_endproc
 596              	.LFE43:
 598              		.section	.text.RCC_LSEConfig,"ax",%progbits
 599              		.align	1
 600              		.global	RCC_LSEConfig
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 605              	RCC_LSEConfig:
 606              	.LVL34:
 607              	.LFB44:
 779:./FWLIB/src/stm32f10x_rcc.c **** 
 780:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:./FWLIB/src/stm32f10x_rcc.c **** /**
 782:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:./FWLIB/src/stm32f10x_rcc.c ****   * @note
 784:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
ARM GAS  /tmp/ccflrkWe.s 			page 25


 791:./FWLIB/src/stm32f10x_rcc.c ****   */
 792:./FWLIB/src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:./FWLIB/src/stm32f10x_rcc.c **** {
 794:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:./FWLIB/src/stm32f10x_rcc.c **** 
 797:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 798:./FWLIB/src/stm32f10x_rcc.c **** }
 799:./FWLIB/src/stm32f10x_rcc.c **** 
 800:./FWLIB/src/stm32f10x_rcc.c **** /**
 801:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:./FWLIB/src/stm32f10x_rcc.c ****   * @note
 803:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:./FWLIB/src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 810:./FWLIB/src/stm32f10x_rcc.c ****   */
 811:./FWLIB/src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:./FWLIB/src/stm32f10x_rcc.c **** {
 813:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:./FWLIB/src/stm32f10x_rcc.c **** 
 816:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 817:./FWLIB/src/stm32f10x_rcc.c **** }
 818:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:./FWLIB/src/stm32f10x_rcc.c **** 
 820:./FWLIB/src/stm32f10x_rcc.c **** /**
 821:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 828:./FWLIB/src/stm32f10x_rcc.c ****   */
 829:./FWLIB/src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:./FWLIB/src/stm32f10x_rcc.c **** {
 608              		.loc 1 830 1 is_stmt 1 view -0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 831:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 613              		.loc 1 832 3 view .LVU153
 833:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 614              		.loc 1 835 3 view .LVU154
 615              		.loc 1 835 34 is_stmt 0 view .LVU155
 616 0000 0A4B     		ldr	r3, .L52
 617 0002 0022     		movs	r2, #0
 618 0004 83F82020 		strb	r2, [r3, #32]
 836:./FWLIB/src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
ARM GAS  /tmp/ccflrkWe.s 			page 26


 837:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 619              		.loc 1 837 3 is_stmt 1 view .LVU156
 620              		.loc 1 837 34 is_stmt 0 view .LVU157
 621 0008 83F82020 		strb	r2, [r3, #32]
 838:./FWLIB/src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:./FWLIB/src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 622              		.loc 1 839 3 is_stmt 1 view .LVU158
 623 000c 0128     		cmp	r0, #1
 624 000e 02D0     		beq	.L49
 625 0010 0428     		cmp	r0, #4
 626 0012 05D0     		beq	.L50
 627 0014 7047     		bx	lr
 628              	.L49:
 840:./FWLIB/src/stm32f10x_rcc.c ****   {
 841:./FWLIB/src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:./FWLIB/src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:./FWLIB/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 629              		.loc 1 843 7 view .LVU159
 630              		.loc 1 843 38 is_stmt 0 view .LVU160
 631 0016 054B     		ldr	r3, .L52
 632 0018 0122     		movs	r2, #1
 633 001a 83F82020 		strb	r2, [r3, #32]
 844:./FWLIB/src/stm32f10x_rcc.c ****       break;
 634              		.loc 1 844 7 is_stmt 1 view .LVU161
 635 001e 7047     		bx	lr
 636              	.L50:
 845:./FWLIB/src/stm32f10x_rcc.c ****       
 846:./FWLIB/src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:./FWLIB/src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:./FWLIB/src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 637              		.loc 1 848 7 view .LVU162
 638              		.loc 1 848 38 is_stmt 0 view .LVU163
 639 0020 024B     		ldr	r3, .L52
 640 0022 0522     		movs	r2, #5
 641 0024 83F82020 		strb	r2, [r3, #32]
 849:./FWLIB/src/stm32f10x_rcc.c ****       break;            
 642              		.loc 1 849 7 is_stmt 1 view .LVU164
 850:./FWLIB/src/stm32f10x_rcc.c ****       
 851:./FWLIB/src/stm32f10x_rcc.c ****     default:
 852:./FWLIB/src/stm32f10x_rcc.c ****       break;      
 853:./FWLIB/src/stm32f10x_rcc.c ****   }
 854:./FWLIB/src/stm32f10x_rcc.c **** }
 643              		.loc 1 854 1 is_stmt 0 view .LVU165
 644 0028 7047     		bx	lr
 645              	.L53:
 646 002a 00BF     		.align	2
 647              	.L52:
 648 002c 00100240 		.word	1073876992
 649              		.cfi_endproc
 650              	.LFE44:
 652              		.section	.text.RCC_LSICmd,"ax",%progbits
 653              		.align	1
 654              		.global	RCC_LSICmd
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 659              	RCC_LSICmd:
ARM GAS  /tmp/ccflrkWe.s 			page 27


 660              	.LVL35:
 661              	.LFB45:
 855:./FWLIB/src/stm32f10x_rcc.c **** 
 856:./FWLIB/src/stm32f10x_rcc.c **** /**
 857:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:./FWLIB/src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 861:./FWLIB/src/stm32f10x_rcc.c ****   */
 862:./FWLIB/src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:./FWLIB/src/stm32f10x_rcc.c **** {
 662              		.loc 1 863 1 is_stmt 1 view -0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 864:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 667              		.loc 1 865 3 view .LVU167
 866:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 668              		.loc 1 866 3 view .LVU168
 669              		.loc 1 866 35 is_stmt 0 view .LVU169
 670 0000 014B     		ldr	r3, .L55
 671 0002 C3F88004 		str	r0, [r3, #1152]
 867:./FWLIB/src/stm32f10x_rcc.c **** }
 672              		.loc 1 867 1 view .LVU170
 673 0006 7047     		bx	lr
 674              	.L56:
 675              		.align	2
 676              	.L55:
 677 0008 00004242 		.word	1111621632
 678              		.cfi_endproc
 679              	.LFE45:
 681              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 682              		.align	1
 683              		.global	RCC_RTCCLKConfig
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 688              	RCC_RTCCLKConfig:
 689              	.LVL36:
 690              	.LFB46:
 868:./FWLIB/src/stm32f10x_rcc.c **** 
 869:./FWLIB/src/stm32f10x_rcc.c **** /**
 870:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:./FWLIB/src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 878:./FWLIB/src/stm32f10x_rcc.c ****   */
 879:./FWLIB/src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:./FWLIB/src/stm32f10x_rcc.c **** {
 691              		.loc 1 880 1 is_stmt 1 view -0
 692              		.cfi_startproc
ARM GAS  /tmp/ccflrkWe.s 			page 28


 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 881:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 696              		.loc 1 882 3 view .LVU172
 883:./FWLIB/src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:./FWLIB/src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 697              		.loc 1 884 3 view .LVU173
 698              		.loc 1 884 6 is_stmt 0 view .LVU174
 699 0000 024A     		ldr	r2, .L58
 700 0002 136A     		ldr	r3, [r2, #32]
 701              		.loc 1 884 13 view .LVU175
 702 0004 0343     		orrs	r3, r3, r0
 703 0006 1362     		str	r3, [r2, #32]
 885:./FWLIB/src/stm32f10x_rcc.c **** }
 704              		.loc 1 885 1 view .LVU176
 705 0008 7047     		bx	lr
 706              	.L59:
 707 000a 00BF     		.align	2
 708              	.L58:
 709 000c 00100240 		.word	1073876992
 710              		.cfi_endproc
 711              	.LFE46:
 713              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 714              		.align	1
 715              		.global	RCC_RTCCLKCmd
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 720              	RCC_RTCCLKCmd:
 721              	.LVL37:
 722              	.LFB47:
 886:./FWLIB/src/stm32f10x_rcc.c **** 
 887:./FWLIB/src/stm32f10x_rcc.c **** /**
 888:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:./FWLIB/src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 892:./FWLIB/src/stm32f10x_rcc.c ****   */
 893:./FWLIB/src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:./FWLIB/src/stm32f10x_rcc.c **** {
 723              		.loc 1 894 1 is_stmt 1 view -0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 895:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 728              		.loc 1 896 3 view .LVU178
 897:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 729              		.loc 1 897 3 view .LVU179
 730              		.loc 1 897 36 is_stmt 0 view .LVU180
 731 0000 014B     		ldr	r3, .L61
 732 0002 C3F83C04 		str	r0, [r3, #1084]
 898:./FWLIB/src/stm32f10x_rcc.c **** }
 733              		.loc 1 898 1 view .LVU181
ARM GAS  /tmp/ccflrkWe.s 			page 29


 734 0006 7047     		bx	lr
 735              	.L62:
 736              		.align	2
 737              	.L61:
 738 0008 00004242 		.word	1111621632
 739              		.cfi_endproc
 740              	.LFE47:
 742              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 743              		.align	1
 744              		.global	RCC_GetClocksFreq
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 749              	RCC_GetClocksFreq:
 750              	.LVL38:
 751              	.LFB48:
 899:./FWLIB/src/stm32f10x_rcc.c **** 
 900:./FWLIB/src/stm32f10x_rcc.c **** /**
 901:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:./FWLIB/src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:./FWLIB/src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:./FWLIB/src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
 907:./FWLIB/src/stm32f10x_rcc.c ****   */
 908:./FWLIB/src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:./FWLIB/src/stm32f10x_rcc.c **** {
 752              		.loc 1 909 1 is_stmt 1 view -0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757              		.loc 1 909 1 is_stmt 0 view .LVU183
 758 0000 10B4     		push	{r4}
 759              	.LCFI0:
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 4, -4
 910:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 762              		.loc 1 910 3 is_stmt 1 view .LVU184
 763              	.LVL39:
 911:./FWLIB/src/stm32f10x_rcc.c **** 
 912:./FWLIB/src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 914:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:./FWLIB/src/stm32f10x_rcc.c **** 
 916:./FWLIB/src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 918:./FWLIB/src/stm32f10x_rcc.c **** #endif
 919:./FWLIB/src/stm32f10x_rcc.c ****     
 920:./FWLIB/src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 764              		.loc 1 921 3 view .LVU185
 765              		.loc 1 921 12 is_stmt 0 view .LVU186
 766 0002 274B     		ldr	r3, .L71
 767 0004 5B68     		ldr	r3, [r3, #4]
 768              		.loc 1 921 7 view .LVU187
 769 0006 03F00C03 		and	r3, r3, #12
ARM GAS  /tmp/ccflrkWe.s 			page 30


 770              	.LVL40:
 922:./FWLIB/src/stm32f10x_rcc.c ****   
 923:./FWLIB/src/stm32f10x_rcc.c ****   switch (tmp)
 771              		.loc 1 923 3 is_stmt 1 view .LVU188
 772 000a 042B     		cmp	r3, #4
 773 000c 25D0     		beq	.L64
 774 000e 082B     		cmp	r3, #8
 775 0010 26D0     		beq	.L65
 776 0012 002B     		cmp	r3, #0
 777 0014 41D1     		bne	.L66
 924:./FWLIB/src/stm32f10x_rcc.c ****   {
 925:./FWLIB/src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:./FWLIB/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 778              		.loc 1 926 7 view .LVU189
 779              		.loc 1 926 36 is_stmt 0 view .LVU190
 780 0016 234B     		ldr	r3, .L71+4
 781              	.LVL41:
 782              		.loc 1 926 36 view .LVU191
 783 0018 0360     		str	r3, [r0]
 927:./FWLIB/src/stm32f10x_rcc.c ****       break;
 784              		.loc 1 927 7 is_stmt 1 view .LVU192
 785              	.LVL42:
 786              	.L67:
 928:./FWLIB/src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:./FWLIB/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 930:./FWLIB/src/stm32f10x_rcc.c ****       break;
 931:./FWLIB/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:./FWLIB/src/stm32f10x_rcc.c **** 
 933:./FWLIB/src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:./FWLIB/src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 935:./FWLIB/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 936:./FWLIB/src/stm32f10x_rcc.c ****       
 937:./FWLIB/src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:./FWLIB/src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 939:./FWLIB/src/stm32f10x_rcc.c ****       
 940:./FWLIB/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 941:./FWLIB/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:./FWLIB/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 943:./FWLIB/src/stm32f10x_rcc.c ****       }
 944:./FWLIB/src/stm32f10x_rcc.c ****       else
 945:./FWLIB/src/stm32f10x_rcc.c ****       {
 946:./FWLIB/src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:./FWLIB/src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:./FWLIB/src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:./FWLIB/src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:./FWLIB/src/stm32f10x_rcc.c ****  #else
 951:./FWLIB/src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:./FWLIB/src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:./FWLIB/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:./FWLIB/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:./FWLIB/src/stm32f10x_rcc.c ****         }
 956:./FWLIB/src/stm32f10x_rcc.c ****         else
 957:./FWLIB/src/stm32f10x_rcc.c ****         {
 958:./FWLIB/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:./FWLIB/src/stm32f10x_rcc.c ****         }
 960:./FWLIB/src/stm32f10x_rcc.c ****  #endif
 961:./FWLIB/src/stm32f10x_rcc.c ****       }
ARM GAS  /tmp/ccflrkWe.s 			page 31


 962:./FWLIB/src/stm32f10x_rcc.c **** #else
 963:./FWLIB/src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 964:./FWLIB/src/stm32f10x_rcc.c ****       
 965:./FWLIB/src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 966:./FWLIB/src/stm32f10x_rcc.c ****       {
 967:./FWLIB/src/stm32f10x_rcc.c ****          pllmull += 2;
 968:./FWLIB/src/stm32f10x_rcc.c ****       }
 969:./FWLIB/src/stm32f10x_rcc.c ****       else
 970:./FWLIB/src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:./FWLIB/src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 972:./FWLIB/src/stm32f10x_rcc.c ****       }
 973:./FWLIB/src/stm32f10x_rcc.c ****             
 974:./FWLIB/src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 975:./FWLIB/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:./FWLIB/src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 977:./FWLIB/src/stm32f10x_rcc.c ****       }
 978:./FWLIB/src/stm32f10x_rcc.c ****       else
 979:./FWLIB/src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:./FWLIB/src/stm32f10x_rcc.c ****         
 981:./FWLIB/src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:./FWLIB/src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 983:./FWLIB/src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 984:./FWLIB/src/stm32f10x_rcc.c ****         
 985:./FWLIB/src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 986:./FWLIB/src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:./FWLIB/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 988:./FWLIB/src/stm32f10x_rcc.c ****         }
 989:./FWLIB/src/stm32f10x_rcc.c ****         else
 990:./FWLIB/src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:./FWLIB/src/stm32f10x_rcc.c ****           
 992:./FWLIB/src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:./FWLIB/src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 994:./FWLIB/src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 995:./FWLIB/src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 996:./FWLIB/src/stm32f10x_rcc.c ****         }
 997:./FWLIB/src/stm32f10x_rcc.c ****       }
 998:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:./FWLIB/src/stm32f10x_rcc.c ****       break;
1000:./FWLIB/src/stm32f10x_rcc.c **** 
1001:./FWLIB/src/stm32f10x_rcc.c ****     default:
1002:./FWLIB/src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1003:./FWLIB/src/stm32f10x_rcc.c ****       break;
1004:./FWLIB/src/stm32f10x_rcc.c ****   }
1005:./FWLIB/src/stm32f10x_rcc.c **** 
1006:./FWLIB/src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:./FWLIB/src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 787              		.loc 1 1008 3 view .LVU193
 788              		.loc 1 1008 12 is_stmt 0 view .LVU194
 789 001a 214A     		ldr	r2, .L71
 790 001c 5368     		ldr	r3, [r2, #4]
 791              	.LVL43:
1009:./FWLIB/src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 792              		.loc 1 1009 3 is_stmt 1 view .LVU195
 793              		.loc 1 1009 7 is_stmt 0 view .LVU196
 794 001e C3F30313 		ubfx	r3, r3, #4, #4
 795              	.LVL44:
ARM GAS  /tmp/ccflrkWe.s 			page 32


1010:./FWLIB/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 796              		.loc 1 1010 3 is_stmt 1 view .LVU197
 797              		.loc 1 1010 27 is_stmt 0 view .LVU198
 798 0022 214C     		ldr	r4, .L71+8
 799 0024 E15C     		ldrb	r1, [r4, r3]	@ zero_extendqisi2
 800              	.LVL45:
1011:./FWLIB/src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:./FWLIB/src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 801              		.loc 1 1012 3 is_stmt 1 view .LVU199
 802              		.loc 1 1012 42 is_stmt 0 view .LVU200
 803 0026 0368     		ldr	r3, [r0]
 804              	.LVL46:
 805              		.loc 1 1012 61 view .LVU201
 806 0028 CB40     		lsrs	r3, r3, r1
 807              		.loc 1 1012 30 view .LVU202
 808 002a 4360     		str	r3, [r0, #4]
1013:./FWLIB/src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 809              		.loc 1 1014 3 is_stmt 1 view .LVU203
 810              		.loc 1 1014 12 is_stmt 0 view .LVU204
 811 002c 5168     		ldr	r1, [r2, #4]
 812              	.LVL47:
1015:./FWLIB/src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 813              		.loc 1 1015 3 is_stmt 1 view .LVU205
 814              		.loc 1 1015 7 is_stmt 0 view .LVU206
 815 002e C1F30221 		ubfx	r1, r1, #8, #3
 816              	.LVL48:
1016:./FWLIB/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 817              		.loc 1 1016 3 is_stmt 1 view .LVU207
 818              		.loc 1 1016 27 is_stmt 0 view .LVU208
 819 0032 615C     		ldrb	r1, [r4, r1]	@ zero_extendqisi2
 820              	.LVL49:
1017:./FWLIB/src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:./FWLIB/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 821              		.loc 1 1018 3 is_stmt 1 view .LVU209
 822              		.loc 1 1018 60 is_stmt 0 view .LVU210
 823 0034 23FA01F1 		lsr	r1, r3, r1
 824              	.LVL50:
 825              		.loc 1 1018 31 view .LVU211
 826 0038 8160     		str	r1, [r0, #8]
1019:./FWLIB/src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 827              		.loc 1 1020 3 is_stmt 1 view .LVU212
 828              		.loc 1 1020 12 is_stmt 0 view .LVU213
 829 003a 5168     		ldr	r1, [r2, #4]
 830              	.LVL51:
1021:./FWLIB/src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 831              		.loc 1 1021 3 is_stmt 1 view .LVU214
 832              		.loc 1 1021 7 is_stmt 0 view .LVU215
 833 003c C1F3C221 		ubfx	r1, r1, #11, #3
 834              	.LVL52:
1022:./FWLIB/src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 835              		.loc 1 1022 3 is_stmt 1 view .LVU216
 836              		.loc 1 1022 27 is_stmt 0 view .LVU217
 837 0040 615C     		ldrb	r1, [r4, r1]	@ zero_extendqisi2
 838              	.LVL53:
1023:./FWLIB/src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
ARM GAS  /tmp/ccflrkWe.s 			page 33


1024:./FWLIB/src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 839              		.loc 1 1024 3 is_stmt 1 view .LVU218
 840              		.loc 1 1024 60 is_stmt 0 view .LVU219
 841 0042 CB40     		lsrs	r3, r3, r1
 842              		.loc 1 1024 31 view .LVU220
 843 0044 C360     		str	r3, [r0, #12]
1025:./FWLIB/src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 844              		.loc 1 1026 3 is_stmt 1 view .LVU221
 845              		.loc 1 1026 12 is_stmt 0 view .LVU222
 846 0046 5268     		ldr	r2, [r2, #4]
 847              	.LVL54:
1027:./FWLIB/src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 848              		.loc 1 1027 3 is_stmt 1 view .LVU223
 849              		.loc 1 1027 7 is_stmt 0 view .LVU224
 850 0048 C2F38132 		ubfx	r2, r2, #14, #2
 851              	.LVL55:
1028:./FWLIB/src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 852              		.loc 1 1028 3 is_stmt 1 view .LVU225
 853              		.loc 1 1028 24 is_stmt 0 view .LVU226
 854 004c 1749     		ldr	r1, .L71+12
 855              	.LVL56:
 856              		.loc 1 1028 24 view .LVU227
 857 004e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 858              	.LVL57:
1029:./FWLIB/src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:./FWLIB/src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 859              		.loc 1 1030 3 is_stmt 1 view .LVU228
 860              		.loc 1 1030 62 is_stmt 0 view .LVU229
 861 0050 B3FBF2F3 		udiv	r3, r3, r2
 862              		.loc 1 1030 32 view .LVU230
 863 0054 0361     		str	r3, [r0, #16]
1031:./FWLIB/src/stm32f10x_rcc.c **** }
 864              		.loc 1 1031 1 view .LVU231
 865 0056 10BC     		pop	{r4}
 866              	.LCFI1:
 867              		.cfi_remember_state
 868              		.cfi_restore 4
 869              		.cfi_def_cfa_offset 0
 870 0058 7047     		bx	lr
 871              	.LVL58:
 872              	.L64:
 873              	.LCFI2:
 874              		.cfi_restore_state
 929:./FWLIB/src/stm32f10x_rcc.c ****       break;
 875              		.loc 1 929 7 is_stmt 1 view .LVU232
 929:./FWLIB/src/stm32f10x_rcc.c ****       break;
 876              		.loc 1 929 36 is_stmt 0 view .LVU233
 877 005a 124B     		ldr	r3, .L71+4
 878              	.LVL59:
 929:./FWLIB/src/stm32f10x_rcc.c ****       break;
 879              		.loc 1 929 36 view .LVU234
 880 005c 0360     		str	r3, [r0]
 930:./FWLIB/src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 881              		.loc 1 930 7 is_stmt 1 view .LVU235
 882 005e DCE7     		b	.L67
 883              	.LVL60:
ARM GAS  /tmp/ccflrkWe.s 			page 34


 884              	.L65:
 934:./FWLIB/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 885              		.loc 1 934 7 view .LVU236
 934:./FWLIB/src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 886              		.loc 1 934 20 is_stmt 0 view .LVU237
 887 0060 0F4A     		ldr	r2, .L71
 888 0062 5368     		ldr	r3, [r2, #4]
 889              	.LVL61:
 935:./FWLIB/src/stm32f10x_rcc.c ****       
 890              		.loc 1 935 7 is_stmt 1 view .LVU238
 935:./FWLIB/src/stm32f10x_rcc.c ****       
 891              		.loc 1 935 22 is_stmt 0 view .LVU239
 892 0064 5268     		ldr	r2, [r2, #4]
 893              	.LVL62:
 938:./FWLIB/src/stm32f10x_rcc.c ****       
 894              		.loc 1 938 7 is_stmt 1 view .LVU240
 938:./FWLIB/src/stm32f10x_rcc.c ****       
 895              		.loc 1 938 27 is_stmt 0 view .LVU241
 896 0066 C3F38343 		ubfx	r3, r3, #18, #4
 897              	.LVL63:
 938:./FWLIB/src/stm32f10x_rcc.c ****       
 898              		.loc 1 938 15 view .LVU242
 899 006a 0233     		adds	r3, r3, #2
 900              	.LVL64:
 940:./FWLIB/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 901              		.loc 1 940 7 is_stmt 1 view .LVU243
 940:./FWLIB/src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 902              		.loc 1 940 10 is_stmt 0 view .LVU244
 903 006c 12F4803F 		tst	r2, #65536
 904 0070 04D1     		bne	.L68
 942:./FWLIB/src/stm32f10x_rcc.c ****       }
 905              		.loc 1 942 9 is_stmt 1 view .LVU245
 942:./FWLIB/src/stm32f10x_rcc.c ****       }
 906              		.loc 1 942 57 is_stmt 0 view .LVU246
 907 0072 0F4A     		ldr	r2, .L71+16
 908              	.LVL65:
 942:./FWLIB/src/stm32f10x_rcc.c ****       }
 909              		.loc 1 942 57 view .LVU247
 910 0074 02FB03F3 		mul	r3, r2, r3
 911              	.LVL66:
 942:./FWLIB/src/stm32f10x_rcc.c ****       }
 912              		.loc 1 942 38 view .LVU248
 913 0078 0360     		str	r3, [r0]
 914 007a CEE7     		b	.L67
 915              	.LVL67:
 916              	.L68:
 952:./FWLIB/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 917              		.loc 1 952 9 is_stmt 1 view .LVU249
 952:./FWLIB/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 918              		.loc 1 952 17 is_stmt 0 view .LVU250
 919 007c 084A     		ldr	r2, .L71
 920              	.LVL68:
 952:./FWLIB/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 921              		.loc 1 952 17 view .LVU251
 922 007e 5268     		ldr	r2, [r2, #4]
 952:./FWLIB/src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 923              		.loc 1 952 12 view .LVU252
ARM GAS  /tmp/ccflrkWe.s 			page 35


 924 0080 12F4003F 		tst	r2, #131072
 925 0084 04D0     		beq	.L69
 954:./FWLIB/src/stm32f10x_rcc.c ****         }
 926              		.loc 1 954 11 is_stmt 1 view .LVU253
 954:./FWLIB/src/stm32f10x_rcc.c ****         }
 927              		.loc 1 954 59 is_stmt 0 view .LVU254
 928 0086 0A4A     		ldr	r2, .L71+16
 929 0088 02FB03F3 		mul	r3, r2, r3
 930              	.LVL69:
 954:./FWLIB/src/stm32f10x_rcc.c ****         }
 931              		.loc 1 954 40 view .LVU255
 932 008c 0360     		str	r3, [r0]
 933 008e C4E7     		b	.L67
 934              	.LVL70:
 935              	.L69:
 958:./FWLIB/src/stm32f10x_rcc.c ****         }
 936              		.loc 1 958 11 is_stmt 1 view .LVU256
 958:./FWLIB/src/stm32f10x_rcc.c ****         }
 937              		.loc 1 958 52 is_stmt 0 view .LVU257
 938 0090 044A     		ldr	r2, .L71+4
 939 0092 02FB03F3 		mul	r3, r2, r3
 940              	.LVL71:
 958:./FWLIB/src/stm32f10x_rcc.c ****         }
 941              		.loc 1 958 40 view .LVU258
 942 0096 0360     		str	r3, [r0]
 943 0098 BFE7     		b	.L67
 944              	.LVL72:
 945              	.L66:
1002:./FWLIB/src/stm32f10x_rcc.c ****       break;
 946              		.loc 1 1002 7 is_stmt 1 view .LVU259
1002:./FWLIB/src/stm32f10x_rcc.c ****       break;
 947              		.loc 1 1002 36 is_stmt 0 view .LVU260
 948 009a 024B     		ldr	r3, .L71+4
 949              	.LVL73:
1002:./FWLIB/src/stm32f10x_rcc.c ****       break;
 950              		.loc 1 1002 36 view .LVU261
 951 009c 0360     		str	r3, [r0]
1003:./FWLIB/src/stm32f10x_rcc.c ****   }
 952              		.loc 1 1003 7 is_stmt 1 view .LVU262
 953 009e BCE7     		b	.L67
 954              	.L72:
 955              		.align	2
 956              	.L71:
 957 00a0 00100240 		.word	1073876992
 958 00a4 00127A00 		.word	8000000
 959 00a8 00000000 		.word	APBAHBPrescTable
 960 00ac 00000000 		.word	ADCPrescTable
 961 00b0 00093D00 		.word	4000000
 962              		.cfi_endproc
 963              	.LFE48:
 965              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 966              		.align	1
 967              		.global	RCC_AHBPeriphClockCmd
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 972              	RCC_AHBPeriphClockCmd:
ARM GAS  /tmp/ccflrkWe.s 			page 36


 973              	.LVL74:
 974              	.LFB49:
1032:./FWLIB/src/stm32f10x_rcc.c **** 
1033:./FWLIB/src/stm32f10x_rcc.c **** /**
1034:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:./FWLIB/src/stm32f10x_rcc.c ****   *   
1037:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:./FWLIB/src/stm32f10x_rcc.c ****   *   of the following values:        
1039:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:./FWLIB/src/stm32f10x_rcc.c ****   * 
1049:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:./FWLIB/src/stm32f10x_rcc.c ****   *   following values:        
1051:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:./FWLIB/src/stm32f10x_rcc.c ****   *   
1059:./FWLIB/src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1063:./FWLIB/src/stm32f10x_rcc.c ****   */
1064:./FWLIB/src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:./FWLIB/src/stm32f10x_rcc.c **** {
 975              		.loc 1 1065 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		@ link register save eliminated.
1066:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
 980              		.loc 1 1067 3 view .LVU264
1068:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 981              		.loc 1 1068 3 view .LVU265
1069:./FWLIB/src/stm32f10x_rcc.c **** 
1070:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 982              		.loc 1 1070 3 view .LVU266
 983              		.loc 1 1070 6 is_stmt 0 view .LVU267
 984 0000 21B1     		cbz	r1, .L74
1071:./FWLIB/src/stm32f10x_rcc.c ****   {
1072:./FWLIB/src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 985              		.loc 1 1072 5 is_stmt 1 view .LVU268
 986              		.loc 1 1072 8 is_stmt 0 view .LVU269
 987 0002 054A     		ldr	r2, .L76
 988 0004 5369     		ldr	r3, [r2, #20]
ARM GAS  /tmp/ccflrkWe.s 			page 37


 989              		.loc 1 1072 17 view .LVU270
 990 0006 0343     		orrs	r3, r3, r0
 991 0008 5361     		str	r3, [r2, #20]
 992 000a 7047     		bx	lr
 993              	.L74:
1073:./FWLIB/src/stm32f10x_rcc.c ****   }
1074:./FWLIB/src/stm32f10x_rcc.c ****   else
1075:./FWLIB/src/stm32f10x_rcc.c ****   {
1076:./FWLIB/src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 994              		.loc 1 1076 5 is_stmt 1 view .LVU271
 995              		.loc 1 1076 8 is_stmt 0 view .LVU272
 996 000c 024A     		ldr	r2, .L76
 997 000e 5369     		ldr	r3, [r2, #20]
 998              		.loc 1 1076 17 view .LVU273
 999 0010 23EA0003 		bic	r3, r3, r0
 1000 0014 5361     		str	r3, [r2, #20]
1077:./FWLIB/src/stm32f10x_rcc.c ****   }
1078:./FWLIB/src/stm32f10x_rcc.c **** }
 1001              		.loc 1 1078 1 view .LVU274
 1002 0016 7047     		bx	lr
 1003              	.L77:
 1004              		.align	2
 1005              	.L76:
 1006 0018 00100240 		.word	1073876992
 1007              		.cfi_endproc
 1008              	.LFE49:
 1010              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1011              		.align	1
 1012              		.global	RCC_APB2PeriphClockCmd
 1013              		.syntax unified
 1014              		.thumb
 1015              		.thumb_func
 1017              	RCC_APB2PeriphClockCmd:
 1018              	.LVL75:
 1019              	.LFB50:
1079:./FWLIB/src/stm32f10x_rcc.c **** 
1080:./FWLIB/src/stm32f10x_rcc.c **** /**
1081:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1094:./FWLIB/src/stm32f10x_rcc.c ****   */
1095:./FWLIB/src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:./FWLIB/src/stm32f10x_rcc.c **** {
 1020              		.loc 1 1096 1 is_stmt 1 view -0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 0
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccflrkWe.s 			page 38


 1024              		@ link register save eliminated.
1097:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1025              		.loc 1 1098 3 view .LVU276
1099:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1026              		.loc 1 1099 3 view .LVU277
1100:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1027              		.loc 1 1100 3 view .LVU278
 1028              		.loc 1 1100 6 is_stmt 0 view .LVU279
 1029 0000 21B1     		cbz	r1, .L79
1101:./FWLIB/src/stm32f10x_rcc.c ****   {
1102:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1030              		.loc 1 1102 5 is_stmt 1 view .LVU280
 1031              		.loc 1 1102 8 is_stmt 0 view .LVU281
 1032 0002 054A     		ldr	r2, .L81
 1033 0004 9369     		ldr	r3, [r2, #24]
 1034              		.loc 1 1102 18 view .LVU282
 1035 0006 0343     		orrs	r3, r3, r0
 1036 0008 9361     		str	r3, [r2, #24]
 1037 000a 7047     		bx	lr
 1038              	.L79:
1103:./FWLIB/src/stm32f10x_rcc.c ****   }
1104:./FWLIB/src/stm32f10x_rcc.c ****   else
1105:./FWLIB/src/stm32f10x_rcc.c ****   {
1106:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1039              		.loc 1 1106 5 is_stmt 1 view .LVU283
 1040              		.loc 1 1106 8 is_stmt 0 view .LVU284
 1041 000c 024A     		ldr	r2, .L81
 1042 000e 9369     		ldr	r3, [r2, #24]
 1043              		.loc 1 1106 18 view .LVU285
 1044 0010 23EA0003 		bic	r3, r3, r0
 1045 0014 9361     		str	r3, [r2, #24]
1107:./FWLIB/src/stm32f10x_rcc.c ****   }
1108:./FWLIB/src/stm32f10x_rcc.c **** }
 1046              		.loc 1 1108 1 view .LVU286
 1047 0016 7047     		bx	lr
 1048              	.L82:
 1049              		.align	2
 1050              	.L81:
 1051 0018 00100240 		.word	1073876992
 1052              		.cfi_endproc
 1053              	.LFE50:
 1055              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1056              		.align	1
 1057              		.global	RCC_APB1PeriphClockCmd
 1058              		.syntax unified
 1059              		.thumb
 1060              		.thumb_func
 1062              	RCC_APB1PeriphClockCmd:
 1063              	.LVL76:
 1064              	.LFB51:
1109:./FWLIB/src/stm32f10x_rcc.c **** 
1110:./FWLIB/src/stm32f10x_rcc.c **** /**
1111:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
ARM GAS  /tmp/ccflrkWe.s 			page 39


1115:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1125:./FWLIB/src/stm32f10x_rcc.c ****   */
1126:./FWLIB/src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:./FWLIB/src/stm32f10x_rcc.c **** {
 1065              		.loc 1 1127 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
1128:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1070              		.loc 1 1129 3 view .LVU288
1130:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1071              		.loc 1 1130 3 view .LVU289
1131:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1072              		.loc 1 1131 3 view .LVU290
 1073              		.loc 1 1131 6 is_stmt 0 view .LVU291
 1074 0000 21B1     		cbz	r1, .L84
1132:./FWLIB/src/stm32f10x_rcc.c ****   {
1133:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1075              		.loc 1 1133 5 is_stmt 1 view .LVU292
 1076              		.loc 1 1133 8 is_stmt 0 view .LVU293
 1077 0002 054A     		ldr	r2, .L86
 1078 0004 D369     		ldr	r3, [r2, #28]
 1079              		.loc 1 1133 18 view .LVU294
 1080 0006 0343     		orrs	r3, r3, r0
 1081 0008 D361     		str	r3, [r2, #28]
 1082 000a 7047     		bx	lr
 1083              	.L84:
1134:./FWLIB/src/stm32f10x_rcc.c ****   }
1135:./FWLIB/src/stm32f10x_rcc.c ****   else
1136:./FWLIB/src/stm32f10x_rcc.c ****   {
1137:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1084              		.loc 1 1137 5 is_stmt 1 view .LVU295
 1085              		.loc 1 1137 8 is_stmt 0 view .LVU296
 1086 000c 024A     		ldr	r2, .L86
 1087 000e D369     		ldr	r3, [r2, #28]
 1088              		.loc 1 1137 18 view .LVU297
 1089 0010 23EA0003 		bic	r3, r3, r0
 1090 0014 D361     		str	r3, [r2, #28]
1138:./FWLIB/src/stm32f10x_rcc.c ****   }
1139:./FWLIB/src/stm32f10x_rcc.c **** }
 1091              		.loc 1 1139 1 view .LVU298
 1092 0016 7047     		bx	lr
 1093              	.L87:
 1094              		.align	2
 1095              	.L86:
 1096 0018 00100240 		.word	1073876992
ARM GAS  /tmp/ccflrkWe.s 			page 40


 1097              		.cfi_endproc
 1098              	.LFE51:
 1100              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1101              		.align	1
 1102              		.global	RCC_APB2PeriphResetCmd
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1107              	RCC_APB2PeriphResetCmd:
 1108              	.LVL77:
 1109              	.LFB52:
1140:./FWLIB/src/stm32f10x_rcc.c **** 
1141:./FWLIB/src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:./FWLIB/src/stm32f10x_rcc.c **** /**
1143:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:./FWLIB/src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1152:./FWLIB/src/stm32f10x_rcc.c ****   */
1153:./FWLIB/src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:./FWLIB/src/stm32f10x_rcc.c **** {
1155:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:./FWLIB/src/stm32f10x_rcc.c **** 
1159:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1160:./FWLIB/src/stm32f10x_rcc.c ****   {
1161:./FWLIB/src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1162:./FWLIB/src/stm32f10x_rcc.c ****   }
1163:./FWLIB/src/stm32f10x_rcc.c ****   else
1164:./FWLIB/src/stm32f10x_rcc.c ****   {
1165:./FWLIB/src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1166:./FWLIB/src/stm32f10x_rcc.c ****   }
1167:./FWLIB/src/stm32f10x_rcc.c **** }
1168:./FWLIB/src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:./FWLIB/src/stm32f10x_rcc.c **** 
1170:./FWLIB/src/stm32f10x_rcc.c **** /**
1171:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1184:./FWLIB/src/stm32f10x_rcc.c ****   */
1185:./FWLIB/src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
ARM GAS  /tmp/ccflrkWe.s 			page 41


1186:./FWLIB/src/stm32f10x_rcc.c **** {
 1110              		.loc 1 1186 1 is_stmt 1 view -0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
1187:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1115              		.loc 1 1188 3 view .LVU300
1189:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1116              		.loc 1 1189 3 view .LVU301
1190:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1117              		.loc 1 1190 3 view .LVU302
 1118              		.loc 1 1190 6 is_stmt 0 view .LVU303
 1119 0000 21B1     		cbz	r1, .L89
1191:./FWLIB/src/stm32f10x_rcc.c ****   {
1192:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1120              		.loc 1 1192 5 is_stmt 1 view .LVU304
 1121              		.loc 1 1192 8 is_stmt 0 view .LVU305
 1122 0002 054A     		ldr	r2, .L91
 1123 0004 D368     		ldr	r3, [r2, #12]
 1124              		.loc 1 1192 19 view .LVU306
 1125 0006 0343     		orrs	r3, r3, r0
 1126 0008 D360     		str	r3, [r2, #12]
 1127 000a 7047     		bx	lr
 1128              	.L89:
1193:./FWLIB/src/stm32f10x_rcc.c ****   }
1194:./FWLIB/src/stm32f10x_rcc.c ****   else
1195:./FWLIB/src/stm32f10x_rcc.c ****   {
1196:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1129              		.loc 1 1196 5 is_stmt 1 view .LVU307
 1130              		.loc 1 1196 8 is_stmt 0 view .LVU308
 1131 000c 024A     		ldr	r2, .L91
 1132 000e D368     		ldr	r3, [r2, #12]
 1133              		.loc 1 1196 19 view .LVU309
 1134 0010 23EA0003 		bic	r3, r3, r0
 1135 0014 D360     		str	r3, [r2, #12]
1197:./FWLIB/src/stm32f10x_rcc.c ****   }
1198:./FWLIB/src/stm32f10x_rcc.c **** }
 1136              		.loc 1 1198 1 view .LVU310
 1137 0016 7047     		bx	lr
 1138              	.L92:
 1139              		.align	2
 1140              	.L91:
 1141 0018 00100240 		.word	1073876992
 1142              		.cfi_endproc
 1143              	.LFE52:
 1145              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1146              		.align	1
 1147              		.global	RCC_APB1PeriphResetCmd
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1152              	RCC_APB1PeriphResetCmd:
 1153              	.LVL78:
 1154              	.LFB53:
1199:./FWLIB/src/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccflrkWe.s 			page 42


1200:./FWLIB/src/stm32f10x_rcc.c **** /**
1201:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:./FWLIB/src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1215:./FWLIB/src/stm32f10x_rcc.c ****   */
1216:./FWLIB/src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:./FWLIB/src/stm32f10x_rcc.c **** {
 1155              		.loc 1 1217 1 is_stmt 1 view -0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              		@ link register save eliminated.
1218:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1160              		.loc 1 1219 3 view .LVU312
1220:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1161              		.loc 1 1220 3 view .LVU313
1221:./FWLIB/src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1162              		.loc 1 1221 3 view .LVU314
 1163              		.loc 1 1221 6 is_stmt 0 view .LVU315
 1164 0000 21B1     		cbz	r1, .L94
1222:./FWLIB/src/stm32f10x_rcc.c ****   {
1223:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1165              		.loc 1 1223 5 is_stmt 1 view .LVU316
 1166              		.loc 1 1223 8 is_stmt 0 view .LVU317
 1167 0002 054A     		ldr	r2, .L96
 1168 0004 1369     		ldr	r3, [r2, #16]
 1169              		.loc 1 1223 19 view .LVU318
 1170 0006 0343     		orrs	r3, r3, r0
 1171 0008 1361     		str	r3, [r2, #16]
 1172 000a 7047     		bx	lr
 1173              	.L94:
1224:./FWLIB/src/stm32f10x_rcc.c ****   }
1225:./FWLIB/src/stm32f10x_rcc.c ****   else
1226:./FWLIB/src/stm32f10x_rcc.c ****   {
1227:./FWLIB/src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1174              		.loc 1 1227 5 is_stmt 1 view .LVU319
 1175              		.loc 1 1227 8 is_stmt 0 view .LVU320
 1176 000c 024A     		ldr	r2, .L96
 1177 000e 1369     		ldr	r3, [r2, #16]
 1178              		.loc 1 1227 19 view .LVU321
 1179 0010 23EA0003 		bic	r3, r3, r0
 1180 0014 1361     		str	r3, [r2, #16]
1228:./FWLIB/src/stm32f10x_rcc.c ****   }
1229:./FWLIB/src/stm32f10x_rcc.c **** }
 1181              		.loc 1 1229 1 view .LVU322
ARM GAS  /tmp/ccflrkWe.s 			page 43


 1182 0016 7047     		bx	lr
 1183              	.L97:
 1184              		.align	2
 1185              	.L96:
 1186 0018 00100240 		.word	1073876992
 1187              		.cfi_endproc
 1188              	.LFE53:
 1190              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1191              		.align	1
 1192              		.global	RCC_BackupResetCmd
 1193              		.syntax unified
 1194              		.thumb
 1195              		.thumb_func
 1197              	RCC_BackupResetCmd:
 1198              	.LVL79:
 1199              	.LFB54:
1230:./FWLIB/src/stm32f10x_rcc.c **** 
1231:./FWLIB/src/stm32f10x_rcc.c **** /**
1232:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1236:./FWLIB/src/stm32f10x_rcc.c ****   */
1237:./FWLIB/src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:./FWLIB/src/stm32f10x_rcc.c **** {
 1200              		.loc 1 1238 1 is_stmt 1 view -0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 0
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204              		@ link register save eliminated.
1239:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1205              		.loc 1 1240 3 view .LVU324
1241:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1206              		.loc 1 1241 3 view .LVU325
 1207              		.loc 1 1241 36 is_stmt 0 view .LVU326
 1208 0000 014B     		ldr	r3, .L99
 1209 0002 C3F84004 		str	r0, [r3, #1088]
1242:./FWLIB/src/stm32f10x_rcc.c **** }
 1210              		.loc 1 1242 1 view .LVU327
 1211 0006 7047     		bx	lr
 1212              	.L100:
 1213              		.align	2
 1214              	.L99:
 1215 0008 00004242 		.word	1111621632
 1216              		.cfi_endproc
 1217              	.LFE54:
 1219              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 1220              		.align	1
 1221              		.global	RCC_ClockSecuritySystemCmd
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1226              	RCC_ClockSecuritySystemCmd:
 1227              	.LVL80:
 1228              	.LFB55:
1243:./FWLIB/src/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccflrkWe.s 			page 44


1244:./FWLIB/src/stm32f10x_rcc.c **** /**
1245:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:./FWLIB/src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:./FWLIB/src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1249:./FWLIB/src/stm32f10x_rcc.c ****   */
1250:./FWLIB/src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:./FWLIB/src/stm32f10x_rcc.c **** {
 1229              		.loc 1 1251 1 is_stmt 1 view -0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
1252:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1234              		.loc 1 1253 3 view .LVU329
1254:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1235              		.loc 1 1254 3 view .LVU330
 1236              		.loc 1 1254 34 is_stmt 0 view .LVU331
 1237 0000 014B     		ldr	r3, .L102
 1238 0002 D864     		str	r0, [r3, #76]
1255:./FWLIB/src/stm32f10x_rcc.c **** }
 1239              		.loc 1 1255 1 view .LVU332
 1240 0004 7047     		bx	lr
 1241              	.L103:
 1242 0006 00BF     		.align	2
 1243              	.L102:
 1244 0008 00004242 		.word	1111621632
 1245              		.cfi_endproc
 1246              	.LFE55:
 1248              		.section	.text.RCC_MCOConfig,"ax",%progbits
 1249              		.align	1
 1250              		.global	RCC_MCOConfig
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1255              	RCC_MCOConfig:
 1256              	.LVL81:
 1257              	.LFB56:
1256:./FWLIB/src/stm32f10x_rcc.c **** 
1257:./FWLIB/src/stm32f10x_rcc.c **** /**
1258:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:./FWLIB/src/stm32f10x_rcc.c ****   *   
1261:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:./FWLIB/src/stm32f10x_rcc.c ****   *   following values:       
1263:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:./FWLIB/src/stm32f10x_rcc.c ****   * 
1273:./FWLIB/src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
ARM GAS  /tmp/ccflrkWe.s 			page 45


1274:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:./FWLIB/src/stm32f10x_rcc.c ****   *   
1280:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1281:./FWLIB/src/stm32f10x_rcc.c ****   */
1282:./FWLIB/src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:./FWLIB/src/stm32f10x_rcc.c **** {
 1258              		.loc 1 1283 1 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
1284:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
 1263              		.loc 1 1285 3 view .LVU334
1286:./FWLIB/src/stm32f10x_rcc.c **** 
1287:./FWLIB/src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1264              		.loc 1 1288 3 view .LVU335
 1265              		.loc 1 1288 40 is_stmt 0 view .LVU336
 1266 0000 014B     		ldr	r3, .L105
 1267 0002 D871     		strb	r0, [r3, #7]
1289:./FWLIB/src/stm32f10x_rcc.c **** }
 1268              		.loc 1 1289 1 view .LVU337
 1269 0004 7047     		bx	lr
 1270              	.L106:
 1271 0006 00BF     		.align	2
 1272              	.L105:
 1273 0008 00100240 		.word	1073876992
 1274              		.cfi_endproc
 1275              	.LFE56:
 1277              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1278              		.align	1
 1279              		.global	RCC_GetFlagStatus
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1284              	RCC_GetFlagStatus:
 1285              	.LVL82:
 1286              	.LFB57:
1290:./FWLIB/src/stm32f10x_rcc.c **** 
1291:./FWLIB/src/stm32f10x_rcc.c **** /**
1292:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:./FWLIB/src/stm32f10x_rcc.c ****   *   
1295:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:./FWLIB/src/stm32f10x_rcc.c ****   *   following values:
1297:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
ARM GAS  /tmp/ccflrkWe.s 			page 46


1304:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:./FWLIB/src/stm32f10x_rcc.c ****   * 
1311:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:./FWLIB/src/stm32f10x_rcc.c ****   *   
1324:./FWLIB/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:./FWLIB/src/stm32f10x_rcc.c ****   */
1326:./FWLIB/src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:./FWLIB/src/stm32f10x_rcc.c **** {
 1287              		.loc 1 1327 1 is_stmt 1 view -0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
1328:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1292              		.loc 1 1328 3 view .LVU339
1329:./FWLIB/src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1293              		.loc 1 1329 3 view .LVU340
1330:./FWLIB/src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1294              		.loc 1 1330 3 view .LVU341
1331:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 1295              		.loc 1 1332 3 view .LVU342
1333:./FWLIB/src/stm32f10x_rcc.c **** 
1334:./FWLIB/src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1296              		.loc 1 1335 3 view .LVU343
 1297              		.loc 1 1335 18 is_stmt 0 view .LVU344
 1298 0000 4309     		lsrs	r3, r0, #5
 1299              	.LVL83:
1336:./FWLIB/src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1300              		.loc 1 1336 3 is_stmt 1 view .LVU345
 1301              		.loc 1 1336 6 is_stmt 0 view .LVU346
 1302 0002 012B     		cmp	r3, #1
 1303 0004 0BD0     		beq	.L113
1337:./FWLIB/src/stm32f10x_rcc.c ****   {
1338:./FWLIB/src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
1339:./FWLIB/src/stm32f10x_rcc.c ****   }
1340:./FWLIB/src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1304              		.loc 1 1340 8 is_stmt 1 view .LVU347
 1305              		.loc 1 1340 11 is_stmt 0 view .LVU348
 1306 0006 022B     		cmp	r3, #2
ARM GAS  /tmp/ccflrkWe.s 			page 47


 1307 0008 0CD0     		beq	.L114
1341:./FWLIB/src/stm32f10x_rcc.c ****   {
1342:./FWLIB/src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
1343:./FWLIB/src/stm32f10x_rcc.c ****   }
1344:./FWLIB/src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:./FWLIB/src/stm32f10x_rcc.c ****   {
1346:./FWLIB/src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1308              		.loc 1 1346 5 is_stmt 1 view .LVU349
 1309              		.loc 1 1346 15 is_stmt 0 view .LVU350
 1310 000a 094B     		ldr	r3, .L115
 1311              	.LVL84:
 1312              		.loc 1 1346 15 view .LVU351
 1313 000c 5B6A     		ldr	r3, [r3, #36]
 1314              	.LVL85:
 1315              	.L109:
1347:./FWLIB/src/stm32f10x_rcc.c ****   }
1348:./FWLIB/src/stm32f10x_rcc.c **** 
1349:./FWLIB/src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:./FWLIB/src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1316              		.loc 1 1350 3 is_stmt 1 view .LVU352
 1317              		.loc 1 1350 7 is_stmt 0 view .LVU353
 1318 000e 00F01F00 		and	r0, r0, #31
 1319              	.LVL86:
1351:./FWLIB/src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1320              		.loc 1 1351 3 is_stmt 1 view .LVU354
 1321              		.loc 1 1351 42 is_stmt 0 view .LVU355
 1322 0012 C340     		lsrs	r3, r3, r0
 1323              	.LVL87:
 1324              		.loc 1 1351 6 view .LVU356
 1325 0014 13F0010F 		tst	r3, #1
 1326 0018 07D0     		beq	.L112
1352:./FWLIB/src/stm32f10x_rcc.c ****   {
1353:./FWLIB/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1327              		.loc 1 1353 15 view .LVU357
 1328 001a 0120     		movs	r0, #1
 1329              	.LVL88:
 1330              		.loc 1 1353 15 view .LVU358
 1331 001c 7047     		bx	lr
 1332              	.LVL89:
 1333              	.L113:
1338:./FWLIB/src/stm32f10x_rcc.c ****   }
 1334              		.loc 1 1338 5 is_stmt 1 view .LVU359
1338:./FWLIB/src/stm32f10x_rcc.c ****   }
 1335              		.loc 1 1338 15 is_stmt 0 view .LVU360
 1336 001e 044B     		ldr	r3, .L115
 1337              	.LVL90:
1338:./FWLIB/src/stm32f10x_rcc.c ****   }
 1338              		.loc 1 1338 15 view .LVU361
 1339 0020 1B68     		ldr	r3, [r3]
 1340              	.LVL91:
1338:./FWLIB/src/stm32f10x_rcc.c ****   }
 1341              		.loc 1 1338 15 view .LVU362
 1342 0022 F4E7     		b	.L109
 1343              	.LVL92:
 1344              	.L114:
1342:./FWLIB/src/stm32f10x_rcc.c ****   }
 1345              		.loc 1 1342 5 is_stmt 1 view .LVU363
ARM GAS  /tmp/ccflrkWe.s 			page 48


1342:./FWLIB/src/stm32f10x_rcc.c ****   }
 1346              		.loc 1 1342 15 is_stmt 0 view .LVU364
 1347 0024 024B     		ldr	r3, .L115
 1348              	.LVL93:
1342:./FWLIB/src/stm32f10x_rcc.c ****   }
 1349              		.loc 1 1342 15 view .LVU365
 1350 0026 1B6A     		ldr	r3, [r3, #32]
 1351              	.LVL94:
1342:./FWLIB/src/stm32f10x_rcc.c ****   }
 1352              		.loc 1 1342 15 view .LVU366
 1353 0028 F1E7     		b	.L109
 1354              	.LVL95:
 1355              	.L112:
1354:./FWLIB/src/stm32f10x_rcc.c ****   }
1355:./FWLIB/src/stm32f10x_rcc.c ****   else
1356:./FWLIB/src/stm32f10x_rcc.c ****   {
1357:./FWLIB/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1356              		.loc 1 1357 15 view .LVU367
 1357 002a 0020     		movs	r0, #0
 1358              	.LVL96:
1358:./FWLIB/src/stm32f10x_rcc.c ****   }
1359:./FWLIB/src/stm32f10x_rcc.c **** 
1360:./FWLIB/src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:./FWLIB/src/stm32f10x_rcc.c ****   return bitstatus;
 1359              		.loc 1 1361 3 is_stmt 1 view .LVU368
1362:./FWLIB/src/stm32f10x_rcc.c **** }
 1360              		.loc 1 1362 1 is_stmt 0 view .LVU369
 1361 002c 7047     		bx	lr
 1362              	.L116:
 1363 002e 00BF     		.align	2
 1364              	.L115:
 1365 0030 00100240 		.word	1073876992
 1366              		.cfi_endproc
 1367              	.LFE57:
 1369              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1370              		.align	1
 1371              		.global	RCC_WaitForHSEStartUp
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1376              	RCC_WaitForHSEStartUp:
 1377              	.LFB31:
 305:./FWLIB/src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1378              		.loc 1 305 1 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382 0000 00B5     		push	{lr}
 1383              	.LCFI3:
 1384              		.cfi_def_cfa_offset 4
 1385              		.cfi_offset 14, -4
 1386 0002 83B0     		sub	sp, sp, #12
 1387              	.LCFI4:
 1388              		.cfi_def_cfa_offset 16
 306:./FWLIB/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 1389              		.loc 1 306 3 view .LVU371
 306:./FWLIB/src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/ccflrkWe.s 			page 49


 1390              		.loc 1 306 17 is_stmt 0 view .LVU372
 1391 0004 0023     		movs	r3, #0
 1392 0006 0193     		str	r3, [sp, #4]
 307:./FWLIB/src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 1393              		.loc 1 307 3 is_stmt 1 view .LVU373
 1394              	.LVL97:
 308:./FWLIB/src/stm32f10x_rcc.c ****   
 1395              		.loc 1 308 3 view .LVU374
 1396              	.L119:
 311:./FWLIB/src/stm32f10x_rcc.c ****   {
 1397              		.loc 1 311 3 view .LVU375
 313:./FWLIB/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 1398              		.loc 1 313 5 view .LVU376
 313:./FWLIB/src/stm32f10x_rcc.c ****     StartUpCounter++;  
 1399              		.loc 1 313 17 is_stmt 0 view .LVU377
 1400 0008 3120     		movs	r0, #49
 1401 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 1402              	.LVL98:
 314:./FWLIB/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1403              		.loc 1 314 5 is_stmt 1 view .LVU378
 314:./FWLIB/src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1404              		.loc 1 314 19 is_stmt 0 view .LVU379
 1405 000e 019B     		ldr	r3, [sp, #4]
 1406 0010 0133     		adds	r3, r3, #1
 1407 0012 0193     		str	r3, [sp, #4]
 315:./FWLIB/src/stm32f10x_rcc.c ****   
 1408              		.loc 1 315 51 is_stmt 1 discriminator 2 view .LVU380
 315:./FWLIB/src/stm32f10x_rcc.c ****   
 1409              		.loc 1 315 27 is_stmt 0 discriminator 2 view .LVU381
 1410 0014 019B     		ldr	r3, [sp, #4]
 315:./FWLIB/src/stm32f10x_rcc.c ****   
 1411              		.loc 1 315 51 discriminator 2 view .LVU382
 1412 0016 B3F5A06F 		cmp	r3, #1280
 1413 001a 01D0     		beq	.L118
 315:./FWLIB/src/stm32f10x_rcc.c ****   
 1414              		.loc 1 315 51 discriminator 1 view .LVU383
 1415 001c 0028     		cmp	r0, #0
 1416 001e F3D0     		beq	.L119
 1417              	.L118:
 317:./FWLIB/src/stm32f10x_rcc.c ****   {
 1418              		.loc 1 317 3 is_stmt 1 view .LVU384
 317:./FWLIB/src/stm32f10x_rcc.c ****   {
 1419              		.loc 1 317 7 is_stmt 0 view .LVU385
 1420 0020 3120     		movs	r0, #49
 1421              	.LVL99:
 317:./FWLIB/src/stm32f10x_rcc.c ****   {
 1422              		.loc 1 317 7 view .LVU386
 1423 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1424              	.LVL100:
 317:./FWLIB/src/stm32f10x_rcc.c ****   {
 1425              		.loc 1 317 6 discriminator 1 view .LVU387
 1426 0026 00B1     		cbz	r0, .L120
 319:./FWLIB/src/stm32f10x_rcc.c ****   }
 1427              		.loc 1 319 12 view .LVU388
 1428 0028 0120     		movs	r0, #1
 1429              	.L120:
 1430              	.LVL101:
ARM GAS  /tmp/ccflrkWe.s 			page 50


 325:./FWLIB/src/stm32f10x_rcc.c **** }
 1431              		.loc 1 325 3 is_stmt 1 view .LVU389
 326:./FWLIB/src/stm32f10x_rcc.c **** 
 1432              		.loc 1 326 1 is_stmt 0 view .LVU390
 1433 002a 03B0     		add	sp, sp, #12
 1434              	.LCFI5:
 1435              		.cfi_def_cfa_offset 4
 1436              		@ sp needed
 1437 002c 5DF804FB 		ldr	pc, [sp], #4
 1438              		.cfi_endproc
 1439              	.LFE31:
 1441              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1442              		.align	1
 1443              		.global	RCC_ClearFlag
 1444              		.syntax unified
 1445              		.thumb
 1446              		.thumb_func
 1448              	RCC_ClearFlag:
 1449              	.LFB58:
1363:./FWLIB/src/stm32f10x_rcc.c **** 
1364:./FWLIB/src/stm32f10x_rcc.c **** /**
1365:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:./FWLIB/src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:./FWLIB/src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:./FWLIB/src/stm32f10x_rcc.c ****   * @param  None
1369:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1370:./FWLIB/src/stm32f10x_rcc.c ****   */
1371:./FWLIB/src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:./FWLIB/src/stm32f10x_rcc.c **** {
 1450              		.loc 1 1372 1 is_stmt 1 view -0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
1373:./FWLIB/src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:./FWLIB/src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1455              		.loc 1 1374 3 view .LVU392
 1456              		.loc 1 1374 6 is_stmt 0 view .LVU393
 1457 0000 024A     		ldr	r2, .L123
 1458 0002 536A     		ldr	r3, [r2, #36]
 1459              		.loc 1 1374 12 view .LVU394
 1460 0004 43F08073 		orr	r3, r3, #16777216
 1461 0008 5362     		str	r3, [r2, #36]
1375:./FWLIB/src/stm32f10x_rcc.c **** }
 1462              		.loc 1 1375 1 view .LVU395
 1463 000a 7047     		bx	lr
 1464              	.L124:
 1465              		.align	2
 1466              	.L123:
 1467 000c 00100240 		.word	1073876992
 1468              		.cfi_endproc
 1469              	.LFE58:
 1471              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1472              		.align	1
 1473              		.global	RCC_GetITStatus
 1474              		.syntax unified
 1475              		.thumb
ARM GAS  /tmp/ccflrkWe.s 			page 51


 1476              		.thumb_func
 1478              	RCC_GetITStatus:
 1479              	.LVL102:
 1480              	.LFB59:
1376:./FWLIB/src/stm32f10x_rcc.c **** 
1377:./FWLIB/src/stm32f10x_rcc.c **** /**
1378:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:./FWLIB/src/stm32f10x_rcc.c ****   *   
1381:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:./FWLIB/src/stm32f10x_rcc.c ****   *   following values:
1383:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:./FWLIB/src/stm32f10x_rcc.c ****   * 
1392:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:./FWLIB/src/stm32f10x_rcc.c ****   *   
1400:./FWLIB/src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:./FWLIB/src/stm32f10x_rcc.c ****   */
1402:./FWLIB/src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:./FWLIB/src/stm32f10x_rcc.c **** {
 1481              		.loc 1 1403 1 is_stmt 1 view -0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 0, uses_anonymous_args = 0
 1485              		@ link register save eliminated.
1404:./FWLIB/src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 1486              		.loc 1 1404 3 view .LVU397
1405:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 1487              		.loc 1 1406 3 view .LVU398
1407:./FWLIB/src/stm32f10x_rcc.c **** 
1408:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:./FWLIB/src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1488              		.loc 1 1409 3 view .LVU399
 1489              		.loc 1 1409 11 is_stmt 0 view .LVU400
 1490 0000 034B     		ldr	r3, .L128
 1491 0002 9B68     		ldr	r3, [r3, #8]
 1492              		.loc 1 1409 6 view .LVU401
 1493 0004 1842     		tst	r0, r3
 1494 0006 01D0     		beq	.L127
1410:./FWLIB/src/stm32f10x_rcc.c ****   {
1411:./FWLIB/src/stm32f10x_rcc.c ****     bitstatus = SET;
 1495              		.loc 1 1411 15 view .LVU402
 1496 0008 0120     		movs	r0, #1
 1497              	.LVL103:
ARM GAS  /tmp/ccflrkWe.s 			page 52


 1498              		.loc 1 1411 15 view .LVU403
 1499 000a 7047     		bx	lr
 1500              	.LVL104:
 1501              	.L127:
1412:./FWLIB/src/stm32f10x_rcc.c ****   }
1413:./FWLIB/src/stm32f10x_rcc.c ****   else
1414:./FWLIB/src/stm32f10x_rcc.c ****   {
1415:./FWLIB/src/stm32f10x_rcc.c ****     bitstatus = RESET;
 1502              		.loc 1 1415 15 view .LVU404
 1503 000c 0020     		movs	r0, #0
 1504              	.LVL105:
1416:./FWLIB/src/stm32f10x_rcc.c ****   }
1417:./FWLIB/src/stm32f10x_rcc.c **** 
1418:./FWLIB/src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:./FWLIB/src/stm32f10x_rcc.c ****   return  bitstatus;
 1505              		.loc 1 1419 3 is_stmt 1 view .LVU405
1420:./FWLIB/src/stm32f10x_rcc.c **** }
 1506              		.loc 1 1420 1 is_stmt 0 view .LVU406
 1507 000e 7047     		bx	lr
 1508              	.L129:
 1509              		.align	2
 1510              	.L128:
 1511 0010 00100240 		.word	1073876992
 1512              		.cfi_endproc
 1513              	.LFE59:
 1515              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1516              		.align	1
 1517              		.global	RCC_ClearITPendingBit
 1518              		.syntax unified
 1519              		.thumb
 1520              		.thumb_func
 1522              	RCC_ClearITPendingBit:
 1523              	.LVL106:
 1524              	.LFB60:
1421:./FWLIB/src/stm32f10x_rcc.c **** 
1422:./FWLIB/src/stm32f10x_rcc.c **** /**
1423:./FWLIB/src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:./FWLIB/src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:./FWLIB/src/stm32f10x_rcc.c ****   *   
1426:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:./FWLIB/src/stm32f10x_rcc.c ****   *   of the following values:
1428:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:./FWLIB/src/stm32f10x_rcc.c ****   * 
1437:./FWLIB/src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:./FWLIB/src/stm32f10x_rcc.c ****   *   following values:        
1439:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
ARM GAS  /tmp/ccflrkWe.s 			page 53


1444:./FWLIB/src/stm32f10x_rcc.c ****   *   
1445:./FWLIB/src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:./FWLIB/src/stm32f10x_rcc.c ****   * @retval None
1447:./FWLIB/src/stm32f10x_rcc.c ****   */
1448:./FWLIB/src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:./FWLIB/src/stm32f10x_rcc.c **** {
 1525              		.loc 1 1449 1 is_stmt 1 view -0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              		@ link register save eliminated.
1450:./FWLIB/src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:./FWLIB/src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 1530              		.loc 1 1451 3 view .LVU408
1452:./FWLIB/src/stm32f10x_rcc.c **** 
1453:./FWLIB/src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:./FWLIB/src/stm32f10x_rcc.c ****      pending bits */
1455:./FWLIB/src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1531              		.loc 1 1455 3 view .LVU409
 1532              		.loc 1 1455 39 is_stmt 0 view .LVU410
 1533 0000 014B     		ldr	r3, .L131
 1534 0002 9872     		strb	r0, [r3, #10]
1456:./FWLIB/src/stm32f10x_rcc.c **** }
 1535              		.loc 1 1456 1 view .LVU411
 1536 0004 7047     		bx	lr
 1537              	.L132:
 1538 0006 00BF     		.align	2
 1539              	.L131:
 1540 0008 00100240 		.word	1073876992
 1541              		.cfi_endproc
 1542              	.LFE60:
 1544              		.section	.rodata.ADCPrescTable,"a"
 1545              		.align	2
 1548              	ADCPrescTable:
 1549 0000 02040608 		.ascii	"\002\004\006\010"
 1550              		.section	.rodata.APBAHBPrescTable,"a"
 1551              		.align	2
 1554              	APBAHBPrescTable:
 1555 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
 1555      01020304 
 1555      01020304 
 1555      06
 1556 000d 070809   		.ascii	"\007\010\011"
 1557              		.text
 1558              	.Letext0:
 1559              		.file 2 "/usr/lib/gcc/arm-none-eabi/14.1.0/include/stdint-gcc.h"
 1560              		.file 3 "USER/stm32f10x.h"
 1561              		.file 4 "FWLIB/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/ccflrkWe.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
     /tmp/ccflrkWe.s:19     .text.RCC_DeInit:00000000 $t
     /tmp/ccflrkWe.s:25     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccflrkWe.s:74     .text.RCC_DeInit:00000038 $d
     /tmp/ccflrkWe.s:80     .text.RCC_HSEConfig:00000000 $t
     /tmp/ccflrkWe.s:86     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccflrkWe.s:138    .text.RCC_HSEConfig:00000038 $d
     /tmp/ccflrkWe.s:143    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccflrkWe.s:149    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccflrkWe.s:180    .text.RCC_AdjustHSICalibrationValue:00000010 $d
     /tmp/ccflrkWe.s:185    .text.RCC_HSICmd:00000000 $t
     /tmp/ccflrkWe.s:191    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccflrkWe.s:209    .text.RCC_HSICmd:00000008 $d
     /tmp/ccflrkWe.s:214    .text.RCC_PLLConfig:00000000 $t
     /tmp/ccflrkWe.s:220    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccflrkWe.s:255    .text.RCC_PLLConfig:00000010 $d
     /tmp/ccflrkWe.s:260    .text.RCC_PLLCmd:00000000 $t
     /tmp/ccflrkWe.s:266    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccflrkWe.s:284    .text.RCC_PLLCmd:00000008 $d
     /tmp/ccflrkWe.s:289    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccflrkWe.s:295    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccflrkWe.s:326    .text.RCC_SYSCLKConfig:00000010 $d
     /tmp/ccflrkWe.s:331    .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccflrkWe.s:337    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccflrkWe.s:354    .text.RCC_GetSYSCLKSource:0000000c $d
     /tmp/ccflrkWe.s:359    .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccflrkWe.s:365    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccflrkWe.s:396    .text.RCC_HCLKConfig:00000010 $d
     /tmp/ccflrkWe.s:401    .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccflrkWe.s:407    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccflrkWe.s:438    .text.RCC_PCLK1Config:00000010 $d
     /tmp/ccflrkWe.s:443    .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccflrkWe.s:449    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccflrkWe.s:480    .text.RCC_PCLK2Config:00000010 $d
     /tmp/ccflrkWe.s:485    .text.RCC_ITConfig:00000000 $t
     /tmp/ccflrkWe.s:491    .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccflrkWe.s:523    .text.RCC_ITConfig:00000018 $d
     /tmp/ccflrkWe.s:528    .text.RCC_USBCLKConfig:00000000 $t
     /tmp/ccflrkWe.s:534    .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
     /tmp/ccflrkWe.s:552    .text.RCC_USBCLKConfig:00000008 $d
     /tmp/ccflrkWe.s:557    .text.RCC_ADCCLKConfig:00000000 $t
     /tmp/ccflrkWe.s:563    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
     /tmp/ccflrkWe.s:594    .text.RCC_ADCCLKConfig:00000010 $d
     /tmp/ccflrkWe.s:599    .text.RCC_LSEConfig:00000000 $t
     /tmp/ccflrkWe.s:605    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccflrkWe.s:648    .text.RCC_LSEConfig:0000002c $d
     /tmp/ccflrkWe.s:653    .text.RCC_LSICmd:00000000 $t
     /tmp/ccflrkWe.s:659    .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccflrkWe.s:677    .text.RCC_LSICmd:00000008 $d
     /tmp/ccflrkWe.s:682    .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccflrkWe.s:688    .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccflrkWe.s:709    .text.RCC_RTCCLKConfig:0000000c $d
     /tmp/ccflrkWe.s:714    .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccflrkWe.s:720    .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccflrkWe.s:738    .text.RCC_RTCCLKCmd:00000008 $d
     /tmp/ccflrkWe.s:743    .text.RCC_GetClocksFreq:00000000 $t
ARM GAS  /tmp/ccflrkWe.s 			page 55


     /tmp/ccflrkWe.s:749    .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccflrkWe.s:957    .text.RCC_GetClocksFreq:000000a0 $d
     /tmp/ccflrkWe.s:1554   .rodata.APBAHBPrescTable:00000000 APBAHBPrescTable
     /tmp/ccflrkWe.s:1548   .rodata.ADCPrescTable:00000000 ADCPrescTable
     /tmp/ccflrkWe.s:966    .text.RCC_AHBPeriphClockCmd:00000000 $t
     /tmp/ccflrkWe.s:972    .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
     /tmp/ccflrkWe.s:1006   .text.RCC_AHBPeriphClockCmd:00000018 $d
     /tmp/ccflrkWe.s:1011   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccflrkWe.s:1017   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccflrkWe.s:1051   .text.RCC_APB2PeriphClockCmd:00000018 $d
     /tmp/ccflrkWe.s:1056   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccflrkWe.s:1062   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccflrkWe.s:1096   .text.RCC_APB1PeriphClockCmd:00000018 $d
     /tmp/ccflrkWe.s:1101   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccflrkWe.s:1107   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccflrkWe.s:1141   .text.RCC_APB2PeriphResetCmd:00000018 $d
     /tmp/ccflrkWe.s:1146   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccflrkWe.s:1152   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccflrkWe.s:1186   .text.RCC_APB1PeriphResetCmd:00000018 $d
     /tmp/ccflrkWe.s:1191   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccflrkWe.s:1197   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccflrkWe.s:1215   .text.RCC_BackupResetCmd:00000008 $d
     /tmp/ccflrkWe.s:1220   .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccflrkWe.s:1226   .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccflrkWe.s:1244   .text.RCC_ClockSecuritySystemCmd:00000008 $d
     /tmp/ccflrkWe.s:1249   .text.RCC_MCOConfig:00000000 $t
     /tmp/ccflrkWe.s:1255   .text.RCC_MCOConfig:00000000 RCC_MCOConfig
     /tmp/ccflrkWe.s:1273   .text.RCC_MCOConfig:00000008 $d
     /tmp/ccflrkWe.s:1278   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccflrkWe.s:1284   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccflrkWe.s:1365   .text.RCC_GetFlagStatus:00000030 $d
     /tmp/ccflrkWe.s:1370   .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccflrkWe.s:1376   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccflrkWe.s:1442   .text.RCC_ClearFlag:00000000 $t
     /tmp/ccflrkWe.s:1448   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccflrkWe.s:1467   .text.RCC_ClearFlag:0000000c $d
     /tmp/ccflrkWe.s:1472   .text.RCC_GetITStatus:00000000 $t
     /tmp/ccflrkWe.s:1478   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccflrkWe.s:1511   .text.RCC_GetITStatus:00000010 $d
     /tmp/ccflrkWe.s:1516   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccflrkWe.s:1522   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/ccflrkWe.s:1540   .text.RCC_ClearITPendingBit:00000008 $d
     /tmp/ccflrkWe.s:1545   .rodata.ADCPrescTable:00000000 $d
     /tmp/ccflrkWe.s:1551   .rodata.APBAHBPrescTable:00000000 $d

NO UNDEFINED SYMBOLS

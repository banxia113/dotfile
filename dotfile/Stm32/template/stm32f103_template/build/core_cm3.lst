ARM GAS  /tmp/ccerXcuS.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"core_cm3.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./CORE/core_cm3.c"
  18              		.section	.text.__get_PSP,"ax",%progbits
  19              		.align	1
  20              		.global	__get_PSP
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	__get_PSP:
  26              	.LFB0:
   1:./CORE/core_cm3.c **** /**************************************************************************//**
   2:./CORE/core_cm3.c ****  * @file     core_cm3.c
   3:./CORE/core_cm3.c ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File
   4:./CORE/core_cm3.c ****  * @version  V1.30
   5:./CORE/core_cm3.c ****  * @date     30. October 2009
   6:./CORE/core_cm3.c ****  *
   7:./CORE/core_cm3.c ****  * @note
   8:./CORE/core_cm3.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./CORE/core_cm3.c ****  *
  10:./CORE/core_cm3.c ****  * @par
  11:./CORE/core_cm3.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./CORE/core_cm3.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./CORE/core_cm3.c ****  * within development tools that are supporting such ARM based processors. 
  14:./CORE/core_cm3.c ****  *
  15:./CORE/core_cm3.c ****  * @par
  16:./CORE/core_cm3.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./CORE/core_cm3.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./CORE/core_cm3.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./CORE/core_cm3.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./CORE/core_cm3.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./CORE/core_cm3.c ****  *
  22:./CORE/core_cm3.c ****  ******************************************************************************/
  23:./CORE/core_cm3.c **** 
  24:./CORE/core_cm3.c **** #include <stdint.h>
  25:./CORE/core_cm3.c **** 
  26:./CORE/core_cm3.c **** /* define compiler specific symbols */
  27:./CORE/core_cm3.c **** #if defined ( __CC_ARM   )
  28:./CORE/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:./CORE/core_cm3.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:./CORE/core_cm3.c **** 
  31:./CORE/core_cm3.c **** #elif defined ( __ICCARM__ )
  32:./CORE/core_cm3.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
ARM GAS  /tmp/ccerXcuS.s 			page 2


  33:./CORE/core_cm3.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:./CORE/core_cm3.c **** 
  35:./CORE/core_cm3.c **** #elif defined   (  __GNUC__  )
  36:./CORE/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:./CORE/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:./CORE/core_cm3.c **** 
  39:./CORE/core_cm3.c **** #elif defined   (  __TASKING__  )
  40:./CORE/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:./CORE/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:./CORE/core_cm3.c **** 
  43:./CORE/core_cm3.c **** #endif
  44:./CORE/core_cm3.c **** 
  45:./CORE/core_cm3.c **** 
  46:./CORE/core_cm3.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:./CORE/core_cm3.c **** 
  48:./CORE/core_cm3.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:./CORE/core_cm3.c **** /* ARM armcc specific functions */
  50:./CORE/core_cm3.c **** 
  51:./CORE/core_cm3.c **** /**
  52:./CORE/core_cm3.c ****  * @brief  Return the Process Stack Pointer
  53:./CORE/core_cm3.c ****  *
  54:./CORE/core_cm3.c ****  * @return ProcessStackPointer
  55:./CORE/core_cm3.c ****  *
  56:./CORE/core_cm3.c ****  * Return the actual process stack pointer
  57:./CORE/core_cm3.c ****  */
  58:./CORE/core_cm3.c **** __ASM uint32_t __get_PSP(void)
  59:./CORE/core_cm3.c **** {
  60:./CORE/core_cm3.c ****   mrs r0, psp
  61:./CORE/core_cm3.c ****   bx lr
  62:./CORE/core_cm3.c **** }
  63:./CORE/core_cm3.c **** 
  64:./CORE/core_cm3.c **** /**
  65:./CORE/core_cm3.c ****  * @brief  Set the Process Stack Pointer
  66:./CORE/core_cm3.c ****  *
  67:./CORE/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:./CORE/core_cm3.c ****  *
  69:./CORE/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:./CORE/core_cm3.c ****  * (process stack pointer) Cortex processor register
  71:./CORE/core_cm3.c ****  */
  72:./CORE/core_cm3.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:./CORE/core_cm3.c **** {
  74:./CORE/core_cm3.c ****   msr psp, r0
  75:./CORE/core_cm3.c ****   bx lr
  76:./CORE/core_cm3.c **** }
  77:./CORE/core_cm3.c **** 
  78:./CORE/core_cm3.c **** /**
  79:./CORE/core_cm3.c ****  * @brief  Return the Main Stack Pointer
  80:./CORE/core_cm3.c ****  *
  81:./CORE/core_cm3.c ****  * @return Main Stack Pointer
  82:./CORE/core_cm3.c ****  *
  83:./CORE/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
  84:./CORE/core_cm3.c ****  * Cortex processor register
  85:./CORE/core_cm3.c ****  */
  86:./CORE/core_cm3.c **** __ASM uint32_t __get_MSP(void)
  87:./CORE/core_cm3.c **** {
  88:./CORE/core_cm3.c ****   mrs r0, msp
  89:./CORE/core_cm3.c ****   bx lr
ARM GAS  /tmp/ccerXcuS.s 			page 3


  90:./CORE/core_cm3.c **** }
  91:./CORE/core_cm3.c **** 
  92:./CORE/core_cm3.c **** /**
  93:./CORE/core_cm3.c ****  * @brief  Set the Main Stack Pointer
  94:./CORE/core_cm3.c ****  *
  95:./CORE/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:./CORE/core_cm3.c ****  *
  97:./CORE/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
  98:./CORE/core_cm3.c ****  * (main stack pointer) Cortex processor register
  99:./CORE/core_cm3.c ****  */
 100:./CORE/core_cm3.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:./CORE/core_cm3.c **** {
 102:./CORE/core_cm3.c ****   msr msp, r0
 103:./CORE/core_cm3.c ****   bx lr
 104:./CORE/core_cm3.c **** }
 105:./CORE/core_cm3.c **** 
 106:./CORE/core_cm3.c **** /**
 107:./CORE/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 108:./CORE/core_cm3.c ****  *
 109:./CORE/core_cm3.c ****  * @param   value  value to reverse
 110:./CORE/core_cm3.c ****  * @return         reversed value
 111:./CORE/core_cm3.c ****  *
 112:./CORE/core_cm3.c ****  * Reverse byte order in unsigned short value
 113:./CORE/core_cm3.c ****  */
 114:./CORE/core_cm3.c **** __ASM uint32_t __REV16(uint16_t value)
 115:./CORE/core_cm3.c **** {
 116:./CORE/core_cm3.c ****   rev16 r0, r0
 117:./CORE/core_cm3.c ****   bx lr
 118:./CORE/core_cm3.c **** }
 119:./CORE/core_cm3.c **** 
 120:./CORE/core_cm3.c **** /**
 121:./CORE/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:./CORE/core_cm3.c ****  *
 123:./CORE/core_cm3.c ****  * @param   value  value to reverse
 124:./CORE/core_cm3.c ****  * @return         reversed value
 125:./CORE/core_cm3.c ****  *
 126:./CORE/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:./CORE/core_cm3.c ****  */
 128:./CORE/core_cm3.c **** __ASM int32_t __REVSH(int16_t value)
 129:./CORE/core_cm3.c **** {
 130:./CORE/core_cm3.c ****   revsh r0, r0
 131:./CORE/core_cm3.c ****   bx lr
 132:./CORE/core_cm3.c **** }
 133:./CORE/core_cm3.c **** 
 134:./CORE/core_cm3.c **** 
 135:./CORE/core_cm3.c **** #if (__ARMCC_VERSION < 400000)
 136:./CORE/core_cm3.c **** 
 137:./CORE/core_cm3.c **** /**
 138:./CORE/core_cm3.c ****  * @brief  Remove the exclusive lock created by ldrex
 139:./CORE/core_cm3.c ****  *
 140:./CORE/core_cm3.c ****  * Removes the exclusive lock which is created by ldrex.
 141:./CORE/core_cm3.c ****  */
 142:./CORE/core_cm3.c **** __ASM void __CLREX(void)
 143:./CORE/core_cm3.c **** {
 144:./CORE/core_cm3.c ****   clrex
 145:./CORE/core_cm3.c **** }
 146:./CORE/core_cm3.c **** 
ARM GAS  /tmp/ccerXcuS.s 			page 4


 147:./CORE/core_cm3.c **** /**
 148:./CORE/core_cm3.c ****  * @brief  Return the Base Priority value
 149:./CORE/core_cm3.c ****  *
 150:./CORE/core_cm3.c ****  * @return BasePriority
 151:./CORE/core_cm3.c ****  *
 152:./CORE/core_cm3.c ****  * Return the content of the base priority register
 153:./CORE/core_cm3.c ****  */
 154:./CORE/core_cm3.c **** __ASM uint32_t  __get_BASEPRI(void)
 155:./CORE/core_cm3.c **** {
 156:./CORE/core_cm3.c ****   mrs r0, basepri
 157:./CORE/core_cm3.c ****   bx lr
 158:./CORE/core_cm3.c **** }
 159:./CORE/core_cm3.c **** 
 160:./CORE/core_cm3.c **** /**
 161:./CORE/core_cm3.c ****  * @brief  Set the Base Priority value
 162:./CORE/core_cm3.c ****  *
 163:./CORE/core_cm3.c ****  * @param  basePri  BasePriority
 164:./CORE/core_cm3.c ****  *
 165:./CORE/core_cm3.c ****  * Set the base priority register
 166:./CORE/core_cm3.c ****  */
 167:./CORE/core_cm3.c **** __ASM void __set_BASEPRI(uint32_t basePri)
 168:./CORE/core_cm3.c **** {
 169:./CORE/core_cm3.c ****   msr basepri, r0
 170:./CORE/core_cm3.c ****   bx lr
 171:./CORE/core_cm3.c **** }
 172:./CORE/core_cm3.c **** 
 173:./CORE/core_cm3.c **** /**
 174:./CORE/core_cm3.c ****  * @brief  Return the Priority Mask value
 175:./CORE/core_cm3.c ****  *
 176:./CORE/core_cm3.c ****  * @return PriMask
 177:./CORE/core_cm3.c ****  *
 178:./CORE/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 179:./CORE/core_cm3.c ****  */
 180:./CORE/core_cm3.c **** __ASM uint32_t __get_PRIMASK(void)
 181:./CORE/core_cm3.c **** {
 182:./CORE/core_cm3.c ****   mrs r0, primask
 183:./CORE/core_cm3.c ****   bx lr
 184:./CORE/core_cm3.c **** }
 185:./CORE/core_cm3.c **** 
 186:./CORE/core_cm3.c **** /**
 187:./CORE/core_cm3.c ****  * @brief  Set the Priority Mask value
 188:./CORE/core_cm3.c ****  *
 189:./CORE/core_cm3.c ****  * @param  priMask  PriMask
 190:./CORE/core_cm3.c ****  *
 191:./CORE/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 192:./CORE/core_cm3.c ****  */
 193:./CORE/core_cm3.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 194:./CORE/core_cm3.c **** {
 195:./CORE/core_cm3.c ****   msr primask, r0
 196:./CORE/core_cm3.c ****   bx lr
 197:./CORE/core_cm3.c **** }
 198:./CORE/core_cm3.c **** 
 199:./CORE/core_cm3.c **** /**
 200:./CORE/core_cm3.c ****  * @brief  Return the Fault Mask value
 201:./CORE/core_cm3.c ****  *
 202:./CORE/core_cm3.c ****  * @return FaultMask
 203:./CORE/core_cm3.c ****  *
ARM GAS  /tmp/ccerXcuS.s 			page 5


 204:./CORE/core_cm3.c ****  * Return the content of the fault mask register
 205:./CORE/core_cm3.c ****  */
 206:./CORE/core_cm3.c **** __ASM uint32_t  __get_FAULTMASK(void)
 207:./CORE/core_cm3.c **** {
 208:./CORE/core_cm3.c ****   mrs r0, faultmask
 209:./CORE/core_cm3.c ****   bx lr
 210:./CORE/core_cm3.c **** }
 211:./CORE/core_cm3.c **** 
 212:./CORE/core_cm3.c **** /**
 213:./CORE/core_cm3.c ****  * @brief  Set the Fault Mask value
 214:./CORE/core_cm3.c ****  *
 215:./CORE/core_cm3.c ****  * @param  faultMask  faultMask value
 216:./CORE/core_cm3.c ****  *
 217:./CORE/core_cm3.c ****  * Set the fault mask register
 218:./CORE/core_cm3.c ****  */
 219:./CORE/core_cm3.c **** __ASM void __set_FAULTMASK(uint32_t faultMask)
 220:./CORE/core_cm3.c **** {
 221:./CORE/core_cm3.c ****   msr faultmask, r0
 222:./CORE/core_cm3.c ****   bx lr
 223:./CORE/core_cm3.c **** }
 224:./CORE/core_cm3.c **** 
 225:./CORE/core_cm3.c **** /**
 226:./CORE/core_cm3.c ****  * @brief  Return the Control Register value
 227:./CORE/core_cm3.c ****  * 
 228:./CORE/core_cm3.c ****  * @return Control value
 229:./CORE/core_cm3.c ****  *
 230:./CORE/core_cm3.c ****  * Return the content of the control register
 231:./CORE/core_cm3.c ****  */
 232:./CORE/core_cm3.c **** __ASM uint32_t __get_CONTROL(void)
 233:./CORE/core_cm3.c **** {
 234:./CORE/core_cm3.c ****   mrs r0, control
 235:./CORE/core_cm3.c ****   bx lr
 236:./CORE/core_cm3.c **** }
 237:./CORE/core_cm3.c **** 
 238:./CORE/core_cm3.c **** /**
 239:./CORE/core_cm3.c ****  * @brief  Set the Control Register value
 240:./CORE/core_cm3.c ****  *
 241:./CORE/core_cm3.c ****  * @param  control  Control value
 242:./CORE/core_cm3.c ****  *
 243:./CORE/core_cm3.c ****  * Set the control register
 244:./CORE/core_cm3.c ****  */
 245:./CORE/core_cm3.c **** __ASM void __set_CONTROL(uint32_t control)
 246:./CORE/core_cm3.c **** {
 247:./CORE/core_cm3.c ****   msr control, r0
 248:./CORE/core_cm3.c ****   bx lr
 249:./CORE/core_cm3.c **** }
 250:./CORE/core_cm3.c **** 
 251:./CORE/core_cm3.c **** #endif /* __ARMCC_VERSION  */ 
 252:./CORE/core_cm3.c **** 
 253:./CORE/core_cm3.c **** 
 254:./CORE/core_cm3.c **** 
 255:./CORE/core_cm3.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 256:./CORE/core_cm3.c **** /* IAR iccarm specific functions */
 257:./CORE/core_cm3.c **** #pragma diag_suppress=Pe940
 258:./CORE/core_cm3.c **** 
 259:./CORE/core_cm3.c **** /**
 260:./CORE/core_cm3.c ****  * @brief  Return the Process Stack Pointer
ARM GAS  /tmp/ccerXcuS.s 			page 6


 261:./CORE/core_cm3.c ****  *
 262:./CORE/core_cm3.c ****  * @return ProcessStackPointer
 263:./CORE/core_cm3.c ****  *
 264:./CORE/core_cm3.c ****  * Return the actual process stack pointer
 265:./CORE/core_cm3.c ****  */
 266:./CORE/core_cm3.c **** uint32_t __get_PSP(void)
 267:./CORE/core_cm3.c **** {
 268:./CORE/core_cm3.c ****   __ASM("mrs r0, psp");
 269:./CORE/core_cm3.c ****   __ASM("bx lr");
 270:./CORE/core_cm3.c **** }
 271:./CORE/core_cm3.c **** 
 272:./CORE/core_cm3.c **** /**
 273:./CORE/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 274:./CORE/core_cm3.c ****  *
 275:./CORE/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 276:./CORE/core_cm3.c ****  *
 277:./CORE/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 278:./CORE/core_cm3.c ****  * (process stack pointer) Cortex processor register
 279:./CORE/core_cm3.c ****  */
 280:./CORE/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 281:./CORE/core_cm3.c **** {
 282:./CORE/core_cm3.c ****   __ASM("msr psp, r0");
 283:./CORE/core_cm3.c ****   __ASM("bx lr");
 284:./CORE/core_cm3.c **** }
 285:./CORE/core_cm3.c **** 
 286:./CORE/core_cm3.c **** /**
 287:./CORE/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 288:./CORE/core_cm3.c ****  *
 289:./CORE/core_cm3.c ****  * @return Main Stack Pointer
 290:./CORE/core_cm3.c ****  *
 291:./CORE/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 292:./CORE/core_cm3.c ****  * Cortex processor register
 293:./CORE/core_cm3.c ****  */
 294:./CORE/core_cm3.c **** uint32_t __get_MSP(void)
 295:./CORE/core_cm3.c **** {
 296:./CORE/core_cm3.c ****   __ASM("mrs r0, msp");
 297:./CORE/core_cm3.c ****   __ASM("bx lr");
 298:./CORE/core_cm3.c **** }
 299:./CORE/core_cm3.c **** 
 300:./CORE/core_cm3.c **** /**
 301:./CORE/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 302:./CORE/core_cm3.c ****  *
 303:./CORE/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 304:./CORE/core_cm3.c ****  *
 305:./CORE/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 306:./CORE/core_cm3.c ****  * (main stack pointer) Cortex processor register
 307:./CORE/core_cm3.c ****  */
 308:./CORE/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 309:./CORE/core_cm3.c **** {
 310:./CORE/core_cm3.c ****   __ASM("msr msp, r0");
 311:./CORE/core_cm3.c ****   __ASM("bx lr");
 312:./CORE/core_cm3.c **** }
 313:./CORE/core_cm3.c **** 
 314:./CORE/core_cm3.c **** /**
 315:./CORE/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 316:./CORE/core_cm3.c ****  *
 317:./CORE/core_cm3.c ****  * @param  value  value to reverse
ARM GAS  /tmp/ccerXcuS.s 			page 7


 318:./CORE/core_cm3.c ****  * @return        reversed value
 319:./CORE/core_cm3.c ****  *
 320:./CORE/core_cm3.c ****  * Reverse byte order in unsigned short value
 321:./CORE/core_cm3.c ****  */
 322:./CORE/core_cm3.c **** uint32_t __REV16(uint16_t value)
 323:./CORE/core_cm3.c **** {
 324:./CORE/core_cm3.c ****   __ASM("rev16 r0, r0");
 325:./CORE/core_cm3.c ****   __ASM("bx lr");
 326:./CORE/core_cm3.c **** }
 327:./CORE/core_cm3.c **** 
 328:./CORE/core_cm3.c **** /**
 329:./CORE/core_cm3.c ****  * @brief  Reverse bit order of value
 330:./CORE/core_cm3.c ****  *
 331:./CORE/core_cm3.c ****  * @param  value  value to reverse
 332:./CORE/core_cm3.c ****  * @return        reversed value
 333:./CORE/core_cm3.c ****  *
 334:./CORE/core_cm3.c ****  * Reverse bit order of value
 335:./CORE/core_cm3.c ****  */
 336:./CORE/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 337:./CORE/core_cm3.c **** {
 338:./CORE/core_cm3.c ****   __ASM("rbit r0, r0");
 339:./CORE/core_cm3.c ****   __ASM("bx lr");
 340:./CORE/core_cm3.c **** }
 341:./CORE/core_cm3.c **** 
 342:./CORE/core_cm3.c **** /**
 343:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 344:./CORE/core_cm3.c ****  *
 345:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 346:./CORE/core_cm3.c ****  * @return        value of (*address)
 347:./CORE/core_cm3.c ****  *
 348:./CORE/core_cm3.c ****  * Exclusive LDR command for 8 bit values)
 349:./CORE/core_cm3.c ****  */
 350:./CORE/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 351:./CORE/core_cm3.c **** {
 352:./CORE/core_cm3.c ****   __ASM("ldrexb r0, [r0]");
 353:./CORE/core_cm3.c ****   __ASM("bx lr"); 
 354:./CORE/core_cm3.c **** }
 355:./CORE/core_cm3.c **** 
 356:./CORE/core_cm3.c **** /**
 357:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 358:./CORE/core_cm3.c ****  *
 359:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 360:./CORE/core_cm3.c ****  * @return        value of (*address)
 361:./CORE/core_cm3.c ****  *
 362:./CORE/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 363:./CORE/core_cm3.c ****  */
 364:./CORE/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 365:./CORE/core_cm3.c **** {
 366:./CORE/core_cm3.c ****   __ASM("ldrexh r0, [r0]");
 367:./CORE/core_cm3.c ****   __ASM("bx lr");
 368:./CORE/core_cm3.c **** }
 369:./CORE/core_cm3.c **** 
 370:./CORE/core_cm3.c **** /**
 371:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 372:./CORE/core_cm3.c ****  *
 373:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 374:./CORE/core_cm3.c ****  * @return        value of (*address)
ARM GAS  /tmp/ccerXcuS.s 			page 8


 375:./CORE/core_cm3.c ****  *
 376:./CORE/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 377:./CORE/core_cm3.c ****  */
 378:./CORE/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 379:./CORE/core_cm3.c **** {
 380:./CORE/core_cm3.c ****   __ASM("ldrex r0, [r0]");
 381:./CORE/core_cm3.c ****   __ASM("bx lr");
 382:./CORE/core_cm3.c **** }
 383:./CORE/core_cm3.c **** 
 384:./CORE/core_cm3.c **** /**
 385:./CORE/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 386:./CORE/core_cm3.c ****  *
 387:./CORE/core_cm3.c ****  * @param  value  value to store
 388:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 389:./CORE/core_cm3.c ****  * @return        successful / failed
 390:./CORE/core_cm3.c ****  *
 391:./CORE/core_cm3.c ****  * Exclusive STR command for 8 bit values
 392:./CORE/core_cm3.c ****  */
 393:./CORE/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 394:./CORE/core_cm3.c **** {
 395:./CORE/core_cm3.c ****   __ASM("strexb r0, r0, [r1]");
 396:./CORE/core_cm3.c ****   __ASM("bx lr");
 397:./CORE/core_cm3.c **** }
 398:./CORE/core_cm3.c **** 
 399:./CORE/core_cm3.c **** /**
 400:./CORE/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 401:./CORE/core_cm3.c ****  *
 402:./CORE/core_cm3.c ****  * @param  value  value to store
 403:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 404:./CORE/core_cm3.c ****  * @return        successful / failed
 405:./CORE/core_cm3.c ****  *
 406:./CORE/core_cm3.c ****  * Exclusive STR command for 16 bit values
 407:./CORE/core_cm3.c ****  */
 408:./CORE/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 409:./CORE/core_cm3.c **** {
 410:./CORE/core_cm3.c ****   __ASM("strexh r0, r0, [r1]");
 411:./CORE/core_cm3.c ****   __ASM("bx lr");
 412:./CORE/core_cm3.c **** }
 413:./CORE/core_cm3.c **** 
 414:./CORE/core_cm3.c **** /**
 415:./CORE/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 416:./CORE/core_cm3.c ****  *
 417:./CORE/core_cm3.c ****  * @param  value  value to store
 418:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 419:./CORE/core_cm3.c ****  * @return        successful / failed
 420:./CORE/core_cm3.c ****  *
 421:./CORE/core_cm3.c ****  * Exclusive STR command for 32 bit values
 422:./CORE/core_cm3.c ****  */
 423:./CORE/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 424:./CORE/core_cm3.c **** {
 425:./CORE/core_cm3.c ****   __ASM("strex r0, r0, [r1]");
 426:./CORE/core_cm3.c ****   __ASM("bx lr");
 427:./CORE/core_cm3.c **** }
 428:./CORE/core_cm3.c **** 
 429:./CORE/core_cm3.c **** #pragma diag_default=Pe940
 430:./CORE/core_cm3.c **** 
 431:./CORE/core_cm3.c **** 
ARM GAS  /tmp/ccerXcuS.s 			page 9


 432:./CORE/core_cm3.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 433:./CORE/core_cm3.c **** /* GNU gcc specific functions */
 434:./CORE/core_cm3.c **** 
 435:./CORE/core_cm3.c **** /**
 436:./CORE/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 437:./CORE/core_cm3.c ****  *
 438:./CORE/core_cm3.c ****  * @return ProcessStackPointer
 439:./CORE/core_cm3.c ****  *
 440:./CORE/core_cm3.c ****  * Return the actual process stack pointer
 441:./CORE/core_cm3.c ****  */
 442:./CORE/core_cm3.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 443:./CORE/core_cm3.c **** uint32_t __get_PSP(void)
 444:./CORE/core_cm3.c **** {
  27              		.loc 1 444 1 view -0
  28              		.cfi_startproc
  29              		@ Naked Function: prologue and epilogue provided by programmer.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 445:./CORE/core_cm3.c ****   uint32_t result=0;
  32              		.loc 1 445 3 view .LVU1
  33              	.LVL0:
 446:./CORE/core_cm3.c **** 
 447:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, psp\n\t" 
  34              		.loc 1 447 3 view .LVU2
  35              		.syntax unified
  36              	@ 447 "./CORE/core_cm3.c" 1
  37 0000 EFF30980 		MRS r0, psp
  38 0004 0046     		MOV r0, r0 
  39 0006 7047     		BX  lr     
  40              		
  41              	@ 0 "" 2
  42              	.LVL1:
 448:./CORE/core_cm3.c ****                   "MOV r0, %0 \n\t"
 449:./CORE/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 450:./CORE/core_cm3.c ****   return(result);
  43              		.loc 1 450 3 view .LVU3
 451:./CORE/core_cm3.c **** }
  44              		.loc 1 451 1 is_stmt 0 view .LVU4
  45              		.thumb
  46              		.syntax unified
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.__set_PSP,"ax",%progbits
  51              		.align	1
  52              		.global	__set_PSP
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  57              	__set_PSP:
  58              	.LVL2:
  59              	.LFB1:
 452:./CORE/core_cm3.c **** 
 453:./CORE/core_cm3.c **** /**
 454:./CORE/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 455:./CORE/core_cm3.c ****  *
 456:./CORE/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 457:./CORE/core_cm3.c ****  *
ARM GAS  /tmp/ccerXcuS.s 			page 10


 458:./CORE/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 459:./CORE/core_cm3.c ****  * (process stack pointer) Cortex processor register
 460:./CORE/core_cm3.c ****  */
 461:./CORE/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 462:./CORE/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 463:./CORE/core_cm3.c **** {
  60              		.loc 1 463 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ Naked Function: prologue and epilogue provided by programmer.
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
 464:./CORE/core_cm3.c ****   __ASM volatile ("MSR psp, %0\n\t"
  65              		.loc 1 464 3 view .LVU6
  66              		.syntax unified
  67              	@ 464 "./CORE/core_cm3.c" 1
  68 0000 80F30988 		MSR psp, r0
  69 0004 7047     		BX  lr     
  70              		
  71              	@ 0 "" 2
 465:./CORE/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 466:./CORE/core_cm3.c **** }
  72              		.loc 1 466 1 is_stmt 0 view .LVU7
  73              		.thumb
  74              		.syntax unified
  75              		.cfi_endproc
  76              	.LFE1:
  78              		.section	.text.__get_MSP,"ax",%progbits
  79              		.align	1
  80              		.global	__get_MSP
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  85              	__get_MSP:
  86              	.LFB2:
 467:./CORE/core_cm3.c **** 
 468:./CORE/core_cm3.c **** /**
 469:./CORE/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 470:./CORE/core_cm3.c ****  *
 471:./CORE/core_cm3.c ****  * @return Main Stack Pointer
 472:./CORE/core_cm3.c ****  *
 473:./CORE/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 474:./CORE/core_cm3.c ****  * Cortex processor register
 475:./CORE/core_cm3.c ****  */
 476:./CORE/core_cm3.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 477:./CORE/core_cm3.c **** uint32_t __get_MSP(void)
 478:./CORE/core_cm3.c **** {
  87              		.loc 1 478 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ Naked Function: prologue and epilogue provided by programmer.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 479:./CORE/core_cm3.c ****   uint32_t result=0;
  92              		.loc 1 479 3 view .LVU9
  93              	.LVL3:
 480:./CORE/core_cm3.c **** 
 481:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, msp\n\t" 
  94              		.loc 1 481 3 view .LVU10
ARM GAS  /tmp/ccerXcuS.s 			page 11


  95              		.syntax unified
  96              	@ 481 "./CORE/core_cm3.c" 1
  97 0000 EFF30880 		MRS r0, msp
  98 0004 0046     		MOV r0, r0 
  99 0006 7047     		BX  lr     
 100              		
 101              	@ 0 "" 2
 102              	.LVL4:
 482:./CORE/core_cm3.c ****                   "MOV r0, %0 \n\t"
 483:./CORE/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 484:./CORE/core_cm3.c ****   return(result);
 103              		.loc 1 484 3 view .LVU11
 485:./CORE/core_cm3.c **** }
 104              		.loc 1 485 1 is_stmt 0 view .LVU12
 105              		.thumb
 106              		.syntax unified
 107              		.cfi_endproc
 108              	.LFE2:
 110              		.section	.text.__set_MSP,"ax",%progbits
 111              		.align	1
 112              		.global	__set_MSP
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 117              	__set_MSP:
 118              	.LVL5:
 119              	.LFB3:
 486:./CORE/core_cm3.c **** 
 487:./CORE/core_cm3.c **** /**
 488:./CORE/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 489:./CORE/core_cm3.c ****  *
 490:./CORE/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 491:./CORE/core_cm3.c ****  *
 492:./CORE/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 493:./CORE/core_cm3.c ****  * (main stack pointer) Cortex processor register
 494:./CORE/core_cm3.c ****  */
 495:./CORE/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 496:./CORE/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 497:./CORE/core_cm3.c **** {
 120              		.loc 1 497 1 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ Naked Function: prologue and epilogue provided by programmer.
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 498:./CORE/core_cm3.c ****   __ASM volatile ("MSR msp, %0\n\t"
 125              		.loc 1 498 3 view .LVU14
 126              		.syntax unified
 127              	@ 498 "./CORE/core_cm3.c" 1
 128 0000 80F30888 		MSR msp, r0
 129 0004 7047     		BX  lr     
 130              		
 131              	@ 0 "" 2
 499:./CORE/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 500:./CORE/core_cm3.c **** }
 132              		.loc 1 500 1 is_stmt 0 view .LVU15
 133              		.thumb
 134              		.syntax unified
ARM GAS  /tmp/ccerXcuS.s 			page 12


 135              		.cfi_endproc
 136              	.LFE3:
 138              		.section	.text.__get_BASEPRI,"ax",%progbits
 139              		.align	1
 140              		.global	__get_BASEPRI
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 145              	__get_BASEPRI:
 146              	.LFB4:
 501:./CORE/core_cm3.c **** 
 502:./CORE/core_cm3.c **** /**
 503:./CORE/core_cm3.c ****  * @brief  Return the Base Priority value
 504:./CORE/core_cm3.c ****  *
 505:./CORE/core_cm3.c ****  * @return BasePriority
 506:./CORE/core_cm3.c ****  *
 507:./CORE/core_cm3.c ****  * Return the content of the base priority register
 508:./CORE/core_cm3.c ****  */
 509:./CORE/core_cm3.c **** uint32_t __get_BASEPRI(void)
 510:./CORE/core_cm3.c **** {
 147              		.loc 1 510 1 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 511:./CORE/core_cm3.c ****   uint32_t result=0;
 152              		.loc 1 511 3 view .LVU17
 153              	.LVL6:
 512:./CORE/core_cm3.c ****   
 513:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 154              		.loc 1 513 3 view .LVU18
 155              		.syntax unified
 156              	@ 513 "./CORE/core_cm3.c" 1
 157 0000 EFF31280 		MRS r0, basepri_max
 158              	@ 0 "" 2
 159              	.LVL7:
 514:./CORE/core_cm3.c ****   return(result);
 160              		.loc 1 514 3 view .LVU19
 515:./CORE/core_cm3.c **** }
 161              		.loc 1 515 1 is_stmt 0 view .LVU20
 162              		.thumb
 163              		.syntax unified
 164 0004 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE4:
 168              		.section	.text.__set_BASEPRI,"ax",%progbits
 169              		.align	1
 170              		.global	__set_BASEPRI
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	__set_BASEPRI:
 176              	.LVL8:
 177              	.LFB5:
 516:./CORE/core_cm3.c **** 
 517:./CORE/core_cm3.c **** /**
 518:./CORE/core_cm3.c ****  * @brief  Set the Base Priority value
ARM GAS  /tmp/ccerXcuS.s 			page 13


 519:./CORE/core_cm3.c ****  *
 520:./CORE/core_cm3.c ****  * @param  basePri  BasePriority
 521:./CORE/core_cm3.c ****  *
 522:./CORE/core_cm3.c ****  * Set the base priority register
 523:./CORE/core_cm3.c ****  */
 524:./CORE/core_cm3.c **** void __set_BASEPRI(uint32_t value)
 525:./CORE/core_cm3.c **** {
 178              		.loc 1 525 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 526:./CORE/core_cm3.c ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 183              		.loc 1 526 3 view .LVU22
 184              		.syntax unified
 185              	@ 526 "./CORE/core_cm3.c" 1
 186 0000 80F31188 		MSR basepri, r0
 187              	@ 0 "" 2
 527:./CORE/core_cm3.c **** }
 188              		.loc 1 527 1 is_stmt 0 view .LVU23
 189              		.thumb
 190              		.syntax unified
 191 0004 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE5:
 195              		.section	.text.__get_PRIMASK,"ax",%progbits
 196              		.align	1
 197              		.global	__get_PRIMASK
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 202              	__get_PRIMASK:
 203              	.LFB6:
 528:./CORE/core_cm3.c **** 
 529:./CORE/core_cm3.c **** /**
 530:./CORE/core_cm3.c ****  * @brief  Return the Priority Mask value
 531:./CORE/core_cm3.c ****  *
 532:./CORE/core_cm3.c ****  * @return PriMask
 533:./CORE/core_cm3.c ****  *
 534:./CORE/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 535:./CORE/core_cm3.c ****  */
 536:./CORE/core_cm3.c **** uint32_t __get_PRIMASK(void)
 537:./CORE/core_cm3.c **** {
 204              		.loc 1 537 1 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 538:./CORE/core_cm3.c ****   uint32_t result=0;
 209              		.loc 1 538 3 view .LVU25
 210              	.LVL9:
 539:./CORE/core_cm3.c **** 
 540:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 211              		.loc 1 540 3 view .LVU26
 212              		.syntax unified
 213              	@ 540 "./CORE/core_cm3.c" 1
 214 0000 EFF31080 		MRS r0, primask
ARM GAS  /tmp/ccerXcuS.s 			page 14


 215              	@ 0 "" 2
 216              	.LVL10:
 541:./CORE/core_cm3.c ****   return(result);
 217              		.loc 1 541 3 view .LVU27
 542:./CORE/core_cm3.c **** }
 218              		.loc 1 542 1 is_stmt 0 view .LVU28
 219              		.thumb
 220              		.syntax unified
 221 0004 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE6:
 225              		.section	.text.__set_PRIMASK,"ax",%progbits
 226              		.align	1
 227              		.global	__set_PRIMASK
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 232              	__set_PRIMASK:
 233              	.LVL11:
 234              	.LFB7:
 543:./CORE/core_cm3.c **** 
 544:./CORE/core_cm3.c **** /**
 545:./CORE/core_cm3.c ****  * @brief  Set the Priority Mask value
 546:./CORE/core_cm3.c ****  *
 547:./CORE/core_cm3.c ****  * @param  priMask  PriMask
 548:./CORE/core_cm3.c ****  *
 549:./CORE/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 550:./CORE/core_cm3.c ****  */
 551:./CORE/core_cm3.c **** void __set_PRIMASK(uint32_t priMask)
 552:./CORE/core_cm3.c **** {
 235              		.loc 1 552 1 is_stmt 1 view -0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 553:./CORE/core_cm3.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 240              		.loc 1 553 3 view .LVU30
 241              		.syntax unified
 242              	@ 553 "./CORE/core_cm3.c" 1
 243 0000 80F31088 		MSR primask, r0
 244              	@ 0 "" 2
 554:./CORE/core_cm3.c **** }
 245              		.loc 1 554 1 is_stmt 0 view .LVU31
 246              		.thumb
 247              		.syntax unified
 248 0004 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE7:
 252              		.section	.text.__get_FAULTMASK,"ax",%progbits
 253              		.align	1
 254              		.global	__get_FAULTMASK
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	__get_FAULTMASK:
 260              	.LFB8:
 555:./CORE/core_cm3.c **** 
ARM GAS  /tmp/ccerXcuS.s 			page 15


 556:./CORE/core_cm3.c **** /**
 557:./CORE/core_cm3.c ****  * @brief  Return the Fault Mask value
 558:./CORE/core_cm3.c ****  *
 559:./CORE/core_cm3.c ****  * @return FaultMask
 560:./CORE/core_cm3.c ****  *
 561:./CORE/core_cm3.c ****  * Return the content of the fault mask register
 562:./CORE/core_cm3.c ****  */
 563:./CORE/core_cm3.c **** uint32_t __get_FAULTMASK(void)
 564:./CORE/core_cm3.c **** {
 261              		.loc 1 564 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 565:./CORE/core_cm3.c ****   uint32_t result=0;
 266              		.loc 1 565 3 view .LVU33
 267              	.LVL12:
 566:./CORE/core_cm3.c ****   
 567:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 268              		.loc 1 567 3 view .LVU34
 269              		.syntax unified
 270              	@ 567 "./CORE/core_cm3.c" 1
 271 0000 EFF31380 		MRS r0, faultmask
 272              	@ 0 "" 2
 273              	.LVL13:
 568:./CORE/core_cm3.c ****   return(result);
 274              		.loc 1 568 3 view .LVU35
 569:./CORE/core_cm3.c **** }
 275              		.loc 1 569 1 is_stmt 0 view .LVU36
 276              		.thumb
 277              		.syntax unified
 278 0004 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE8:
 282              		.section	.text.__set_FAULTMASK,"ax",%progbits
 283              		.align	1
 284              		.global	__set_FAULTMASK
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	__set_FAULTMASK:
 290              	.LVL14:
 291              	.LFB9:
 570:./CORE/core_cm3.c **** 
 571:./CORE/core_cm3.c **** /**
 572:./CORE/core_cm3.c ****  * @brief  Set the Fault Mask value
 573:./CORE/core_cm3.c ****  *
 574:./CORE/core_cm3.c ****  * @param  faultMask  faultMask value
 575:./CORE/core_cm3.c ****  *
 576:./CORE/core_cm3.c ****  * Set the fault mask register
 577:./CORE/core_cm3.c ****  */
 578:./CORE/core_cm3.c **** void __set_FAULTMASK(uint32_t faultMask)
 579:./CORE/core_cm3.c **** {
 292              		.loc 1 579 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccerXcuS.s 			page 16


 296              		@ link register save eliminated.
 580:./CORE/core_cm3.c ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 297              		.loc 1 580 3 view .LVU38
 298              		.syntax unified
 299              	@ 580 "./CORE/core_cm3.c" 1
 300 0000 80F31388 		MSR faultmask, r0
 301              	@ 0 "" 2
 581:./CORE/core_cm3.c **** }
 302              		.loc 1 581 1 is_stmt 0 view .LVU39
 303              		.thumb
 304              		.syntax unified
 305 0004 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE9:
 309              		.section	.text.__get_CONTROL,"ax",%progbits
 310              		.align	1
 311              		.global	__get_CONTROL
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 316              	__get_CONTROL:
 317              	.LFB10:
 582:./CORE/core_cm3.c **** 
 583:./CORE/core_cm3.c **** /**
 584:./CORE/core_cm3.c ****  * @brief  Return the Control Register value
 585:./CORE/core_cm3.c **** * 
 586:./CORE/core_cm3.c **** *  @return Control value
 587:./CORE/core_cm3.c ****  *
 588:./CORE/core_cm3.c ****  * Return the content of the control register
 589:./CORE/core_cm3.c ****  */
 590:./CORE/core_cm3.c **** uint32_t __get_CONTROL(void)
 591:./CORE/core_cm3.c **** {
 318              		.loc 1 591 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 592:./CORE/core_cm3.c ****   uint32_t result=0;
 323              		.loc 1 592 3 view .LVU41
 324              	.LVL15:
 593:./CORE/core_cm3.c **** 
 594:./CORE/core_cm3.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 325              		.loc 1 594 3 view .LVU42
 326              		.syntax unified
 327              	@ 594 "./CORE/core_cm3.c" 1
 328 0000 EFF31480 		MRS r0, control
 329              	@ 0 "" 2
 330              	.LVL16:
 595:./CORE/core_cm3.c ****   return(result);
 331              		.loc 1 595 3 view .LVU43
 596:./CORE/core_cm3.c **** }
 332              		.loc 1 596 1 is_stmt 0 view .LVU44
 333              		.thumb
 334              		.syntax unified
 335 0004 7047     		bx	lr
 336              		.cfi_endproc
 337              	.LFE10:
ARM GAS  /tmp/ccerXcuS.s 			page 17


 339              		.section	.text.__set_CONTROL,"ax",%progbits
 340              		.align	1
 341              		.global	__set_CONTROL
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	__set_CONTROL:
 347              	.LVL17:
 348              	.LFB11:
 597:./CORE/core_cm3.c **** 
 598:./CORE/core_cm3.c **** /**
 599:./CORE/core_cm3.c ****  * @brief  Set the Control Register value
 600:./CORE/core_cm3.c ****  *
 601:./CORE/core_cm3.c ****  * @param  control  Control value
 602:./CORE/core_cm3.c ****  *
 603:./CORE/core_cm3.c ****  * Set the control register
 604:./CORE/core_cm3.c ****  */
 605:./CORE/core_cm3.c **** void __set_CONTROL(uint32_t control)
 606:./CORE/core_cm3.c **** {
 349              		.loc 1 606 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 607:./CORE/core_cm3.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 354              		.loc 1 607 3 view .LVU46
 355              		.syntax unified
 356              	@ 607 "./CORE/core_cm3.c" 1
 357 0000 80F31488 		MSR control, r0
 358              	@ 0 "" 2
 608:./CORE/core_cm3.c **** }
 359              		.loc 1 608 1 is_stmt 0 view .LVU47
 360              		.thumb
 361              		.syntax unified
 362 0004 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE11:
 366              		.section	.text.__REV,"ax",%progbits
 367              		.align	1
 368              		.global	__REV
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 373              	__REV:
 374              	.LVL18:
 375              	.LFB12:
 609:./CORE/core_cm3.c **** 
 610:./CORE/core_cm3.c **** 
 611:./CORE/core_cm3.c **** /**
 612:./CORE/core_cm3.c ****  * @brief  Reverse byte order in integer value
 613:./CORE/core_cm3.c ****  *
 614:./CORE/core_cm3.c ****  * @param  value  value to reverse
 615:./CORE/core_cm3.c ****  * @return        reversed value
 616:./CORE/core_cm3.c ****  *
 617:./CORE/core_cm3.c ****  * Reverse byte order in integer value
 618:./CORE/core_cm3.c ****  */
 619:./CORE/core_cm3.c **** uint32_t __REV(uint32_t value)
ARM GAS  /tmp/ccerXcuS.s 			page 18


 620:./CORE/core_cm3.c **** {
 376              		.loc 1 620 1 is_stmt 1 view -0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 621:./CORE/core_cm3.c ****   uint32_t result=0;
 381              		.loc 1 621 3 view .LVU49
 622:./CORE/core_cm3.c ****   
 623:./CORE/core_cm3.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 382              		.loc 1 623 3 view .LVU50
 383              		.syntax unified
 384              	@ 623 "./CORE/core_cm3.c" 1
 385 0000 00BA     		rev r0, r0
 386              	@ 0 "" 2
 387              	.LVL19:
 624:./CORE/core_cm3.c ****   return(result);
 388              		.loc 1 624 3 view .LVU51
 625:./CORE/core_cm3.c **** }
 389              		.loc 1 625 1 is_stmt 0 view .LVU52
 390              		.thumb
 391              		.syntax unified
 392 0002 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE12:
 396              		.section	.text.__REV16,"ax",%progbits
 397              		.align	1
 398              		.global	__REV16
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 403              	__REV16:
 404              	.LVL20:
 405              	.LFB13:
 626:./CORE/core_cm3.c **** 
 627:./CORE/core_cm3.c **** /**
 628:./CORE/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 629:./CORE/core_cm3.c ****  *
 630:./CORE/core_cm3.c ****  * @param  value  value to reverse
 631:./CORE/core_cm3.c ****  * @return        reversed value
 632:./CORE/core_cm3.c ****  *
 633:./CORE/core_cm3.c ****  * Reverse byte order in unsigned short value
 634:./CORE/core_cm3.c ****  */
 635:./CORE/core_cm3.c **** uint32_t __REV16(uint16_t value)
 636:./CORE/core_cm3.c **** {
 406              		.loc 1 636 1 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 637:./CORE/core_cm3.c ****   uint32_t result=0;
 411              		.loc 1 637 3 view .LVU54
 638:./CORE/core_cm3.c ****   
 639:./CORE/core_cm3.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 412              		.loc 1 639 3 view .LVU55
 413              		.syntax unified
 414              	@ 639 "./CORE/core_cm3.c" 1
ARM GAS  /tmp/ccerXcuS.s 			page 19


 415 0000 40BA     		rev16 r0, r0
 416              	@ 0 "" 2
 417              	.LVL21:
 640:./CORE/core_cm3.c ****   return(result);
 418              		.loc 1 640 3 view .LVU56
 641:./CORE/core_cm3.c **** }
 419              		.loc 1 641 1 is_stmt 0 view .LVU57
 420              		.thumb
 421              		.syntax unified
 422 0002 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE13:
 426              		.section	.text.__REVSH,"ax",%progbits
 427              		.align	1
 428              		.global	__REVSH
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 433              	__REVSH:
 434              	.LVL22:
 435              	.LFB14:
 642:./CORE/core_cm3.c **** 
 643:./CORE/core_cm3.c **** /**
 644:./CORE/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 645:./CORE/core_cm3.c ****  *
 646:./CORE/core_cm3.c ****  * @param  value  value to reverse
 647:./CORE/core_cm3.c ****  * @return        reversed value
 648:./CORE/core_cm3.c ****  *
 649:./CORE/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 650:./CORE/core_cm3.c ****  */
 651:./CORE/core_cm3.c **** int32_t __REVSH(int16_t value)
 652:./CORE/core_cm3.c **** {
 436              		.loc 1 652 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 653:./CORE/core_cm3.c ****   uint32_t result=0;
 441              		.loc 1 653 3 view .LVU59
 654:./CORE/core_cm3.c ****   
 655:./CORE/core_cm3.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 442              		.loc 1 655 3 view .LVU60
 443              		.syntax unified
 444              	@ 655 "./CORE/core_cm3.c" 1
 445 0000 C0BA     		revsh r0, r0
 446              	@ 0 "" 2
 447              	.LVL23:
 656:./CORE/core_cm3.c ****   return(result);
 448              		.loc 1 656 3 view .LVU61
 657:./CORE/core_cm3.c **** }
 449              		.loc 1 657 1 is_stmt 0 view .LVU62
 450              		.thumb
 451              		.syntax unified
 452 0002 7047     		bx	lr
 453              		.cfi_endproc
 454              	.LFE14:
 456              		.section	.text.__RBIT,"ax",%progbits
ARM GAS  /tmp/ccerXcuS.s 			page 20


 457              		.align	1
 458              		.global	__RBIT
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 463              	__RBIT:
 464              	.LVL24:
 465              	.LFB15:
 658:./CORE/core_cm3.c **** 
 659:./CORE/core_cm3.c **** /**
 660:./CORE/core_cm3.c ****  * @brief  Reverse bit order of value
 661:./CORE/core_cm3.c ****  *
 662:./CORE/core_cm3.c ****  * @param  value  value to reverse
 663:./CORE/core_cm3.c ****  * @return        reversed value
 664:./CORE/core_cm3.c ****  *
 665:./CORE/core_cm3.c ****  * Reverse bit order of value
 666:./CORE/core_cm3.c ****  */
 667:./CORE/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 668:./CORE/core_cm3.c **** {
 466              		.loc 1 668 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470              		@ link register save eliminated.
 669:./CORE/core_cm3.c ****   uint32_t result=0;
 471              		.loc 1 669 3 view .LVU64
 670:./CORE/core_cm3.c ****   
 671:./CORE/core_cm3.c ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 472              		.loc 1 671 4 view .LVU65
 473              		.syntax unified
 474              	@ 671 "./CORE/core_cm3.c" 1
 475 0000 90FAA0F0 		rbit r0, r0
 476              	@ 0 "" 2
 477              	.LVL25:
 672:./CORE/core_cm3.c ****    return(result);
 478              		.loc 1 672 4 view .LVU66
 673:./CORE/core_cm3.c **** }
 479              		.loc 1 673 1 is_stmt 0 view .LVU67
 480              		.thumb
 481              		.syntax unified
 482 0004 7047     		bx	lr
 483              		.cfi_endproc
 484              	.LFE15:
 486              		.section	.text.__LDREXB,"ax",%progbits
 487              		.align	1
 488              		.global	__LDREXB
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 493              	__LDREXB:
 494              	.LVL26:
 495              	.LFB16:
 674:./CORE/core_cm3.c **** 
 675:./CORE/core_cm3.c **** /**
 676:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 677:./CORE/core_cm3.c ****  *
 678:./CORE/core_cm3.c ****  * @param  *addr  address pointer
ARM GAS  /tmp/ccerXcuS.s 			page 21


 679:./CORE/core_cm3.c ****  * @return        value of (*address)
 680:./CORE/core_cm3.c ****  *
 681:./CORE/core_cm3.c ****  * Exclusive LDR command for 8 bit value
 682:./CORE/core_cm3.c ****  */
 683:./CORE/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 684:./CORE/core_cm3.c **** {
 496              		.loc 1 684 1 is_stmt 1 view -0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 0, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 685:./CORE/core_cm3.c ****     uint8_t result=0;
 501              		.loc 1 685 5 view .LVU69
 686:./CORE/core_cm3.c ****   
 687:./CORE/core_cm3.c ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 502              		.loc 1 687 4 view .LVU70
 503              		.syntax unified
 504              	@ 687 "./CORE/core_cm3.c" 1
 505 0000 D0E84F0F 		ldrexb r0, [r0]
 506              	@ 0 "" 2
 507              	.LVL27:
 688:./CORE/core_cm3.c ****    return(result);
 508              		.loc 1 688 4 view .LVU71
 689:./CORE/core_cm3.c **** }
 509              		.loc 1 689 1 is_stmt 0 view .LVU72
 510              		.thumb
 511              		.syntax unified
 512 0004 C0B2     		uxtb	r0, r0
 513              		.loc 1 689 1 view .LVU73
 514 0006 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE16:
 518              		.section	.text.__LDREXH,"ax",%progbits
 519              		.align	1
 520              		.global	__LDREXH
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 525              	__LDREXH:
 526              	.LVL28:
 527              	.LFB17:
 690:./CORE/core_cm3.c **** 
 691:./CORE/core_cm3.c **** /**
 692:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 693:./CORE/core_cm3.c ****  *
 694:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 695:./CORE/core_cm3.c ****  * @return        value of (*address)
 696:./CORE/core_cm3.c ****  *
 697:./CORE/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 698:./CORE/core_cm3.c ****  */
 699:./CORE/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 700:./CORE/core_cm3.c **** {
 528              		.loc 1 700 1 is_stmt 1 view -0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              		@ link register save eliminated.
ARM GAS  /tmp/ccerXcuS.s 			page 22


 701:./CORE/core_cm3.c ****     uint16_t result=0;
 533              		.loc 1 701 5 view .LVU75
 702:./CORE/core_cm3.c ****   
 703:./CORE/core_cm3.c ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 534              		.loc 1 703 4 view .LVU76
 535              		.syntax unified
 536              	@ 703 "./CORE/core_cm3.c" 1
 537 0000 D0E85F0F 		ldrexh r0, [r0]
 538              	@ 0 "" 2
 539              	.LVL29:
 704:./CORE/core_cm3.c ****    return(result);
 540              		.loc 1 704 4 view .LVU77
 705:./CORE/core_cm3.c **** }
 541              		.loc 1 705 1 is_stmt 0 view .LVU78
 542              		.thumb
 543              		.syntax unified
 544 0004 80B2     		uxth	r0, r0
 545              		.loc 1 705 1 view .LVU79
 546 0006 7047     		bx	lr
 547              		.cfi_endproc
 548              	.LFE17:
 550              		.section	.text.__LDREXW,"ax",%progbits
 551              		.align	1
 552              		.global	__LDREXW
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 557              	__LDREXW:
 558              	.LVL30:
 559              	.LFB18:
 706:./CORE/core_cm3.c **** 
 707:./CORE/core_cm3.c **** /**
 708:./CORE/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 709:./CORE/core_cm3.c ****  *
 710:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 711:./CORE/core_cm3.c ****  * @return        value of (*address)
 712:./CORE/core_cm3.c ****  *
 713:./CORE/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 714:./CORE/core_cm3.c ****  */
 715:./CORE/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 716:./CORE/core_cm3.c **** {
 560              		.loc 1 716 1 is_stmt 1 view -0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 717:./CORE/core_cm3.c ****     uint32_t result=0;
 565              		.loc 1 717 5 view .LVU81
 718:./CORE/core_cm3.c ****   
 719:./CORE/core_cm3.c ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 566              		.loc 1 719 4 view .LVU82
 567              		.syntax unified
 568              	@ 719 "./CORE/core_cm3.c" 1
 569 0000 50E8000F 		ldrex r0, [r0]
 570              	@ 0 "" 2
 571              	.LVL31:
 720:./CORE/core_cm3.c ****    return(result);
ARM GAS  /tmp/ccerXcuS.s 			page 23


 572              		.loc 1 720 4 view .LVU83
 721:./CORE/core_cm3.c **** }
 573              		.loc 1 721 1 is_stmt 0 view .LVU84
 574              		.thumb
 575              		.syntax unified
 576 0004 7047     		bx	lr
 577              		.cfi_endproc
 578              	.LFE18:
 580              		.section	.text.__STREXB,"ax",%progbits
 581              		.align	1
 582              		.global	__STREXB
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 587              	__STREXB:
 588              	.LVL32:
 589              	.LFB19:
 722:./CORE/core_cm3.c **** 
 723:./CORE/core_cm3.c **** /**
 724:./CORE/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 725:./CORE/core_cm3.c ****  *
 726:./CORE/core_cm3.c ****  * @param  value  value to store
 727:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 728:./CORE/core_cm3.c ****  * @return        successful / failed
 729:./CORE/core_cm3.c ****  *
 730:./CORE/core_cm3.c ****  * Exclusive STR command for 8 bit values
 731:./CORE/core_cm3.c ****  */
 732:./CORE/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 733:./CORE/core_cm3.c **** {
 590              		.loc 1 733 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 734:./CORE/core_cm3.c ****    uint32_t result=0;
 595              		.loc 1 734 4 view .LVU86
 735:./CORE/core_cm3.c ****   
 736:./CORE/core_cm3.c ****    __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 596              		.loc 1 736 4 view .LVU87
 597              		.syntax unified
 598              	@ 736 "./CORE/core_cm3.c" 1
 599 0000 C1E8430F 		strexb r3, r0, [r1]
 600              	@ 0 "" 2
 601              	.LVL33:
 737:./CORE/core_cm3.c ****    return(result);
 602              		.loc 1 737 4 view .LVU88
 738:./CORE/core_cm3.c **** }
 603              		.loc 1 738 1 is_stmt 0 view .LVU89
 604              		.thumb
 605              		.syntax unified
 606 0004 1846     		mov	r0, r3
 607              	.LVL34:
 608              		.loc 1 738 1 view .LVU90
 609 0006 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE19:
 613              		.section	.text.__STREXH,"ax",%progbits
ARM GAS  /tmp/ccerXcuS.s 			page 24


 614              		.align	1
 615              		.global	__STREXH
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 620              	__STREXH:
 621              	.LVL35:
 622              	.LFB20:
 739:./CORE/core_cm3.c **** 
 740:./CORE/core_cm3.c **** /**
 741:./CORE/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 742:./CORE/core_cm3.c ****  *
 743:./CORE/core_cm3.c ****  * @param  value  value to store
 744:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 745:./CORE/core_cm3.c ****  * @return        successful / failed
 746:./CORE/core_cm3.c ****  *
 747:./CORE/core_cm3.c ****  * Exclusive STR command for 16 bit values
 748:./CORE/core_cm3.c ****  */
 749:./CORE/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 750:./CORE/core_cm3.c **** {
 623              		.loc 1 750 1 is_stmt 1 view -0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 751:./CORE/core_cm3.c ****    uint32_t result=0;
 628              		.loc 1 751 4 view .LVU92
 752:./CORE/core_cm3.c ****   
 753:./CORE/core_cm3.c ****    __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 629              		.loc 1 753 4 view .LVU93
 630              		.syntax unified
 631              	@ 753 "./CORE/core_cm3.c" 1
 632 0000 C1E8530F 		strexh r3, r0, [r1]
 633              	@ 0 "" 2
 634              	.LVL36:
 754:./CORE/core_cm3.c ****    return(result);
 635              		.loc 1 754 4 view .LVU94
 755:./CORE/core_cm3.c **** }
 636              		.loc 1 755 1 is_stmt 0 view .LVU95
 637              		.thumb
 638              		.syntax unified
 639 0004 1846     		mov	r0, r3
 640              	.LVL37:
 641              		.loc 1 755 1 view .LVU96
 642 0006 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE20:
 646              		.section	.text.__STREXW,"ax",%progbits
 647              		.align	1
 648              		.global	__STREXW
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	__STREXW:
 654              	.LVL38:
 655              	.LFB21:
 756:./CORE/core_cm3.c **** 
ARM GAS  /tmp/ccerXcuS.s 			page 25


 757:./CORE/core_cm3.c **** /**
 758:./CORE/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 759:./CORE/core_cm3.c ****  *
 760:./CORE/core_cm3.c ****  * @param  value  value to store
 761:./CORE/core_cm3.c ****  * @param  *addr  address pointer
 762:./CORE/core_cm3.c ****  * @return        successful / failed
 763:./CORE/core_cm3.c ****  *
 764:./CORE/core_cm3.c ****  * Exclusive STR command for 32 bit values
 765:./CORE/core_cm3.c ****  */
 766:./CORE/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 767:./CORE/core_cm3.c **** {
 656              		.loc 1 767 1 is_stmt 1 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 768:./CORE/core_cm3.c ****    uint32_t result=0;
 661              		.loc 1 768 4 view .LVU98
 769:./CORE/core_cm3.c ****   
 770:./CORE/core_cm3.c ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 662              		.loc 1 770 4 view .LVU99
 663              		.syntax unified
 664              	@ 770 "./CORE/core_cm3.c" 1
 665 0000 41E80000 		strex r0, r0, [r1]
 666              	@ 0 "" 2
 667              	.LVL39:
 771:./CORE/core_cm3.c ****    return(result);
 668              		.loc 1 771 4 view .LVU100
 772:./CORE/core_cm3.c **** }
 669              		.loc 1 772 1 is_stmt 0 view .LVU101
 670              		.thumb
 671              		.syntax unified
 672 0004 7047     		bx	lr
 673              		.cfi_endproc
 674              	.LFE21:
 676              		.text
 677              	.Letext0:
 678              		.file 2 "/usr/lib/gcc/arm-none-eabi/14.1.0/include/stdint-gcc.h"
ARM GAS  /tmp/ccerXcuS.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 core_cm3.c
     /tmp/ccerXcuS.s:19     .text.__get_PSP:00000000 $t
     /tmp/ccerXcuS.s:25     .text.__get_PSP:00000000 __get_PSP
     /tmp/ccerXcuS.s:51     .text.__set_PSP:00000000 $t
     /tmp/ccerXcuS.s:57     .text.__set_PSP:00000000 __set_PSP
     /tmp/ccerXcuS.s:79     .text.__get_MSP:00000000 $t
     /tmp/ccerXcuS.s:85     .text.__get_MSP:00000000 __get_MSP
     /tmp/ccerXcuS.s:111    .text.__set_MSP:00000000 $t
     /tmp/ccerXcuS.s:117    .text.__set_MSP:00000000 __set_MSP
     /tmp/ccerXcuS.s:139    .text.__get_BASEPRI:00000000 $t
     /tmp/ccerXcuS.s:145    .text.__get_BASEPRI:00000000 __get_BASEPRI
     /tmp/ccerXcuS.s:169    .text.__set_BASEPRI:00000000 $t
     /tmp/ccerXcuS.s:175    .text.__set_BASEPRI:00000000 __set_BASEPRI
     /tmp/ccerXcuS.s:196    .text.__get_PRIMASK:00000000 $t
     /tmp/ccerXcuS.s:202    .text.__get_PRIMASK:00000000 __get_PRIMASK
     /tmp/ccerXcuS.s:226    .text.__set_PRIMASK:00000000 $t
     /tmp/ccerXcuS.s:232    .text.__set_PRIMASK:00000000 __set_PRIMASK
     /tmp/ccerXcuS.s:253    .text.__get_FAULTMASK:00000000 $t
     /tmp/ccerXcuS.s:259    .text.__get_FAULTMASK:00000000 __get_FAULTMASK
     /tmp/ccerXcuS.s:283    .text.__set_FAULTMASK:00000000 $t
     /tmp/ccerXcuS.s:289    .text.__set_FAULTMASK:00000000 __set_FAULTMASK
     /tmp/ccerXcuS.s:310    .text.__get_CONTROL:00000000 $t
     /tmp/ccerXcuS.s:316    .text.__get_CONTROL:00000000 __get_CONTROL
     /tmp/ccerXcuS.s:340    .text.__set_CONTROL:00000000 $t
     /tmp/ccerXcuS.s:346    .text.__set_CONTROL:00000000 __set_CONTROL
     /tmp/ccerXcuS.s:367    .text.__REV:00000000 $t
     /tmp/ccerXcuS.s:373    .text.__REV:00000000 __REV
     /tmp/ccerXcuS.s:397    .text.__REV16:00000000 $t
     /tmp/ccerXcuS.s:403    .text.__REV16:00000000 __REV16
     /tmp/ccerXcuS.s:427    .text.__REVSH:00000000 $t
     /tmp/ccerXcuS.s:433    .text.__REVSH:00000000 __REVSH
     /tmp/ccerXcuS.s:457    .text.__RBIT:00000000 $t
     /tmp/ccerXcuS.s:463    .text.__RBIT:00000000 __RBIT
     /tmp/ccerXcuS.s:487    .text.__LDREXB:00000000 $t
     /tmp/ccerXcuS.s:493    .text.__LDREXB:00000000 __LDREXB
     /tmp/ccerXcuS.s:519    .text.__LDREXH:00000000 $t
     /tmp/ccerXcuS.s:525    .text.__LDREXH:00000000 __LDREXH
     /tmp/ccerXcuS.s:551    .text.__LDREXW:00000000 $t
     /tmp/ccerXcuS.s:557    .text.__LDREXW:00000000 __LDREXW
     /tmp/ccerXcuS.s:581    .text.__STREXB:00000000 $t
     /tmp/ccerXcuS.s:587    .text.__STREXB:00000000 __STREXB
     /tmp/ccerXcuS.s:614    .text.__STREXH:00000000 $t
     /tmp/ccerXcuS.s:620    .text.__STREXH:00000000 __STREXH
     /tmp/ccerXcuS.s:647    .text.__STREXW:00000000 $t
     /tmp/ccerXcuS.s:653    .text.__STREXW:00000000 __STREXW

NO UNDEFINED SYMBOLS
